{
 "cells": [
  {
   "cell_type": "markdown",
   "execution_count": 1,
   "metadata": {},
   "source": [
    "# Pleasant Lake Example\n",
    "\n",
    "* **[View the configuration file(s)](https://aleaf.github.io/modflow-setup/config-file-gallery.html#pleasant-lake-test-case)** \n",
    "* **[Run this example](https://mybinder.org/v2/gh/aleaf/modflow-setup/develop?urlpath=lab/tree/examples)  on  [Binder](https://mybinder.org/)**\n",
    "\n",
    "#### Model details\n",
    "* MODFLOW-6 model with local grid refinement (LGR)\n",
    "* LGR parent model is itself a Telescopic Mesh Refinment (TMR) inset from a MODFLOW-NWT model\n",
    "* Layer 1 in TMR parent model is subdivided evenly into two layers in LGR model (``botm: from_parent: 0: -0.5``). Other layers mapped explicitly between TMR parent and LGR model.\n",
    "* starting heads from LGR parent model resampled from binary output from the TMR parent\n",
    "* rch, npf, sto, and wel input copied from parent model\n",
    "* SFR package constructed from an NHDPlus v2 dataset (path to NHDPlus files in the same structure as the `downloads from the NHDPlus website`_)\n",
    "* head observations from csv files with different column names\n",
    "* LGR inset extent based on a buffer distance around a feature of interest\n",
    "* LGR inset dis, ic, npf, sto and rch packages copied from LGR parent\n",
    "* WEL package created from custom format\n",
    "* Lake package created from polygon features, bathymetry raster, stage-area-volume file and climate data from `PRISM`_.\n",
    "* Lake package observations set up automatically (output file for each lake)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:56:41.310894Z",
     "iopub.status.busy": "2020-09-16T16:56:41.310178Z",
     "iopub.status.idle": "2020-09-16T16:56:42.355299Z",
     "shell.execute_reply": "2020-09-16T16:56:42.354380Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/travis/build/aleaf/modflow-setup/mfsetup/mfmodel.py:50: UserWarning: Automatic reprojection functionality requires gis-utils >= 0.2\n",
      "Please pip install --upgrade gis-utils\n",
      "  warnings.warn('Automatic reprojection functionality requires gis-utils >= 0.2'\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import flopy\n",
    "import flopy.utils.binaryfile as bf\n",
    "from mfsetup import MF6model\n",
    "from mfsetup.discretization import cellids_to_kij\n",
    "from gisutils import df2shp\n",
    "import mfexport"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:56:42.366463Z",
     "iopub.status.busy": "2020-09-16T16:56:42.359008Z",
     "iopub.status.idle": "2020-09-16T16:56:55.935968Z",
     "shell.execute_reply": "2020-09-16T16:56:55.935244Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loading configuration file pleasant_lgr_parent.yml...\n",
      "\n",
      "Setting up plsnt_lgr_parent model from data in None\n",
      "\n",
      "\n",
      "arguments to MFSimulation:\n",
      "sim_name: pleasant_lgr\n",
      "version: mf6\n",
      "exe_name: mf6\n",
      "sim_ws: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr\n",
      "\n",
      "arguments to ModflowGwf:\n",
      "modelname: plsnt_lgr_parent\n",
      "version: mf6\n",
      "simulation: sim_name = pleasant_lgr\n",
      "sim_path = /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr\n",
      "exe_name = mf6\n",
      "\n",
      "###################\n",
      "Package mfsim.nam\n",
      "###################\n",
      "\n",
      "package_name = mfsim.nam\n",
      "filename = mfsim.nam\n",
      "package_type = nam\n",
      "model_or_simulation_package = simulation\n",
      "simulation_name = pleasant_lgr\n",
      "\n",
      "\n",
      "\n",
      "list: plsnt_lgr_parent.list\n",
      "print_input: True\n",
      "print_flows: False\n",
      "save_flows: True\n",
      "newtonoptions: ['under_relaxation']\n",
      "loading parent model /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant.nam...\n",
      "\n",
      "arguments to Modflow.load:\n",
      "model_ws: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant\n",
      "version: mfnwt\n",
      "load_only: [sfr ... wel]\n",
      "f: pleasant.nam\n",
      "finished in 0.14s\n",
      "\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "xoff: 552200.0\n",
      "yoff: 387000.0\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "delr: array: (36,), float32, min: 200, mean: 200, max: 200\n",
      "delc: array: (34,), float32, min: 200, mean: 200, max: 200\n",
      "top: array: (34, 36), float32, min: 283.24, mean: 319.565, max: 389.51\n",
      "botm: array: (4, 34, 36), float32, min: 187.31, mean: 271.826, max: 388.41\n",
      "lenuni: 2\n",
      "\n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: 13\n",
      "model_time_units: days\n",
      "perlen: array: (13,), float32, min: 1, mean: 28.2308, max: 31\n",
      "nstp: array: (13,), int32, min: 1, mean: 4.69231, max: 5\n",
      "tsmult: array: (13,), float32, min: 1, mean: 1.46154, max: 1.5\n",
      "steady: array: (13,), bool, min: 0, mean: 0.0769231, max: 1\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0.0\n",
      "snap_to_NHG: False\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "dxy: 200\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "parent_model: MODFLOW 4 layer(s) 34 row(s) 36 column(s) 13 stress period(s)\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp\n",
      "setting up model grid...\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [200.0 ... 200.0]\n",
      "delc: [200.0 ... 200.0]\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "xul: 552800.0\n",
      "yul: 393200.0\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "top: None\n",
      "botm: None\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp...\n",
      "finished in 0.04s\n",
      "\n",
      "loading configuration file /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "\n",
      "arguments to ModflowGwf:\n",
      "modelname: plsnt_lgr_inset\n",
      "version: mf6\n",
      "simulation: \n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: 1\n",
      "steady: True\n",
      "oc_saverecord: {0: ['save head last', 'save budget last']}\n",
      "nstp: 1\n",
      "tsmult: 1\n",
      "\n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: None\n",
      "steady: False\n",
      "oc_saverecord: {0: ['save head last', 'save budget last']}\n",
      "end_date_time: 2012-12-31\n",
      "freq: 1MS\n",
      "nstp: 1\n",
      "tsmult: 1.5\n",
      "sim_name = pleasant_lgr\n",
      "sim_path = /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr\n",
      "exe_name = mf6\n",
      "\n",
      "###################\n",
      "Package mfsim.nam\n",
      "###################\n",
      "\n",
      "package_name = mfsim.nam\n",
      "filename = mfsim.nam\n",
      "package_type = nam\n",
      "model_or_simulation_package = simulation\n",
      "simulation_name = pleasant_lgr\n",
      "\n",
      "\n",
      "@@@@@@@@@@@@@@@@@@@@\n",
      "Model plsnt_lgr_parent\n",
      "@@@@@@@@@@@@@@@@@@@@\n",
      "\n",
      "plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages:\n",
      "\n",
      "list: plsnt_lgr_inset.list\n",
      "print_input: True\n",
      "print_flows: False\n",
      "save_flows: True\n",
      "newtonoptions: ['under_relaxation']\n",
      "\n",
      "Setting up DIS package...\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "length_units: meters\n",
      "filenames: {0: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif'}\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "datatype: array2d\n",
      "variable: top\n",
      "dest_model: plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages:\n",
      "vmin: -1e+30\n",
      "vmax: 1e+30\n",
      "resample_method: linear\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif...\n",
      "finished in 0.07s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "filenames: {1: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif\n",
      " ...\n",
      "}\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "datatype: array3d\n",
      "variable: botm\n",
      "dest_model: plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages:\n",
      "vmin: -1e+30\n",
      "vmax: 1e+30\n",
      "resample_method: linear\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif...\n",
      "finished in 0.16s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif...\n",
      "finished in 0.17s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif...\n",
      "finished in 0.16s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif...\n",
      "finished in 0.17s\n",
      "loading ./external/plsnt_lgr_parent_top.dat, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.04s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfdis:\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "nlay: 5\n",
      "delr: [200.0 ... 200.0]\n",
      "delc: [200.0 ... 200.0]\n",
      "angrot: 0.0\n",
      "top: [{'filename': './external/plsnt_lgr_parent_top.dat'}]\n",
      "botm: [{'filename': './external/plsnt_lgr_parent_botm0.dat'} ... {'filename': './external/plsnt_lgr_parent_botm4.dat'}]\n",
      "idomain: [{'filename': './external/plsnt_lgr_parent_idomain0.dat'} ... {'filename': './external/plsnt_lgr_parent_idomain4.dat'}]\n",
      "xorigin: 553000\n",
      "yorigin: 388000\n",
      "length_units: meters\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote original/plsnt_lgr_parent_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr4.dat, took 0.00s\n",
      "loading ./external/plsnt_lgr_parent_top.dat, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.04s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0.0\n",
      "snap_to_NHG: False\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "dxy: 200\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "parent_model: MODFLOW 4 layer(s) 34 row(s) 36 column(s) 13 stress period(s)\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp\n",
      "top: array: (25, 25), float64, min: 291.87, mean: 323.488, max: 369.5\n",
      "botm: array: (5, 25, 25), float64, min: 189.36, mean: 282.649, max: 355.77\n",
      "setting up model grid...\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [200.0 ... 200.0]\n",
      "delc: [200.0 ... 200.0]\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "xul: 552800.0\n",
      "yul: 393200.0\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "top: array: (25, 25), float64, min: 291.87, mean: 323.488, max: 369.5\n",
      "botm: array: (5, 25, 25), float64, min: 189.36, mean: 282.649, max: 355.77\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp...\n",
      "finished in 0.03s\n",
      "\n",
      "loading configuration file /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "finished in 0.99s\n",
      "\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "xoff: 552800.0\n",
      "yoff: 388200.0\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "delr: array: (25,), float64, min: 200, mean: 200, max: 200\n",
      "delc: array: (25,), float64, min: 200, mean: 200, max: 200\n",
      "top: array: (25, 25), float64, min: 291.87, mean: 323.488, max: 369.5\n",
      "botm: array: (5, 25, 25), float64, min: 189.36, mean: 282.649, max: 355.77\n",
      "lenuni: 2\n",
      "\n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: 1\n",
      "steady: True\n",
      "oc_saverecord: {0: ['save head last', 'save budget last']}\n",
      "nstp: 1\n",
      "tsmult: 1\n",
      "\n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: None\n",
      "steady: False\n",
      "oc_saverecord: {0: ['save head last', 'save budget last']}\n",
      "end_date_time: 2012-12-31\n",
      "freq: 1MS\n",
      "nstp: 1\n",
      "tsmult: 1.5\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0\n",
      "snap_to_NHG: False\n",
      "dxy: 40\n",
      "buffer: 1000\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "features_shapefile: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "parent_model: plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages: dis\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp\n",
      "setting up model grid...\n",
      "\n",
      "arguments to shp2df:\n",
      "dest_crs: epsg:3070\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 552800.0, 388200.0, 557800.0, 393200.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [40.0 ... 40.0]\n",
      "delc: [40.0 ... 40.0]\n",
      "xoff: None\n",
      "yoff: None\n",
      "xul: 554200.0\n",
      "yul: 391800.0\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "top: None\n",
      "botm: None\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp...\n",
      "finished in 0.36s\n",
      "\n",
      "computing cell thicknesses...\n",
      "finished in 0.04s\n",
      "\n",
      "wrote original/plsnt_lgr_parent_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr4.dat, took 0.00s\n",
      "loading ./external/plsnt_lgr_parent_top.dat, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0.0\n",
      "snap_to_NHG: False\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "dxy: 200\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "parent_model: MODFLOW 4 layer(s) 34 row(s) 36 column(s) 13 stress period(s)\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp\n",
      "top: array: (25, 25), float64, min: -9999, mean: -3372.45, max: 369.5\n",
      "botm: array: (5, 25, 25), float64, min: -9999, mean: -3399.84, max: 355.77\n",
      "setting up model grid...\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [200.0 ... 200.0]\n",
      "delc: [200.0 ... 200.0]\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "xul: 552800.0\n",
      "yul: 393200.0\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "top: array: (25, 25), float64, min: -9999, mean: -3372.45, max: 369.5\n",
      "botm: array: (5, 25, 25), float64, min: -9999, mean: -3399.84, max: 355.77\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp...\n",
      "finished in 0.03s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "\n",
      "Setting up TDIS package...\n",
      "\n",
      "arguments to ModflowTdis:\n",
      "time_units: days\n",
      "start_date_time: 2012-01-01\n",
      "nper: 13\n",
      "perioddata: array: (13,), (numpy.record, [('perlen', '<f8'), ('nstp', '<i8'), ('tsmult', '<f8')])\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up IMS package...\n",
      "\n",
      "arguments to ModflowIms:\n",
      "print_option: all\n",
      "complexity: moderate\n",
      "outer_hclose: 0.01\n",
      "outer_rclosebnd: 1.e4\n",
      "outer_maximum: 200\n",
      "under_relaxation: dbd\n",
      "under_relaxation_theta: 0.7\n",
      "under_relaxation_kappa: 0.1\n",
      "under_relaxation_gamma: 0.0\n",
      "under_relaxation_momentum: 0.0\n",
      "backtracking_number: 0\n",
      "inner_maximum: 100\n",
      "inner_hclose: 0.0001\n",
      "rcloserecord: [0.0001, 'relative_rclose']\n",
      "linear_acceleration: bicgstab\n",
      "scaling_method: None\n",
      "reordering_method: None\n",
      "relaxation_factor: 0.0\n",
      "number_orthogonalizations: 0\n",
      "preconditioner_levels: 7\n",
      "preconditioner_drop_tolerance: 0.001\n",
      "finished in 0.01s\n",
      "\n",
      "\n",
      "Setting up IC package...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_strt0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt4.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfic:\n",
      "strt: [{'filename': './external/plsnt_lgr_parent_strt0.dat'} ... {'filename': './external/plsnt_lgr_parent_strt4.dat'}]\n",
      "finished in 0.15s\n",
      "\n",
      "\n",
      "Setting up NPF package...\n",
      "wrote ./external/plsnt_lgr_parent_k0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k330.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k331.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k332.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k333.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k334.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfnpf:\n",
      "save_flows: True\n",
      "icelltype: 1\n",
      "k: [{'filename': './external/plsnt_lgr_parent_k0.dat'} ... {'filename': './external/plsnt_lgr_parent_k4.dat'}]\n",
      "k33: [{'filename': './external/plsnt_lgr_parent_k330.dat'} ... {'filename': './external/plsnt_lgr_parent_k334.dat'}]\n",
      "finished in 0.32s\n",
      "\n",
      "\n",
      "Setting up STO package...\n",
      "wrote ./external/plsnt_lgr_parent_sy0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss4.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfsto:\n",
      "save_flows: True\n",
      "iconvert: 1\n",
      "sy: [{'filename': './external/plsnt_lgr_parent_sy0.dat'} ... {'filename': './external/plsnt_lgr_parent_sy4.dat'}]\n",
      "ss: [{'filename': './external/plsnt_lgr_parent_ss0.dat'} ... {'filename': './external/plsnt_lgr_parent_ss4.dat'}]\n",
      "steady_state: {0: True\n",
      " ...\n",
      "}\n",
      "transient: {0: False\n",
      " ...\n",
      "}\n",
      "finished in 0.32s\n",
      "\n",
      "\n",
      "Setting up RCH package...\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch5.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch6.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch7.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch8.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch9.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch10.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch11.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch12.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfrcha:\n",
      "irch: [{'filename': './external/plsnt_lgr_parent_irch.dat'}]\n",
      "recharge: {0: {'filename': './external/plsnt_lgr_parent_rch0.dat'}\n",
      " ...\n",
      "}\n",
      "print_input: True\n",
      "print_flows: True\n",
      "save_flows: True\n",
      "readasarrays: True\n",
      "finished in 0.07s\n",
      "\n",
      "\n",
      "Setting up OC package...\n",
      "\n",
      "arguments to ModflowGwfoc:\n",
      "budget_filerecord: plsnt_lgr_parent.cbc\n",
      "head_filerecord: plsnt_lgr_parent.hds\n",
      "saverecord: defaultdict(<class 'list'>, {0: [('head', 'last'), ('budget', 'last')]})\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up SFR package...\n",
      "\n",
      "loading NHDPlus v2 hydrography data...\n",
      "for basins:\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDSnapshot/Hydrography/NHDFlowline.shp...\n",
      "filtering on bounding box -89.5911225596923, 43.965959882234365, -89.52843935935044, 44.01121639579922...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlowlineVAA.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlow.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/elevslope.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "load finished in 0.08s\n",
      "\n",
      "Getting routing information from NHDPlus Plusflow table...\n",
      "finished in 0.01s\n",
      "\n",
      "\n",
      "arguments to Lines.to_sfr:\n",
      "\n",
      "SFRmaker version 0.5.0.post16+gbdd3e74\n",
      "\n",
      "Creating sfr dataset...\n",
      "\n",
      "Creating grid class instance from flopy Grid instance...\n",
      "grid class created in 0.04s\n",
      "\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 625\n",
      "nlay: 1\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "model length units: undefined\n",
      "crs: <Projected CRS: EPSG:3070>\n",
      "Name: NAD83 / Wisconsin Transverse Mercator\n",
      "Axis Info [cartesian]:\n",
      "- X[east]: Easting (metre)\n",
      "- Y[north]: Northing (metre)\n",
      "Area of Use:\n",
      "- name: USA - Wisconsin\n",
      "- bounds: (-92.89, 42.48, -86.25, 47.31)\n",
      "Coordinate Operation:\n",
      "- name: Wisconsin Transverse Mercator 83\n",
      "- method: Transverse Mercator\n",
      "Datum: North American Datum 1983\n",
      "- Ellipsoid: GRS 1980\n",
      "- Prime Meridian: Greenwich\n",
      "\n",
      "bounds: 552800.00, 388200.00, 557800.00, 393200.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages: dis ic npf sto rcha oc\n",
      "\n",
      "reprojecting hydrography from\n",
      "EPSG:4269\n",
      "to\n",
      "EPSG:3070\n",
      "\n",
      "\n",
      "Culling hydrography to active area...\n",
      "simplification tolerance: 2000.00\n",
      "starting lines: 2\n",
      "remaining lines: 2\n",
      "finished in 0.01s\n",
      "\n",
      "\n",
      "Intersecting 2 flowlines with 625 grid cells...\n",
      "Intersecting 2 features...\n",
      "2\n",
      "finished in 0.00s\n",
      "\n",
      "Setting up reach data... (may take a few minutes for large grids)\n",
      "finished in 0.00s\n",
      "\n",
      "Computing widths...\n",
      "\n",
      "Dropping 0 reaches with length < 10.00 meters...\n",
      "\n",
      "Repairing routing connections...\n",
      "enforcing best segment numbering...\n",
      "\n",
      "Setting up segment data...\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 625\n",
      "nlay: 1\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "model length units: undefined\n",
      "crs: <Projected CRS: EPSG:3070>\n",
      "Name: NAD83 / Wisconsin Transverse Mercator\n",
      "Axis Info [cartesian]:\n",
      "- X[east]: Easting (metre)\n",
      "- Y[north]: Northing (metre)\n",
      "Area of Use:\n",
      "- name: USA - Wisconsin\n",
      "- bounds: (-92.89, 42.48, -86.25, 47.31)\n",
      "Coordinate Operation:\n",
      "- name: Wisconsin Transverse Mercator 83\n",
      "- method: Transverse Mercator\n",
      "Datum: North American Datum 1983\n",
      "- Ellipsoid: GRS 1980\n",
      "- Prime Meridian: Greenwich\n",
      "\n",
      "bounds: 552800.00, 388200.00, 557800.00, 393200.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "\n",
      "Time to create sfr dataset: 0.24s\n",
      "\n",
      "running rasterstats.zonal_stats on buffered LineStrings...\n",
      "finished in 0.02s\n",
      "\n",
      "\n",
      "Smoothing elevations...\n",
      "finished in 0.00s\n",
      "\n",
      "arguments to SFRData.add_observations:\n",
      "obstype: downstream-flow\n",
      "x_location_column: x\n",
      "y_location_column: y\n",
      "obsname_column: site_no\n",
      "data: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/gages.csv\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_parent_sfr_reach_data.csv\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_parent_sfr_segment_data.csv\n",
      "converting segment data to period data...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_cells.shp...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_outlets.shp...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_lines.shp...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_routing.shp...\n",
      "No period data to export!\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_observations.shp...\n",
      "No non-zero values of flow to export!\n",
      "\n",
      "arguments to ModflowGwfsfr:\n",
      "save_flows: True\n",
      "mover: True\n",
      "converting reach and segment data to package data...\n",
      "converting segment data to period data...\n",
      "computing cell thicknesses...\n",
      "finished in 0.04s\n",
      "\n",
      "wrote original/plsnt_lgr_parent_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr4.dat, took 0.00s\n",
      "loading ./external/plsnt_lgr_parent_top.dat, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0.0\n",
      "snap_to_NHG: False\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "dxy: 200\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "parent_model: MODFLOW 4 layer(s) 34 row(s) 36 column(s) 13 stress period(s)\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp\n",
      "top: array: (25, 25), float64, min: -9999, mean: -3372.45, max: 369.5\n",
      "botm: array: (5, 25, 25), float64, min: -9999, mean: -3399.82, max: 355.77\n",
      "setting up model grid...\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [200.0 ... 200.0]\n",
      "delc: [200.0 ... 200.0]\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "xul: 552800.0\n",
      "yul: 393200.0\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "top: array: (25, 25), float64, min: -9999, mean: -3372.45, max: 369.5\n",
      "botm: array: (5, 25, 25), float64, min: -9999, mean: -3399.82, max: 355.77\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp...\n",
      "finished in 0.03s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "finished in 0.92s\n",
      "\n",
      "\n",
      "Setting up LAK package...\n",
      "wrote original/plsnt_lgr_parent_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr4.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr4.dat, took 0.00s\n",
      "lakes_shapefile not specified, or no lakes in model area\n",
      "\n",
      "Setting up WEL package...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "arguments to ModflowGwfwel:\n",
      "stress_period_data: {0: {'filename': './external/plsnt_lgr_parent_wel_000.dat'}\n",
      " ...\n",
      "}\n",
      "print_input: True\n",
      "print_flows: True\n",
      "save_flows: True\n",
      "boundnames: True\n",
      "finished in 0.12s\n",
      "\n",
      "\n",
      "Setting up OBS package...\n",
      "Reading observation files...\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/nwis_heads_info_file.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/lake_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/wdnr_gw_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/uwsp_heads.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsnme\n",
      "    observation label column: obsnme\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/wgnhs_head_targets.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: common_name\n",
      "    observation label column: common_name\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "\n",
      "Culling observations to model area...\n",
      "Dropping head observations that coincide with Lake Package Lakes...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "Dropping head observations specified in /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr_parent.yml...\n",
      "\n",
      "arguments to ModflowUtlobs:\n",
      "digits: 10\n",
      "print_input: True\n",
      "continuous: {'plsnt_lgr_parent.head.obs': rec.array([('10051240_lk', 'HEAD', (4, 22, 20)), ...,\n",
      "           ('ys864', 'HEAD', (4, 5, 3))],\n",
      "          dtype=[('obsname', 'O'), ('obstype', 'O'), ('id', 'O')])}\n",
      "finished in 0.05s\n",
      "\n",
      "setting up specified head perimeter boundary with CHD package...\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "xoff: 552200.0\n",
      "yoff: 387000.0\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "delr: array: (36,), float32, min: 200, mean: 200, max: 200\n",
      "delc: array: (34,), float32, min: 200, mean: 200, max: 200\n",
      "top: array: (34, 36), float32, min: 283.24, mean: 319.565, max: 389.51\n",
      "botm: array: (4, 34, 36), float32, min: 187.31, mean: 271.826, max: 388.41\n",
      "lenuni: 2\n",
      "\n",
      "arguments to ModflowGwfchd:\n",
      "stress_period_data: {0: {'filename': './external/plsnt_lgr_parent_chd_000.dat'}\n",
      " ...\n",
      "}\n",
      "print_input: False\n",
      "print_flows: False\n",
      "save_flows: True\n",
      "finished in 2.06s\n",
      "\n",
      "\n",
      "Setting up DIS package...\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "length_units: meters\n",
      "filenames: {0: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif'}\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "datatype: array2d\n",
      "variable: top\n",
      "dest_model: plsnt_lgr_inset model:\n",
      "5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
      "Parent model: ./plsnt_lgr_parent\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
      "Grid spacing: 40.00 meters\n",
      "Packages:\n",
      "vmin: -1e+30\n",
      "vmax: 1e+30\n",
      "resample_method: linear\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif...\n",
      "finished in 0.07s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "filenames: {1: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif\n",
      " ...\n",
      "}\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "datatype: array3d\n",
      "variable: botm\n",
      "dest_model: plsnt_lgr_inset model:\n",
      "5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
      "Parent model: ./plsnt_lgr_parent\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
      "Grid spacing: 40.00 meters\n",
      "Packages:\n",
      "vmin: -1e+30\n",
      "vmax: 1e+30\n",
      "resample_method: linear\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif...\n",
      "finished in 0.18s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif...\n",
      "finished in 0.18s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif...\n",
      "finished in 0.18s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif...\n",
      "finished in 0.18s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.08s\n",
      "\n",
      "arguments to shp2df:\n",
      "dest_crs: EPSG:3070\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 554200.0, 389000.0, 557400.0, 391800.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "caching data in /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.09s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.08s\n",
      "loading ./external/plsnt_lgr_inset_top.dat, shape=(70, 80), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.30s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfdis:\n",
      "nrow: 70\n",
      "ncol: 80\n",
      "nlay: 5\n",
      "delr: [40.0 ... 40.0]\n",
      "delc: [40.0 ... 40.0]\n",
      "angrot: 0.0\n",
      "top: [{'filename': './external/plsnt_lgr_inset_top.dat'}]\n",
      "botm: [{'filename': './external/plsnt_lgr_inset_botm0.dat'} ... {'filename': './external/plsnt_lgr_inset_botm4.dat'}]\n",
      "idomain: [{'filename': './external/plsnt_lgr_inset_idomain0.dat'} ... {'filename': './external/plsnt_lgr_inset_idomain4.dat'}]\n",
      "xorigin: None\n",
      "yorigin: None\n",
      "length_units: meters\n",
      "computing cell thicknesses...\n",
      "finished in 0.21s\n",
      "\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.08s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.08s\n",
      "wrote original/plsnt_lgr_inset_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr4.dat, took 0.00s\n",
      "loading ./external/plsnt_lgr_inset_top.dat, shape=(70, 80), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.15s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0\n",
      "snap_to_NHG: False\n",
      "dxy: 40\n",
      "buffer: 1000\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "features_shapefile: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "parent_model: plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages: dis ic npf sto rcha oc sfr_0 wel_0 obs_0 chd_0\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp\n",
      "top: array: (70, 80), float64, min: 290.66, mean: 313.367, max: 348.61\n",
      "botm: array: (5, 70, 80), float64, min: 191.27, mean: 276.219, max: 338.81\n",
      "setting up model grid...\n",
      "\n",
      "arguments to shp2df:\n",
      "dest_crs: epsg:3070\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 552800.0, 388200.0, 557800.0, 393200.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [40.0 ... 40.0]\n",
      "delc: [40.0 ... 40.0]\n",
      "xoff: None\n",
      "yoff: None\n",
      "xul: 554200.0\n",
      "yul: 391800.0\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "top: array: (70, 80), float64, min: 290.66, mean: 313.367, max: 348.61\n",
      "botm: array: (5, 70, 80), float64, min: 191.27, mean: 276.219, max: 338.81\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp...\n",
      "finished in 0.36s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_irch.dat, took 0.00s\n",
      "finished in 2.72s\n",
      "\n",
      "\n",
      "Setting up IC package...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_strt0.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_strt1.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_strt2.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_strt3.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_strt4.dat, took 0.01s\n",
      "\n",
      "arguments to ModflowGwfic:\n",
      "strt: [{'filename': './external/plsnt_lgr_inset_strt0.dat'} ... {'filename': './external/plsnt_lgr_inset_strt4.dat'}]\n",
      "finished in 0.11s\n",
      "\n",
      "\n",
      "Setting up NPF package...\n",
      "wrote ./external/plsnt_lgr_inset_k0.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k1.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k2.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k3.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k4.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k330.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k331.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k332.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k333.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k334.dat, took 0.01s\n",
      "\n",
      "arguments to ModflowGwfnpf:\n",
      "save_flows: True\n",
      "icelltype: 1\n",
      "k: [{'filename': './external/plsnt_lgr_inset_k0.dat'} ... {'filename': './external/plsnt_lgr_inset_k4.dat'}]\n",
      "k33: [{'filename': './external/plsnt_lgr_inset_k330.dat'} ... {'filename': './external/plsnt_lgr_inset_k334.dat'}]\n",
      "finished in 0.27s\n",
      "\n",
      "\n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: 1\n",
      "steady: True\n",
      "oc_saverecord: {0: ['save head last', 'save budget last']}\n",
      "nstp: 1\n",
      "tsmult: 1\n",
      "\n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: None\n",
      "steady: False\n",
      "oc_saverecord: {0: ['save head last', 'save budget last']}\n",
      "end_date_time: 2012-12-31\n",
      "freq: 1MS\n",
      "nstp: 1\n",
      "tsmult: 1.5\n",
      "\n",
      "Setting up STO package...\n",
      "wrote ./external/plsnt_lgr_inset_sy0.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_sy1.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_sy2.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_sy3.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_sy4.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_ss0.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_ss1.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_ss2.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_ss3.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_ss4.dat, took 0.01s\n",
      "\n",
      "arguments to ModflowGwfsto:\n",
      "save_flows: True\n",
      "iconvert: 1\n",
      "sy: [{'filename': './external/plsnt_lgr_inset_sy0.dat'} ... {'filename': './external/plsnt_lgr_inset_sy4.dat'}]\n",
      "ss: [{'filename': './external/plsnt_lgr_inset_ss0.dat'} ... {'filename': './external/plsnt_lgr_inset_ss4.dat'}]\n",
      "steady_state: {0: True\n",
      " ...\n",
      "}\n",
      "transient: {0: False\n",
      " ...\n",
      "}\n",
      "finished in 0.26s\n",
      "\n",
      "\n",
      "Setting up RCH package...\n",
      "wrote ./external/plsnt_lgr_inset_irch.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch5.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch6.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch7.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch8.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch9.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch10.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch11.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch12.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfrcha:\n",
      "irch: [{'filename': './external/plsnt_lgr_inset_irch.dat'}]\n",
      "recharge: {0: {'filename': './external/plsnt_lgr_inset_rch0.dat'}\n",
      " ...\n",
      "}\n",
      "print_input: True\n",
      "print_flows: True\n",
      "save_flows: True\n",
      "readasarrays: True\n",
      "finished in 0.13s\n",
      "\n",
      "\n",
      "Setting up OC package...\n",
      "\n",
      "arguments to ModflowGwfoc:\n",
      "budget_filerecord: plsnt_lgr_inset.cbc\n",
      "head_filerecord: plsnt_lgr_inset.hds\n",
      "saverecord: defaultdict(<class 'list'>, {0: [('head', 'last'), ('budget', 'last')]})\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up SFR package...\n",
      "\n",
      "loading NHDPlus v2 hydrography data...\n",
      "for basins:\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDSnapshot/Hydrography/NHDFlowline.shp...\n",
      "filtering on bounding box -89.57361941749177, 43.97318294263003, -89.53352803700078, 43.99854796302356...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlowlineVAA.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlow.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/elevslope.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "load finished in 0.08s\n",
      "\n",
      "Getting routing information from NHDPlus Plusflow table...\n",
      "finished in 0.01s\n",
      "\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.08s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.08s\n",
      "\n",
      "arguments to Lines.to_sfr:\n",
      "\n",
      "SFRmaker version 0.5.0.post16+gbdd3e74\n",
      "\n",
      "Creating sfr dataset...\n",
      "\n",
      "Creating grid class instance from flopy Grid instance...\n",
      "grid class created in 0.15s\n",
      "\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 5,600\n",
      "nlay: 1\n",
      "nrow: 70\n",
      "ncol: 80\n",
      "model length units: undefined\n",
      "crs: <Projected CRS: EPSG:3070>\n",
      "Name: NAD83 / Wisconsin Transverse Mercator\n",
      "Axis Info [cartesian]:\n",
      "- X[east]: Easting (metre)\n",
      "- Y[north]: Northing (metre)\n",
      "Area of Use:\n",
      "- name: USA - Wisconsin\n",
      "- bounds: (-92.89, 42.48, -86.25, 47.31)\n",
      "Coordinate Operation:\n",
      "- name: Wisconsin Transverse Mercator 83\n",
      "- method: Transverse Mercator\n",
      "Datum: North American Datum 1983\n",
      "- Ellipsoid: GRS 1980\n",
      "- Prime Meridian: Greenwich\n",
      "\n",
      "bounds: 554200.00, 389000.00, 557400.00, 391800.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "plsnt_lgr_inset model:\n",
      "5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
      "Parent model: ./plsnt_lgr_parent\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
      "Grid spacing: 40.00 meters\n",
      "Packages: dis ic npf sto rcha oc\n",
      "\n",
      "reprojecting hydrography from\n",
      "EPSG:4269\n",
      "to\n",
      "EPSG:3070\n",
      "\n",
      "\n",
      "Culling hydrography to active area...\n",
      "simplification tolerance: 2000.00\n",
      "starting lines: 2\n",
      "remaining lines: 2\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Intersecting 2 flowlines with 5,600 grid cells...\n",
      "Intersecting 2 features...\n",
      "2\n",
      "finished in 0.02s\n",
      "\n",
      "Setting up reach data... (may take a few minutes for large grids)\n",
      "finished in 0.01s\n",
      "\n",
      "Computing widths...\n",
      "\n",
      "Dropping 1 reaches with length < 2.00 meters...\n",
      "\n",
      "Repairing routing connections...\n",
      "enforcing best segment numbering...\n",
      "\n",
      "Setting up segment data...\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 5,600\n",
      "nlay: 1\n",
      "nrow: 70\n",
      "ncol: 80\n",
      "model length units: undefined\n",
      "crs: <Projected CRS: EPSG:3070>\n",
      "Name: NAD83 / Wisconsin Transverse Mercator\n",
      "Axis Info [cartesian]:\n",
      "- X[east]: Easting (metre)\n",
      "- Y[north]: Northing (metre)\n",
      "Area of Use:\n",
      "- name: USA - Wisconsin\n",
      "- bounds: (-92.89, 42.48, -86.25, 47.31)\n",
      "Coordinate Operation:\n",
      "- name: Wisconsin Transverse Mercator 83\n",
      "- method: Transverse Mercator\n",
      "Datum: North American Datum 1983\n",
      "- Ellipsoid: GRS 1980\n",
      "- Prime Meridian: Greenwich\n",
      "\n",
      "bounds: 554200.00, 389000.00, 557400.00, 391800.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "\n",
      "Time to create sfr dataset: 0.40s\n",
      "\n",
      "running rasterstats.zonal_stats on buffered LineStrings...\n",
      "finished in 0.05s\n",
      "\n",
      "\n",
      "Smoothing elevations...\n",
      "finished in 0.00s\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_inset_sfr_reach_data.csv\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_inset_sfr_segment_data.csv\n",
      "converting segment data to period data...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_cells.shp...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_outlets.shp...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_lines.shp...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_routing.shp...\n",
      "No period data to export!\n",
      "No observations to export!\n",
      "No non-zero values of flow to export!\n",
      "\n",
      "arguments to ModflowGwfsfr:\n",
      "save_flows: True\n",
      "mover: True\n",
      "converting reach and segment data to package data...\n",
      "converting segment data to period data...\n",
      "computing cell thicknesses...\n",
      "finished in 0.33s\n",
      "\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.08s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.08s\n",
      "wrote original/plsnt_lgr_inset_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr4.dat, took 0.00s\n",
      "loading ./external/plsnt_lgr_inset_top.dat, shape=(70, 80), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.15s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0\n",
      "snap_to_NHG: False\n",
      "dxy: 40\n",
      "buffer: 1000\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "features_shapefile: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "parent_model: plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages: dis ic npf sto rcha oc sfr_0 wel_0 obs_0 chd_0\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp\n",
      "top: array: (70, 80), float64, min: 290.66, mean: 313.367, max: 348.61\n",
      "botm: array: (5, 70, 80), float64, min: 191.27, mean: 276.413, max: 338.81\n",
      "setting up model grid...\n",
      "\n",
      "arguments to shp2df:\n",
      "dest_crs: epsg:3070\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 552800.0, 388200.0, 557800.0, 393200.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [40.0 ... 40.0]\n",
      "delc: [40.0 ... 40.0]\n",
      "xoff: None\n",
      "yoff: None\n",
      "xul: 554200.0\n",
      "yul: 391800.0\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "top: array: (70, 80), float64, min: 290.66, mean: 313.367, max: 348.61\n",
      "botm: array: (5, 70, 80), float64, min: 191.27, mean: 276.413, max: 338.81\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp...\n",
      "finished in 0.35s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_irch.dat, took 0.00s\n",
      "finished in 2.31s\n",
      "\n",
      "\n",
      "Setting up LAK package...\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.08s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.08s\n",
      "wrote original/plsnt_lgr_inset_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr4.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr4.dat, took 0.00s\n",
      "setting up lakebed leakance zones...\n",
      "finished in 0.01s\n",
      "wrote original/plsnt_lgr_inset_lakzones.dat, took 0.00s\n",
      "setting up tabfiles...\n",
      "\n",
      "arguments to TabularSourceData:\n",
      "length_units: meters\n",
      "id_column: hydroid\n",
      "column_mappings: {'volume_m3': 'volume'}\n",
      "filenames: {0: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/area_stage_vol_Pleasant.csv'}\n",
      "\n",
      "arguments to TabularSourceData:\n",
      "wrote ./external/600059060_stage_area_volume.dat\n",
      "\n",
      "arguments to PrismSourceData:\n",
      "filenames: {600059060: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/PRISM_ppt_tmean_stable_4km_189501_201901_43.9850_-89.5522.csv'}\n",
      "period_stats: {0: ['mean', '2012-01-01', '2018-12-31']\n",
      " ...\n",
      "}\n",
      "\n",
      "arguments to PrismSourceData:\n",
      "dest_model: plsnt_lgr_inset model:\n",
      "5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
      "Parent model: ./plsnt_lgr_parent\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
      "Grid spacing: 40.00 meters\n",
      "Packages: dis ic npf sto rcha oc sfr_0\n",
      "\n",
      "arguments to ModflowGwflak:\n",
      "connectiondata: [[0, 0, (3, 36, 53), 'vertical', 0.025, 0.0, 0.0, 0.0, 0.0] ... [0, 750, (4, 32, 38), 'horizontal', 0.025, 195.25, 280.67, 40.0, 40.0]]\n",
      "save_flows: True\n",
      "boundnames: True\n",
      "surfdep: 0.1\n",
      "time_conversion: 86400.0\n",
      "length_conversion: 1.0\n",
      "nlakes: 1\n",
      "noutlets: 0\n",
      "packagedata: [[0, 298.38, 751, 'lake1']]\n",
      "ntables: 1\n",
      "tables: [(0, './external/600059060_stage_area_volume.dat', 'junk', 'junk')]\n",
      "outlets: None\n",
      "perioddata: {0: [[0, 'runoff', 0.0], [0, 'evaporation', 0.0006298262025336206], [0, 'withdrawal', 0.0], [0, 'rainfall', 0.0026829936043197404]]\n",
      " ...\n",
      "}\n",
      "observations: {lake1.obs.csv: [('stage', 'stage', 'lake1'), ('inflow', 'inflow', 'lake1'), ('rainfall', 'rainfall', 'lake1'), ('runoff', 'runoff', 'lake1'), ('lak', 'lak', 'lake1'), ('withdrawal', 'withdrawal', 'lake1'), ('evaporation', 'evaporation', 'lake1'), ('storage', 'storage', 'lake1'), ('volume', 'volume', 'lake1'), ('surface-area', 'surface-area', 'lake1'), ('wetted-area', 'wetted-area', 'lake1'), ('conductance', 'conductance', 'lake1')]\n",
      " ...\n",
      "}\n",
      "finished in 0.55s\n",
      "\n",
      "\n",
      "Setting up WEL package...\n",
      "\n",
      "arguments to shp2df:\n",
      "dest_crs: EPSG:3070\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/csls_sources_wu_pts.shp...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "intersecting wells with model grid...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "took 0.00s\n",
      "\n",
      "computing cell thicknesses...\n",
      "finished in 0.20s\n",
      "\n",
      "\n",
      "arguments to shp2df:\n",
      "dest_crs: EPSG:3070\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/csls_sources_wu_pts.shp...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "intersecting wells with model grid...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "took 0.00s\n",
      "\n",
      "computing cell thicknesses...\n",
      "finished in 0.20s\n",
      "\n",
      "\n",
      "Resampling pumping rates in /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/master_wu.csv to model stress periods...\n",
      "    wells with no data for a stress period will be assigned 0.0 pumping rates.\n",
      "took 0.01s\n",
      "\n",
      "\n",
      "arguments to ModflowGwfwel:\n",
      "stress_period_data: {0: {'filename': './external/plsnt_lgr_inset_wel_000.dat'}\n",
      " ...\n",
      "}\n",
      "print_input: True\n",
      "print_flows: True\n",
      "save_flows: True\n",
      "boundnames: True\n",
      "finished in 0.66s\n",
      "\n",
      "\n",
      "Setting up OBS package...\n",
      "Reading observation files...\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/nwis_heads_info_file.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/lake_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/wdnr_gw_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/uwsp_heads.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsnme\n",
      "    observation label column: obsnme\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/wgnhs_head_targets.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: common_name\n",
      "    observation label column: common_name\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "\n",
      "Culling observations to model area...\n",
      "Dropping head observations that coincide with Lake Package Lakes...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "Dropping head observations specified in /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "\n",
      "arguments to ModflowUtlobs:\n",
      "digits: 10\n",
      "print_input: True\n",
      "continuous: {'plsnt_lgr_inset.head.obs': rec.array([('00400037_uwsp', 'HEAD', (0, 5, 6)), ...,\n",
      "           ('yq987', 'HEAD', (4, 28, 41))],\n",
      "          dtype=[('obsname', 'O'), ('obstype', 'O'), ('id', 'O')])}\n",
      "finished in 0.05s\n",
      "\n",
      "\n",
      "Setting up the simulation water mover package...\n",
      "\n",
      "arguments to ModflowGwfmvr:\n",
      "print_flows: True\n",
      "modelnames: True\n",
      "maxmvr: 2\n",
      "maxpackages: 2\n",
      "packages: [('plsnt_lgr_inset', 'sfr_0'), ('plsnt_lgr_parent', 'sfr_0')]\n",
      "perioddata: {0: [['plsnt_lgr_inset', 'sfr_0', 22, 'plsnt_lgr_parent', 'sfr_0', 7, 'factor', 1.0], ['plsnt_lgr_inset', 'sfr_0', 24, 'plsnt_lgr_parent', 'sfr_0', 0, 'factor', 1.0]]}\n",
      "finished in 0.01s\n",
      "\n",
      "\n",
      "arguments to ModflowGwfgwf:\n",
      "exgtype: gwf6-gwf6\n",
      "exgmnamea: plsnt_lgr_parent\n",
      "exgmnameb: plsnt_lgr_inset\n",
      "nexg: 1298\n",
      "auxiliary: [('angldegx', 'cdist')]\n",
      "exchangedata: [[(0, 7, 6), (0, 0, 0), 1, 100.0, 20.0, 40.0, 0.0, 144.22205101855957] ... [(4, 21, 22), (4, 69, 79), 1, 100.0, 20.0, 40.0, 90.0, 144.22205101855957]]\n",
      "mvr_filerecord: pleasant_lgr.mvr\n",
      "finished setting up model in 13.54s\n",
      "\n",
      "plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages: dis ic npf sto rcha oc sfr_0 wel_0 obs_0 chd_0\n"
     ]
    }
   ],
   "source": [
    "m = MF6model.setup_from_yaml('pleasant_lgr_parent.yml')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:56:55.941369Z",
     "iopub.status.busy": "2020-09-16T16:56:55.940988Z",
     "iopub.status.idle": "2020-09-16T16:56:55.945565Z",
     "shell.execute_reply": "2020-09-16T16:56:55.946059Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "plsnt_lgr_parent model:\n",
       "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
       "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
       "CRS: epsg:3070\n",
       "(epsg: 3070)\n",
       "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
       "Grid spacing: 200.00 meters\n",
       "Packages: dis ic npf sto rcha oc sfr_0 wel_0 obs_0 chd_0"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:56:55.949244Z",
     "iopub.status.busy": "2020-09-16T16:56:55.948864Z",
     "iopub.status.idle": "2020-09-16T16:56:55.953219Z",
     "shell.execute_reply": "2020-09-16T16:56:55.953620Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['start_version', 'simulation', 'model', 'parent', 'intermediate_data', 'postprocessing', 'setup_grid', 'dis', 'tdis', 'ic', 'npf', 'sto', 'rch', 'sfr', 'high_k_lakes', 'lak', 'mvr', 'riv', 'wel', 'chd', 'oc', 'obs', 'ims', 'filename', 'ghb', 'maw', 'external_files', 'grid', 'perimeter_boundary'])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.cfg.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:56:55.957427Z",
     "iopub.status.busy": "2020-09-16T16:56:55.957046Z",
     "iopub.status.idle": "2020-09-16T16:56:55.961398Z",
     "shell.execute_reply": "2020-09-16T16:56:55.961784Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "defaultdict(dict,\n",
       "            {'options': {'length_units': 'meters'},\n",
       "             'dimensions': {'nlay': 5},\n",
       "             'griddata': {'top': [{'filename': './external/plsnt_lgr_parent_top.dat'}],\n",
       "              'botm': [{'filename': './external/plsnt_lgr_parent_botm0.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm1.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm2.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm3.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm4.dat'}],\n",
       "              'idomain': [{'filename': './external/plsnt_lgr_parent_idomain0.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain1.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain2.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain3.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain4.dat'}]},\n",
       "             'top_filename_fmt': 'top.dat',\n",
       "             'botm_filename_fmt': 'botm{:d}.dat',\n",
       "             'idomain_filename_fmt': 'idomain{:d}.dat',\n",
       "             'minimum_layer_thickness': 1,\n",
       "             'drop_thin_cells': True,\n",
       "             'remake_top': True,\n",
       "             'source_data': {'top': {'filename': '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif',\n",
       "               'elevation_units': 'meters'},\n",
       "              'botm': {'filenames': {1: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif',\n",
       "                2: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif',\n",
       "                3: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif',\n",
       "                4: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif'}}},\n",
       "             'nlay': 4})"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.cfg['dis']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:56:55.964987Z",
     "iopub.status.busy": "2020-09-16T16:56:55.964597Z",
     "iopub.status.idle": "2020-09-16T16:56:55.969287Z",
     "shell.execute_reply": "2020-09-16T16:56:55.968864Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'plsnt_lgr_inset': plsnt_lgr_inset model:\n",
       " 5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
       " Parent model: ./plsnt_lgr_parent\n",
       " CRS: epsg:3070\n",
       " (epsg: 3070)\n",
       " Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
       " Grid spacing: 40.00 meters\n",
       " Packages: dis ic npf sto rcha oc sfr_0 lak_0 obs_0 wel_0 obs_1}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.inset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:56:55.992013Z",
     "iopub.status.busy": "2020-09-16T16:56:55.985861Z",
     "iopub.status.idle": "2020-09-16T16:56:56.233250Z",
     "shell.execute_reply": "2020-09-16T16:56:56.232231Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7f6b38e887c0>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "inset = m.inset['plsnt_lgr_inset']\n",
    "\n",
    "l, r, b, t = m.modelgrid.extent\n",
    "layer = 0\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 10))\n",
    "parent_mv = flopy.plot.PlotMapView(model=m, ax=ax, layer=layer)\n",
    "inset_mv = flopy.plot.PlotMapView(model=inset, ax=ax, layer=layer)\n",
    "\n",
    "vconn = inset.lak.connectiondata.array[inset.lak.connectiondata.array['claktype'] == 'vertical']\n",
    "k, i, j = cellids_to_kij(vconn['cellid'])\n",
    "lakeconnections = np.zeros((inset.nrow, inset.ncol))\n",
    "lakeconnections[i, j] = np.array(k)\n",
    "lakeconnections = np.ma.masked_array(lakeconnections, mask=lakeconnections == 0)\n",
    "qmi = inset_mv.plot_array(lakeconnections)\n",
    "\n",
    "#inset_mv.plot_bc('LAK', color='navy')\n",
    "#parent_mv.plot_bc('WEL_0', color='red')\n",
    "\n",
    "lcp = parent_mv.plot_grid(lw=0.5, ax=ax)\n",
    "lci = inset_mv.plot_grid(lw=0.5)\n",
    "ax.set_ylim(b, t)\n",
    "ax.set_xlim(l, r)\n",
    "ax.set_aspect(1)\n",
    "plt.colorbar(qmi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:56:56.236747Z",
     "iopub.status.busy": "2020-09-16T16:56:56.236338Z",
     "iopub.status.idle": "2020-09-16T16:56:56.626430Z",
     "shell.execute_reply": "2020-09-16T16:56:56.626782Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing simulation...\n",
      "  writing simulation name file...\n",
      "  writing simulation tdis package...\n",
      "  writing ims package ims_-1...\n",
      "  writing mvr package pleasant_lgr.mvr...\n",
      "  writing package pleasant_lgr.gwfgwf...\n",
      "  writing model plsnt_lgr_parent...\n",
      "    writing model name file...\n",
      "    writing package dis...\n",
      "    writing package ic...\n",
      "    writing package npf...\n",
      "    writing package sto...\n",
      "    writing package rcha...\n",
      "    writing package oc...\n",
      "    writing package sfr_0...\n",
      "    writing package wel_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'wel', 'dimensions') changed to 2 based on size of stress_period_data\n",
      "    writing package obs_0...\n",
      "    writing package chd_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'chd', 'dimensions') changed to 236 based on size of stress_period_data\n",
      "  writing model plsnt_lgr_inset...\n",
      "    writing model name file...\n",
      "    writing package dis...\n",
      "    writing package ic...\n",
      "    writing package npf...\n",
      "    writing package sto...\n",
      "    writing package rcha...\n",
      "    writing package oc...\n",
      "    writing package sfr_0...\n",
      "    writing package lak_0...\n",
      "    writing package obs_0...\n",
      "    writing package wel_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'wel', 'dimensions') changed to 2 based on size of stress_period_data\n",
      "    writing package obs_1...\n",
      "SFRmaker v. 0.5.0.post16+gbdd3e74\n",
      "\n",
      "Running Flopy v. 3.3.2 diagnostics...\n",
      "passed.\n",
      "\n",
      "Checking for continuity in segment and reach numbering...\n",
      "passed.\n",
      "\n",
      "Checking for increasing segment numbers in downstream direction...\n",
      "passed.\n",
      "\n",
      "Checking for circular routing...\n",
      "passed.\n",
      "\n",
      "No DIS package or SpatialReference object; cannot check reach proximities.\n",
      "\n",
      "Checking for model cells with multiple non-zero SFR conductances...\n",
      "passed.\n",
      "\n",
      "Checking for streambed tops of less than -10...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking for streambed tops of greater than 15000...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking segment_data for downstream rises in streambed elevation...\n",
      "Segment elevup and elevdn not specified for nstrm=-10 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking reach_data for downstream rises in streambed elevation...\n",
      "2 reaches encountered with strtop < strtop of downstream reach.\n",
      "Elevation rises:\n",
      "k i j iseg ireach strtop strtopdn d_strtop reachID diff\n",
      "4 21 17 2 1 290.3638610839844 294.76507568359375 4.401214599609375 4 -4.401214599609375\n",
      "4 21 18 2 2 290.3638610839844 293.5867614746094 3.222900390625 5 -3.222900390625\n",
      "\n",
      "\n",
      "Checking reach_data for inconsistencies between streambed elevations and the model grid...\n",
      "passed.\n",
      "\n",
      "Checking segment_data for inconsistencies between segment end elevations and the model grid...\n",
      "Segment elevup and elevdn not specified for nstrm=-10 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of less than 0.0001...\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of greater than 1.0...\n",
      "passed.\n",
      "\n",
      "wrote plsnt_lgr_parent_SFR.chk\n",
      "wrote plsnt_lgr_parent.sfr.obs\n",
      "converting reach and segment data to package data...\n",
      "wrote ./external/plsnt_lgr_parent_packagedata.dat\n",
      "wrote ./plsnt_lgr_parent.sfr\n"
     ]
    }
   ],
   "source": [
    "m.write_input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:56:56.634635Z",
     "iopub.status.busy": "2020-09-16T16:56:56.634144Z",
     "iopub.status.idle": "2020-09-16T16:57:01.029218Z",
     "shell.execute_reply": "2020-09-16T16:57:01.029630Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FloPy is using the following  executable to run the model: /home/travis/build/aleaf/modflow-setup/bin/linux/mf6\n",
      "                                   MODFLOW 6\n",
      "                U.S. GEOLOGICAL SURVEY MODULAR HYDROLOGIC MODEL\n",
      "                            VERSION 6.1.0 12/12/2019\n",
      "\n",
      "   MODFLOW 6 compiled Dec 13 2019 11:34:14 with IFORT compiler (ver. 18.0.3)\n",
      "\n",
      "This software has been approved for release by the U.S. Geological \n",
      "Survey (USGS). Although the software has been subjected to rigorous \n",
      "review, the USGS reserves the right to update the software as needed \n",
      "pursuant to further analysis and review. No warranty, expressed or \n",
      "implied, is made by the USGS or the U.S. Government as to the \n",
      "functionality of the software and related material nor shall the \n",
      "fact of release constitute any such warranty. Furthermore, the \n",
      "software is released on condition that neither the USGS nor the U.S. \n",
      "Government shall be held liable for any damages resulting from its \n",
      "authorized or unauthorized use. Also refer to the USGS Water \n",
      "Resources Software User Rights Notice for complete use, copyright, \n",
      "and distribution information.\n",
      "\n",
      " Run start date and time (yyyy/mm/dd hh:mm:ss): 2020/09/16 16:56:56\n",
      "\n",
      " Writing simulation list file: mfsim.lst\n",
      " Using Simulation name file: mfsim.nam\n",
      " Solving:  Stress period:     1    Time step:     1\n",
      " Solving:  Stress period:     2    Time step:     1\n",
      " Solving:  Stress period:     3    Time step:     1\n",
      " Solving:  Stress period:     4    Time step:     1\n",
      " Solving:  Stress period:     5    Time step:     1\n",
      " Solving:  Stress period:     6    Time step:     1\n",
      " Solving:  Stress period:     7    Time step:     1\n",
      " Solving:  Stress period:     8    Time step:     1\n",
      " Solving:  Stress period:     9    Time step:     1\n",
      " Solving:  Stress period:    10    Time step:     1\n",
      " Solving:  Stress period:    11    Time step:     1\n",
      " Solving:  Stress period:    12    Time step:     1\n",
      " Solving:  Stress period:    13    Time step:     1\n",
      " Run end date and time (yyyy/mm/dd hh:mm:ss): 2020/09/16 16:57:00\n",
      " Elapsed run time:  4.265 Seconds\n",
      "\n",
      " Normal termination of simulation.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(True, [])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.simulation.run_simulation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:57:01.034254Z",
     "iopub.status.busy": "2020-09-16T16:57:01.033839Z",
     "iopub.status.idle": "2020-09-16T16:57:01.036244Z",
     "shell.execute_reply": "2020-09-16T16:57:01.036637Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:57:01.041210Z",
     "iopub.status.busy": "2020-09-16T16:57:01.040522Z",
     "iopub.status.idle": "2020-09-16T16:57:01.052894Z",
     "shell.execute_reply": "2020-09-16T16:57:01.052432Z"
    }
   },
   "outputs": [],
   "source": [
    "tmr_parent_headsobj = bf.HeadFile('../data/pleasant/pleasant.hds')\n",
    "lgr_parent_headsobj = bf.HeadFile('plsnt_lgr_parent.hds')\n",
    "lgr_inset_headsobj = bf.HeadFile('plsnt_lgr_inset.hds')\n",
    "\n",
    "tmr_parent_hds = tmr_parent_headsobj.get_data(kstpkper=(4, 12))\n",
    "lgr_parent_hds = lgr_parent_headsobj.get_data(kstpkper=(0, 12))\n",
    "lgr_inset_hds = lgr_inset_headsobj.get_data(kstpkper=(0, 12))\n",
    "\n",
    "lgr_parent_hds = np.ma.masked_array(lgr_parent_hds, mask=lgr_parent_hds == 1e30)\n",
    "lgr_inset_hds = np.ma.masked_array(lgr_inset_hds, mask=lgr_inset_hds == 1e30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:57:01.071145Z",
     "iopub.status.busy": "2020-09-16T16:57:01.069707Z",
     "iopub.status.idle": "2020-09-16T16:57:01.397926Z",
     "shell.execute_reply": "2020-09-16T16:57:01.397431Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "layer = 0\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 10))\n",
    "parent_mv = flopy.plot.PlotMapView(model=m, ax=ax, layer=layer)\n",
    "inset_mv = flopy.plot.PlotMapView(model=inset, ax=ax, layer=layer)\n",
    "\n",
    "pctr = parent_mv.contour_array(lgr_parent_hds, levels=np.arange(290, 315))\n",
    "ictr = inset_mv.contour_array(lgr_inset_hds, levels=np.arange(290, 315))\n",
    "#qmp = parent_mv.plot_array(lgr_parent_hds)\n",
    "#qmi = inset_mv.plot_array(lgr_inset_hds)\n",
    "\n",
    "lcp = parent_mv.plot_grid(lw=0.5, ax=ax)\n",
    "lci = inset_mv.plot_grid(lw=0.5)\n",
    "ax.set_ylim(b, t)\n",
    "ax.set_xlim(l, r)\n",
    "ax.set_aspect(1)\n",
    "#plt.colorbar(qmp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:57:01.402969Z",
     "iopub.status.busy": "2020-09-16T16:57:01.402200Z",
     "iopub.status.idle": "2020-09-16T16:57:38.739473Z",
     "shell.execute_reply": "2020-09-16T16:57:38.739098Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "creating postproc/plsnt_lgr_parent/pdfs...\n",
      "creating postproc/plsnt_lgr_parent/shps...\n",
      "creating postproc/plsnt_lgr_parent/rasters...\n",
      "\n",
      "dis package...\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay4.tif\n",
      "top:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/top.tif\n",
      "botm:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay4.tif\n",
      "idomain:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay4.tif\n",
      "\n",
      "ic package...\n",
      "strt:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay4.tif\n",
      "\n",
      "npf package...\n",
      "icelltype:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay4.tif\n",
      "k:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay4.tif\n",
      "k33:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay4.tif\n",
      "\n",
      "sto package...\n",
      "iconvert:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay4.tif\n",
      "ss:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay4.tif\n",
      "sy:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay4.tif\n",
      "\n",
      "rcha package...\n",
      "irch:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per4.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per5.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per6.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per7.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per8.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per9.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per10.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per11.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per12.tif\n",
      "recharge:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per4.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per5.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per6.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per7.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per8.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per9.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per10.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per11.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per12.tif\n",
      "\n",
      "sfr_0 package...\n",
      "\n",
      "wel_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/wel0_stress_period_data.shp...\n",
      "q:\n",
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/obs0_stress_period_data.shp...\n",
      "\n",
      "chd_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/chd0_stress_period_data.shp...\n",
      "head:\n",
      "creating postproc/plsnt_lgr_inset/pdfs...\n",
      "creating postproc/plsnt_lgr_inset/shps...\n",
      "creating postproc/plsnt_lgr_inset/rasters...\n",
      "\n",
      "dis package...\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay4.tif\n",
      "top:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/top.tif\n",
      "botm:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay4.tif\n",
      "idomain:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay4.tif\n",
      "\n",
      "ic package...\n",
      "strt:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay4.tif\n",
      "\n",
      "npf package...\n",
      "icelltype:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay4.tif\n",
      "k:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay4.tif\n",
      "k33:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay4.tif\n",
      "\n",
      "sto package...\n",
      "iconvert:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay4.tif\n",
      "ss:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay4.tif\n",
      "sy:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay4.tif\n",
      "\n",
      "rcha package...\n",
      "irch:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per4.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per5.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per6.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per7.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per8.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per9.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per10.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per11.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per12.tif\n",
      "recharge:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per4.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per5.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per6.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per7.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per8.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per9.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per10.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per11.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per12.tif\n",
      "\n",
      "sfr_0 package...\n",
      "\n",
      "lak_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "obs_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "wel_0 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/wel0_stress_period_data.shp...\n",
      "q:\n",
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_1 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/obs1_stress_period_data.shp...\n"
     ]
    }
   ],
   "source": [
    "for model in m, inset:\n",
    "    mfexport.export(model, model.modelgrid, output_path='postproc/{}/'.format(model.name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:57:38.745573Z",
     "iopub.status.busy": "2020-09-16T16:57:38.744261Z",
     "iopub.status.idle": "2020-09-16T16:57:39.535277Z",
     "shell.execute_reply": "2020-09-16T16:57:39.534733Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "summarizing plsnt_lgr_parent input...\n",
      "summarizing plsnt_lgr_inset input...\n",
      "skipped, not implemented yet\n"
     ]
    }
   ],
   "source": [
    "for model in m, inset:\n",
    "    mfexport.summarize(model, output_path='postproc/{}/'.format(model.name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-09-16T16:57:39.546533Z",
     "iopub.status.busy": "2020-09-16T16:57:39.542826Z",
     "iopub.status.idle": "2020-09-16T16:57:39.701350Z",
     "shell.execute_reply": "2020-09-16T16:57:39.700996Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "creating shapely Polygons of grid cells...\n",
      "finished in 0.03s\n",
      "\n",
      "writing postproc/plsnt_lgr_inset/shps/lake_connections.shp...\n"
     ]
    }
   ],
   "source": [
    "outpath='postproc/{}/shps'.format(inset.name)\n",
    "if not os.path.isdir(outpath):\n",
    "    os.makedirs(outpath)\n",
    "connectiondata = pd.DataFrame(inset.lak.connectiondata.array)\n",
    "k, i, j = cellids_to_kij(connectiondata['cellid'])\n",
    "connectiondata['k'] = k\n",
    "connectiondata['i'] = i\n",
    "connectiondata['j'] = j\n",
    "connectiondata.drop('cellid', axis=1, inplace=True)\n",
    "polygons = np.reshape(inset.modelgrid.polygons, (inset.modelgrid.nrow, inset.modelgrid.ncol))\n",
    "connectiondata['geometry'] = polygons[i, j]\n",
    "df2shp(connectiondata, os.path.join(outpath, 'lake_connections.shp'), epsg=3070)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "gis",
   "language": "python",
   "name": "gis"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
