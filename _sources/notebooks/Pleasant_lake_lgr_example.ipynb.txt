{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pleasant Lake Example\n",
    "\n",
    "* **[View the configuration file(s)](https://aleaf.github.io/modflow-setup/config-file-gallery.html#pleasant-lake-test-case)** \n",
    "* **[Run this example](https://mybinder.org/v2/gh/aleaf/modflow-setup/develop?urlpath=lab/tree/examples)  on  [Binder](https://mybinder.org/)**\n",
    "\n",
    "#### Model details\n",
    "* MODFLOW-6 model with local grid refinement (LGR)\n",
    "* LGR parent model is itself a Telescopic Mesh Refinment (TMR) inset from a MODFLOW-NWT model\n",
    "* Layer 1 in TMR parent model is subdivided evenly into two layers in LGR model (``botm: from_parent: 0: -0.5``). Other layers mapped explicitly between TMR parent and LGR model.\n",
    "* starting heads from LGR parent model resampled from binary output from the TMR parent\n",
    "* rch, npf, sto, and wel input copied from parent model\n",
    "* SFR package constructed from an NHDPlus v2 dataset (path to NHDPlus files in the same structure as the `downloads from the NHDPlus website`_)\n",
    "* head observations from csv files with different column names\n",
    "* LGR inset extent based on a buffer distance around a feature of interest\n",
    "* LGR inset dis, ic, npf, sto and rch packages copied from LGR parent\n",
    "* WEL package created from custom format\n",
    "* Lake package created from polygon features, bathymetry raster, stage-area-volume file and climate data from `PRISM`_.\n",
    "* Lake package observations set up automatically (output file for each lake)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import flopy\n",
    "import flopy.utils.binaryfile as bf\n",
    "from mfsetup import MF6model\n",
    "from mfsetup.discretization import cellids_to_kij\n",
    "from gisutils import df2shp\n",
    "import mfexport"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loading configuration file pleasant_lgr_parent.yml...\n",
      "\n",
      "Setting up plsnt_lgr_parent model from data in None\n",
      "\n",
      "\n",
      "arguments to MFSimulation:\n",
      "sim_name: pleasant_lgr\n",
      "version: mf6\n",
      "exe_name: mf6\n",
      "sim_ws: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr\n",
      "\n",
      "arguments to ModflowGwf:\n",
      "modelname: plsnt_lgr_parent\n",
      "version: mf6\n",
      "simulation: sim_name = pleasant_lgr\n",
      "sim_path = /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr\n",
      "exe_name = mf6\n",
      "\n",
      "###################\n",
      "Package mfsim.nam\n",
      "###################\n",
      "\n",
      "package_name = mfsim.nam\n",
      "filename = mfsim.nam\n",
      "package_type = nam\n",
      "model_or_simulation_package = simulation\n",
      "simulation_name = pleasant_lgr\n",
      "\n",
      "\n",
      "\n",
      "list: plsnt_lgr_parent.list\n",
      "print_input: True\n",
      "print_flows: False\n",
      "save_flows: True\n",
      "newtonoptions: ['under_relaxation']\n",
      "loading parent model /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant.nam...\n",
      "\n",
      "arguments to Modflow.load:\n",
      "model_ws: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant\n",
      "version: mfnwt\n",
      "load_only: [wel ... oc]\n",
      "f: pleasant.nam\n",
      "finished in 0.13s\n",
      "\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "xoff: 552200.0\n",
      "yoff: 387000.0\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "delr: array: (36,), float32, min: 200, mean: 200, max: 200\n",
      "delc: array: (34,), float32, min: 200, mean: 200, max: 200\n",
      "top: array: (34, 36), float32, min: 283.24, mean: 319.565, max: 389.51\n",
      "botm: array: (4, 34, 36), float32, min: 187.31, mean: 271.826, max: 388.41\n",
      "lenuni: 2\n",
      "\n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: 13\n",
      "model_time_units: days\n",
      "perlen: array: (13,), float32, min: 1, mean: 28.2308, max: 31\n",
      "nstp: array: (13,), int32, min: 1, mean: 4.69231, max: 5\n",
      "tsmult: array: (13,), float32, min: 1, mean: 1.46154, max: 1.5\n",
      "steady: array: (13,), bool, min: 0, mean: 0.0769231, max: 1\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0.0\n",
      "snap_to_NHG: False\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "dxy: 200\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "parent_model: MODFLOW 4 layer(s) 34 row(s) 36 column(s) 13 stress period(s)\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp\n",
      "setting up model grid...\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [200.0 ... 200.0]\n",
      "delc: [200.0 ... 200.0]\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "xul: 552800.0\n",
      "yul: 393200.0\n",
      "epsg: 3070\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "top: None\n",
      "botm: None\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp...\n",
      "finished in 0.04s\n",
      "\n",
      "loading configuration file /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "\n",
      "arguments to ModflowGwf:\n",
      "modelname: plsnt_lgr_inset\n",
      "version: mf6\n",
      "simulation: \n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: 1\n",
      "steady: True\n",
      "oc_saverecord: {0: ['save head last', 'save budget last']}\n",
      "nstp: 1\n",
      "tsmult: 1\n",
      "\n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: None\n",
      "steady: False\n",
      "oc_saverecord: {0: ['save head last', 'save budget last']}\n",
      "end_date_time: 2012-12-31\n",
      "freq: 1MS\n",
      "nstp: 1\n",
      "tsmult: 1.5\n",
      "sim_name = pleasant_lgr\n",
      "sim_path = /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr\n",
      "exe_name = mf6\n",
      "\n",
      "###################\n",
      "Package mfsim.nam\n",
      "###################\n",
      "\n",
      "package_name = mfsim.nam\n",
      "filename = mfsim.nam\n",
      "package_type = nam\n",
      "model_or_simulation_package = simulation\n",
      "simulation_name = pleasant_lgr\n",
      "\n",
      "\n",
      "@@@@@@@@@@@@@@@@@@@@\n",
      "Model plsnt_lgr_parent\n",
      "@@@@@@@@@@@@@@@@@@@@\n",
      "\n",
      "plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages:\n",
      "\n",
      "list: plsnt_lgr_inset.list\n",
      "print_input: True\n",
      "print_flows: False\n",
      "save_flows: True\n",
      "newtonoptions: ['under_relaxation']\n",
      "\n",
      "Setting up DIS package...\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "length_units: meters\n",
      "filenames: {0: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif'}\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "datatype: array2d\n",
      "variable: top\n",
      "dest_model: plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages:\n",
      "vmin: -1e+30\n",
      "vmax: 1e+30\n",
      "resample_method: linear\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif...\n",
      "finished in 0.01s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "filenames: {1: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif',\n",
      " 2: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif',\n",
      " 3: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif',\n",
      " 4: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif'}\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "datatype: array3d\n",
      "variable: botm\n",
      "dest_model: plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages:\n",
      "vmin: -1e+30\n",
      "vmax: 1e+30\n",
      "resample_method: linear\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif...\n",
      "finished in 0.00s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif...\n",
      "finished in 0.00s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif...\n",
      "finished in 0.00s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif...\n",
      "finished in 0.00s\n",
      "loading ./external/plsnt_lgr_parent_top.dat, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfdis:\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "nlay: 5\n",
      "delr: [200.0 ... 200.0]\n",
      "delc: [200.0 ... 200.0]\n",
      "angrot: 0.0\n",
      "top: [{'filename': './external/plsnt_lgr_parent_top.dat'}]\n",
      "botm: [{'filename': './external/plsnt_lgr_parent_botm0.dat'} ... {'filename': './external/plsnt_lgr_parent_botm4.dat'}]\n",
      "idomain: [{'filename': './external/plsnt_lgr_parent_idomain0.dat'} ... {'filename': './external/plsnt_lgr_parent_idomain4.dat'}]\n",
      "xorigin: 553000\n",
      "yorigin: 388000\n",
      "length_units: meters\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote original/plsnt_lgr_parent_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr4.dat, took 0.00s\n",
      "loading ./external/plsnt_lgr_parent_top.dat, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0.0\n",
      "snap_to_NHG: False\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "dxy: 200\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "parent_model: MODFLOW 4 layer(s) 34 row(s) 36 column(s) 13 stress period(s)\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp\n",
      "top: array: (25, 25), float64, min: 291.69, mean: 323.471, max: 369.77\n",
      "botm: array: (5, 25, 25), float64, min: 189.36, mean: 282.694, max: 355.91\n",
      "setting up model grid...\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [200.0 ... 200.0]\n",
      "delc: [200.0 ... 200.0]\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "xul: 552800.0\n",
      "yul: 393200.0\n",
      "epsg: 3070\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "top: array: (25, 25), float64, min: 291.69, mean: 323.471, max: 369.77\n",
      "botm: array: (5, 25, 25), float64, min: 189.36, mean: 282.694, max: 355.91\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp...\n",
      "finished in 0.02s\n",
      "\n",
      "loading configuration file /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "finished in 0.22s\n",
      "\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "xoff: 552800.0\n",
      "yoff: 388200.0\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "delr: array: (25,), float64, min: 200, mean: 200, max: 200\n",
      "delc: array: (25,), float64, min: 200, mean: 200, max: 200\n",
      "top: array: (25, 25), float64, min: 291.69, mean: 323.471, max: 369.77\n",
      "botm: array: (5, 25, 25), float64, min: 189.36, mean: 282.694, max: 355.91\n",
      "lenuni: 2\n",
      "\n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: 1\n",
      "steady: True\n",
      "oc_saverecord: {0: ['save head last', 'save budget last']}\n",
      "nstp: 1\n",
      "tsmult: 1\n",
      "\n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: None\n",
      "steady: False\n",
      "oc_saverecord: {0: ['save head last', 'save budget last']}\n",
      "end_date_time: 2012-12-31\n",
      "freq: 1MS\n",
      "nstp: 1\n",
      "tsmult: 1.5\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0\n",
      "snap_to_NHG: False\n",
      "dxy: 40\n",
      "buffer: 1000\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "features_shapefile: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "parent_model: plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages: dis\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp\n",
      "setting up model grid...\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 552800.0, 388200.0, 557800.0, 393200.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [40.0 ... 40.0]\n",
      "delc: [40.0 ... 40.0]\n",
      "xoff: None\n",
      "yoff: None\n",
      "xul: 554200.0\n",
      "yul: 391800.0\n",
      "epsg: 3070\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "top: None\n",
      "botm: None\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp...\n",
      "finished in 0.20s\n",
      "\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote original/plsnt_lgr_parent_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr4.dat, took 0.00s\n",
      "loading ./external/plsnt_lgr_parent_top.dat, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0.0\n",
      "snap_to_NHG: False\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "dxy: 200\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "parent_model: MODFLOW 4 layer(s) 34 row(s) 36 column(s) 13 stress period(s)\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp\n",
      "top: array: (25, 25), float64, min: -9999, mean: -3372.47, max: 369.77\n",
      "botm: array: (5, 25, 25), float64, min: -9999, mean: -3399.8, max: 355.91\n",
      "setting up model grid...\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [200.0 ... 200.0]\n",
      "delc: [200.0 ... 200.0]\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "xul: 552800.0\n",
      "yul: 393200.0\n",
      "epsg: 3070\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "top: array: (25, 25), float64, min: -9999, mean: -3372.47, max: 369.77\n",
      "botm: array: (5, 25, 25), float64, min: -9999, mean: -3399.8, max: 355.91\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "\n",
      "Setting up TDIS package...\n",
      "\n",
      "arguments to ModflowTdis:\n",
      "time_units: days\n",
      "start_date_time: 2012-01-01\n",
      "nper: 13\n",
      "perioddata: array: (13,), (numpy.record, [('perlen', '<f8'), ('nstp', '<i8'), ('tsmult', '<f8')])\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up IMS package...\n",
      "\n",
      "arguments to ModflowIms:\n",
      "print_option: all\n",
      "complexity: moderate\n",
      "outer_hclose: 0.01\n",
      "outer_rclosebnd: 1.e4\n",
      "outer_maximum: 200\n",
      "under_relaxation: dbd\n",
      "under_relaxation_theta: 0.7\n",
      "under_relaxation_kappa: 0.1\n",
      "under_relaxation_gamma: 0.0\n",
      "under_relaxation_momentum: 0.0\n",
      "backtracking_number: 0\n",
      "inner_maximum: 100\n",
      "inner_hclose: 0.0001\n",
      "rcloserecord: [0.0001, 'relative_rclose']\n",
      "linear_acceleration: bicgstab\n",
      "scaling_method: None\n",
      "reordering_method: None\n",
      "relaxation_factor: 0.0\n",
      "number_orthogonalizations: 0\n",
      "preconditioner_levels: 7\n",
      "preconditioner_drop_tolerance: 0.001\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up IC package...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_strt0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt4.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfic:\n",
      "strt: [{'filename': './external/plsnt_lgr_parent_strt0.dat'} ... {'filename': './external/plsnt_lgr_parent_strt4.dat'}]\n",
      "finished in 0.15s\n",
      "\n",
      "\n",
      "Setting up NPF package...\n",
      "wrote original/plsnt_lgr_parent_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k330.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k331.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k332.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k333.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k334.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfnpf:\n",
      "save_flows: True\n",
      "icelltype: 1\n",
      "k: [{'filename': './external/plsnt_lgr_parent_k0.dat'} ... {'filename': './external/plsnt_lgr_parent_k4.dat'}]\n",
      "k33: [{'filename': './external/plsnt_lgr_parent_k330.dat'} ... {'filename': './external/plsnt_lgr_parent_k334.dat'}]\n",
      "finished in 0.34s\n",
      "\n",
      "\n",
      "Setting up STO package...\n",
      "wrote ./external/plsnt_lgr_parent_sy0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss4.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfsto:\n",
      "save_flows: True\n",
      "iconvert: 1\n",
      "sy: [{'filename': './external/plsnt_lgr_parent_sy0.dat'} ... {'filename': './external/plsnt_lgr_parent_sy4.dat'}]\n",
      "ss: [{'filename': './external/plsnt_lgr_parent_ss0.dat'} ... {'filename': './external/plsnt_lgr_parent_ss4.dat'}]\n",
      "steady_state: {0: True,\n",
      " 1: False,\n",
      " 2: False,\n",
      " 3: False,\n",
      " 4: False,\n",
      " 5: False,\n",
      " 6: False,\n",
      " 7: False,\n",
      " 8: False,\n",
      " 9: False,\n",
      " 10: False,\n",
      " 11: False,\n",
      " 12: False}\n",
      "transient: {0: False,\n",
      " 1: True,\n",
      " 2: True,\n",
      " 3: True,\n",
      " 4: True,\n",
      " 5: True,\n",
      " 6: True,\n",
      " 7: True,\n",
      " 8: True,\n",
      " 9: True,\n",
      " 10: True,\n",
      " 11: True,\n",
      " 12: True}\n",
      "finished in 0.33s\n",
      "\n",
      "\n",
      "Setting up RCH package...\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch5.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch6.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch7.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch8.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch9.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch10.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch11.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch12.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfrcha:\n",
      "irch: [{'filename': './external/plsnt_lgr_parent_irch.dat'}]\n",
      "recharge: {0: {'filename': './external/plsnt_lgr_parent_rch0.dat'},\n",
      " 1: {'filename': './external/plsnt_lgr_parent_rch1.dat'},\n",
      " 2: {'filename': './external/plsnt_lgr_parent_rch2.dat'},\n",
      " 3: {'filename': './external/plsnt_lgr_parent_rch3.dat'},\n",
      " 4: {'filename': './external/plsnt_lgr_parent_rch4.dat'},\n",
      " 5: {'filename': './external/plsnt_lgr_parent_rch5.dat'},\n",
      " 6: {'filename': './external/plsnt_lgr_parent_rch6.dat'},\n",
      " 7: {'filename': './external/plsnt_lgr_parent_rch7.dat'},\n",
      " 8: {'filename': './external/plsnt_lgr_parent_rch8.dat'},\n",
      " 9: {'filename': './external/plsnt_lgr_parent_rch9.dat'},\n",
      " 10: {'filename': './external/plsnt_lgr_parent_rch10.dat'},\n",
      " 11: {'filename': './external/plsnt_lgr_parent_rch11.dat'},\n",
      " 12: {'filename': './external/plsnt_lgr_parent_rch12.dat'}}\n",
      "print_input: True\n",
      "print_flows: True\n",
      "save_flows: True\n",
      "readasarrays: True\n",
      "finished in 0.07s\n",
      "\n",
      "\n",
      "Setting up OC package...\n",
      "\n",
      "arguments to ModflowGwfoc:\n",
      "budget_filerecord: plsnt_lgr_parent.cbc\n",
      "head_filerecord: plsnt_lgr_parent.hds\n",
      "saverecord: defaultdict(<class 'list'>, {0: [('head', 'last'), ('budget', 'last')]})\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up SFR package...\n",
      "\n",
      "loading NHDPlus v2 hydrography data...\n",
      "for basins:\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDSnapshot/Hydrography/NHDFlowline.shp...\n",
      "filtering on bounding box -89.5911225596923, 43.965959882234365, -89.52843935935044, 44.01121639579922...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlowlineVAA.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlow.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/elevslope.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "load finished in 0.06s\n",
      "\n",
      "Getting routing information from NHDPlus Plusflow table...\n",
      "finished in 0.01s\n",
      "\n",
      "\n",
      "SFRmaker version 0.4.0.post26+ge11e929\n",
      "\n",
      "Creating sfr dataset...\n",
      "\n",
      "Creating grid class instance from flopy Grid instance...\n",
      "grid class created in 0.04s\n",
      "\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 625\n",
      "nlay: 1\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "model length units: undefined\n",
      "crs: <Projected CRS: EPSG:3070>\n",
      "Name: NAD83 / Wisconsin Transverse Mercator\n",
      "Axis Info [cartesian]:\n",
      "- X[east]: Easting (metre)\n",
      "- Y[north]: Northing (metre)\n",
      "Area of Use:\n",
      "- name: USA - Wisconsin\n",
      "- bounds: (-92.89, 42.48, -86.25, 47.31)\n",
      "Coordinate Operation:\n",
      "- name: Wisconsin Transverse Mercator 83\n",
      "- method: Transverse Mercator\n",
      "Datum: North American Datum 1983\n",
      "- Ellipsoid: GRS 1980\n",
      "- Prime Meridian: Greenwich\n",
      "\n",
      "bounds: 552800.00, 388200.00, 557800.00, 393200.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages: dis ic npf sto rcha oc\n",
      "\n",
      "reprojecting hydrography from\n",
      "EPSG:4269\n",
      "to\n",
      "EPSG:3070\n",
      "\n",
      "\n",
      "Culling hydrography to active area...\n",
      "simplification tolerance: 2000.00\n",
      "starting lines: 2\n",
      "remaining lines: 2\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Intersecting 2 flowlines with 625 grid cells...\n",
      "Intersecting 2 features...\n",
      "2\n",
      "finished in 0.01s\n",
      "\n",
      "Setting up reach data... (may take a few minutes for large grids)\n",
      "finished in 0.00s\n",
      "\n",
      "Computing widths...\n",
      "\n",
      "Dropping 0 reaches with length < 10.00 meters...\n",
      "\n",
      "Repairing routing connections...\n",
      "enforcing best segment numbering...\n",
      "\n",
      "Setting up segment data...\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 625\n",
      "nlay: 1\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "model length units: undefined\n",
      "crs: <Projected CRS: EPSG:3070>\n",
      "Name: NAD83 / Wisconsin Transverse Mercator\n",
      "Axis Info [cartesian]:\n",
      "- X[east]: Easting (metre)\n",
      "- Y[north]: Northing (metre)\n",
      "Area of Use:\n",
      "- name: USA - Wisconsin\n",
      "- bounds: (-92.89, 42.48, -86.25, 47.31)\n",
      "Coordinate Operation:\n",
      "- name: Wisconsin Transverse Mercator 83\n",
      "- method: Transverse Mercator\n",
      "Datum: North American Datum 1983\n",
      "- Ellipsoid: GRS 1980\n",
      "- Prime Meridian: Greenwich\n",
      "\n",
      "bounds: 552800.00, 388200.00, 557800.00, 393200.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "\n",
      "Time to create sfr dataset: 0.25s\n",
      "\n",
      "running rasterstats.zonal_stats on buffered LineStrings...\n",
      "finished in 0.03s\n",
      "\n",
      "\n",
      "Smoothing elevations...\n",
      "finished in 0.00s\n",
      "\n",
      "arguments to SFRData.add_observations:\n",
      "obstype: downstream-flow\n",
      "x_location_column: x\n",
      "y_location_column: y\n",
      "obsname_column: site_no\n",
      "data: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/gages.csv\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_parent_sfr_reach_data.csv\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_parent_sfr_segment_data.csv\n",
      "converting segment data to period data...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_cells.shp...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_outlets.shp...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_lines.shp...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_routing.shp...\n",
      "No period data to export!\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_observations.shp...\n",
      "No non-zero values of flow to export!\n",
      "\n",
      "arguments to ModflowGwfsfr:\n",
      "save_flows: True\n",
      "mover: True\n",
      "converting reach and segment data to package data...\n",
      "converting segment data to period data...\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote original/plsnt_lgr_parent_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr4.dat, took 0.00s\n",
      "loading ./external/plsnt_lgr_parent_top.dat, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0.0\n",
      "snap_to_NHG: False\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "dxy: 200\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "parent_model: MODFLOW 4 layer(s) 34 row(s) 36 column(s) 13 stress period(s)\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp\n",
      "top: array: (25, 25), float64, min: -9999, mean: -3372.47, max: 369.77\n",
      "botm: array: (5, 25, 25), float64, min: -9999, mean: -3399.78, max: 355.91\n",
      "setting up model grid...\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [200.0 ... 200.0]\n",
      "delc: [200.0 ... 200.0]\n",
      "xoff: 553000\n",
      "yoff: 388000\n",
      "xul: 552800.0\n",
      "yul: 393200.0\n",
      "epsg: 3070\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "top: array: (25, 25), float64, min: -9999, mean: -3372.47, max: 369.77\n",
      "botm: array: (5, 25, 25), float64, min: -9999, mean: -3399.78, max: 355.91\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "finished in 0.84s\n",
      "\n",
      "\n",
      "Setting up LAK package...\n",
      "wrote original/plsnt_lgr_parent_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr4.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr4.dat, took 0.00s\n",
      "lakes_shapefile not specified, or no lakes in model area\n",
      "\n",
      "Setting up WEL package...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "arguments to ModflowGwfwel:\n",
      "stress_period_data: {0: {'filename': './external/plsnt_lgr_parent_wel_000.dat'},\n",
      " 1: {'filename': './external/plsnt_lgr_parent_wel_001.dat'},\n",
      " 4: {'filename': './external/plsnt_lgr_parent_wel_004.dat'},\n",
      " 5: {'filename': './external/plsnt_lgr_parent_wel_005.dat'},\n",
      " 6: {'filename': './external/plsnt_lgr_parent_wel_006.dat'},\n",
      " 7: {'filename': './external/plsnt_lgr_parent_wel_007.dat'},\n",
      " 8: {'filename': './external/plsnt_lgr_parent_wel_008.dat'},\n",
      " 9: {'filename': './external/plsnt_lgr_parent_wel_009.dat'},\n",
      " 10: {'filename': './external/plsnt_lgr_parent_wel_010.dat'}}\n",
      "print_input: True\n",
      "print_flows: True\n",
      "save_flows: True\n",
      "boundnames: True\n",
      "finished in 0.12s\n",
      "\n",
      "\n",
      "Setting up OBS package...\n",
      "Reading observation files...\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/nwis_heads_info_file.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/lake_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/wdnr_gw_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/uwsp_heads.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsnme\n",
      "    observation label column: obsnme\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/wgnhs_head_targets.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: common_name\n",
      "    observation label column: common_name\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "\n",
      "Culling observations to model area...\n",
      "Dropping head observations that coincide with Lake Package Lakes...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "Dropping head observations specified in /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr_parent.yml...\n",
      "\n",
      "arguments to ModflowUtlobs:\n",
      "digits: 10\n",
      "print_input: True\n",
      "continuous: {'plsnt_lgr_parent.head.obs': rec.array([('10051240_lk', 'HEAD', (4, 22, 20)), ...,\n",
      "           ('ys864', 'HEAD', (4, 5, 3))],\n",
      "          dtype=[('obsname', 'O'), ('obstype', 'O'), ('id', 'O')])}\n",
      "finished in 0.06s\n",
      "\n",
      "setting up specified head perimeter boundary with CHD package...\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "xoff: 552200.0\n",
      "yoff: 387000.0\n",
      "angrot: 0.0\n",
      "epsg: 3070\n",
      "delr: array: (36,), float32, min: 200, mean: 200, max: 200\n",
      "delc: array: (34,), float32, min: 200, mean: 200, max: 200\n",
      "top: array: (34, 36), float32, min: 283.24, mean: 319.565, max: 389.51\n",
      "botm: array: (4, 34, 36), float32, min: 187.31, mean: 271.826, max: 388.41\n",
      "lenuni: 2\n",
      "\n",
      "arguments to ModflowGwfchd:\n",
      "stress_period_data: {0: {'filename': './external/plsnt_lgr_parent_chd_000.dat'},\n",
      " 1: {'filename': './external/plsnt_lgr_parent_chd_001.dat'},\n",
      " 2: {'filename': './external/plsnt_lgr_parent_chd_002.dat'},\n",
      " 3: {'filename': './external/plsnt_lgr_parent_chd_003.dat'},\n",
      " 4: {'filename': './external/plsnt_lgr_parent_chd_004.dat'},\n",
      " 5: {'filename': './external/plsnt_lgr_parent_chd_005.dat'},\n",
      " 6: {'filename': './external/plsnt_lgr_parent_chd_006.dat'},\n",
      " 7: {'filename': './external/plsnt_lgr_parent_chd_007.dat'},\n",
      " 8: {'filename': './external/plsnt_lgr_parent_chd_008.dat'},\n",
      " 9: {'filename': './external/plsnt_lgr_parent_chd_009.dat'},\n",
      " 10: {'filename': './external/plsnt_lgr_parent_chd_010.dat'},\n",
      " 11: {'filename': './external/plsnt_lgr_parent_chd_011.dat'},\n",
      " 12: {'filename': './external/plsnt_lgr_parent_chd_012.dat'}}\n",
      "print_input: False\n",
      "print_flows: False\n",
      "save_flows: True\n",
      "finished in 2.11s\n",
      "\n",
      "\n",
      "Setting up DIS package...\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "length_units: meters\n",
      "filenames: {0: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif'}\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "datatype: array2d\n",
      "variable: top\n",
      "dest_model: plsnt_lgr_inset model:\n",
      "5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
      "Parent model: ./plsnt_lgr_parent\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
      "Grid spacing: 40.00 meters\n",
      "Packages:\n",
      "vmin: -1e+30\n",
      "vmax: 1e+30\n",
      "resample_method: linear\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif...\n",
      "finished in 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "filenames: {1: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif',\n",
      " 2: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif',\n",
      " 3: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif',\n",
      " 4: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif'}\n",
      "\n",
      "arguments to ArraySourceData:\n",
      "datatype: array3d\n",
      "variable: botm\n",
      "dest_model: plsnt_lgr_inset model:\n",
      "5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
      "Parent model: ./plsnt_lgr_parent\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
      "Grid spacing: 40.00 meters\n",
      "Packages:\n",
      "vmin: -1e+30\n",
      "vmax: 1e+30\n",
      "resample_method: linear\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif...\n",
      "finished in 0.00s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif...\n",
      "finished in 0.00s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif...\n",
      "finished in 0.00s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif...\n",
      "finished in 0.00s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.02s\n",
      "\n",
      "arguments to MFsetupMixin.load_features:\n",
      "filename: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 554200.0, 389000.0, 557400.0, 391800.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "caching data in /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "\n",
      "arguments to MFsetupMixin.load_features:\n",
      "filename: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.02s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.02s\n",
      "loading ./external/plsnt_lgr_inset_top.dat, shape=(70, 80), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.16s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfdis:\n",
      "nrow: 70\n",
      "ncol: 80\n",
      "nlay: 5\n",
      "delr: [40.0 ... 40.0]\n",
      "delc: [40.0 ... 40.0]\n",
      "angrot: 0.0\n",
      "top: [{'filename': './external/plsnt_lgr_inset_top.dat'}]\n",
      "botm: [{'filename': './external/plsnt_lgr_inset_botm0.dat'} ... {'filename': './external/plsnt_lgr_inset_botm4.dat'}]\n",
      "idomain: [{'filename': './external/plsnt_lgr_inset_idomain0.dat'} ... {'filename': './external/plsnt_lgr_inset_idomain4.dat'}]\n",
      "xorigin: None\n",
      "yorigin: None\n",
      "length_units: meters\n",
      "computing cell thicknesses...\n",
      "finished in 0.15s\n",
      "\n",
      "\n",
      "arguments to MFsetupMixin.load_features:\n",
      "filename: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "\n",
      "arguments to MFsetupMixin.load_features:\n",
      "filename: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.02s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.02s\n",
      "wrote original/plsnt_lgr_inset_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr4.dat, took 0.00s\n",
      "loading ./external/plsnt_lgr_inset_top.dat, shape=(70, 80), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.33s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0\n",
      "snap_to_NHG: False\n",
      "dxy: 40\n",
      "buffer: 1000\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "features_shapefile: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "parent_model: plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages: dis ic npf sto rcha oc sfr_0 wel_0 obs_0 chd_0\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp\n",
      "top: array: (70, 80), float64, min: 290.5, mean: 313.365, max: 348.75\n",
      "botm: array: (5, 70, 80), float64, min: 191.27, mean: 276.217, max: 338.89\n",
      "setting up model grid...\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 552800.0, 388200.0, 557800.0, 393200.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [40.0 ... 40.0]\n",
      "delc: [40.0 ... 40.0]\n",
      "xoff: None\n",
      "yoff: None\n",
      "xul: 554200.0\n",
      "yul: 391800.0\n",
      "epsg: 3070\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "top: array: (70, 80), float64, min: 290.5, mean: 313.365, max: 348.75\n",
      "botm: array: (5, 70, 80), float64, min: 191.27, mean: 276.217, max: 338.89\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp...\n",
      "finished in 0.20s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_irch.dat, took 0.00s\n",
      "finished in 1.36s\n",
      "\n",
      "\n",
      "Setting up IC package...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_strt0.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_strt1.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_strt2.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_strt3.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_strt4.dat, took 0.01s\n",
      "\n",
      "arguments to ModflowGwfic:\n",
      "strt: [{'filename': './external/plsnt_lgr_inset_strt0.dat'} ... {'filename': './external/plsnt_lgr_inset_strt4.dat'}]\n",
      "finished in 0.11s\n",
      "\n",
      "\n",
      "Setting up NPF package...\n",
      "\n",
      "arguments to MFsetupMixin.load_features:\n",
      "filename: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "\n",
      "arguments to MFsetupMixin.load_features:\n",
      "filename: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.04s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.02s\n",
      "wrote original/plsnt_lgr_inset_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k330.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k331.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k332.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k333.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_k334.dat, took 0.01s\n",
      "\n",
      "arguments to ModflowGwfnpf:\n",
      "save_flows: True\n",
      "icelltype: 1\n",
      "k: [{'filename': './external/plsnt_lgr_inset_k0.dat'} ... {'filename': './external/plsnt_lgr_inset_k4.dat'}]\n",
      "k33: [{'filename': './external/plsnt_lgr_inset_k330.dat'} ... {'filename': './external/plsnt_lgr_inset_k334.dat'}]\n",
      "finished in 0.36s\n",
      "\n",
      "\n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: 1\n",
      "steady: True\n",
      "oc_saverecord: {0: ['save head last', 'save budget last']}\n",
      "nstp: 1\n",
      "tsmult: 1\n",
      "\n",
      "arguments to setup_perioddata_group:\n",
      "start_date_time: 2012-01-01\n",
      "nper: None\n",
      "steady: False\n",
      "oc_saverecord: {0: ['save head last', 'save budget last']}\n",
      "end_date_time: 2012-12-31\n",
      "freq: 1MS\n",
      "nstp: 1\n",
      "tsmult: 1.5\n",
      "\n",
      "Setting up STO package...\n",
      "wrote ./external/plsnt_lgr_inset_sy0.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_sy1.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_sy2.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_sy3.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_sy4.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_ss0.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_ss1.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_ss2.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_ss3.dat, took 0.01s\n",
      "wrote ./external/plsnt_lgr_inset_ss4.dat, took 0.01s\n",
      "\n",
      "arguments to ModflowGwfsto:\n",
      "save_flows: True\n",
      "iconvert: 1\n",
      "sy: [{'filename': './external/plsnt_lgr_inset_sy0.dat'} ... {'filename': './external/plsnt_lgr_inset_sy4.dat'}]\n",
      "ss: [{'filename': './external/plsnt_lgr_inset_ss0.dat'} ... {'filename': './external/plsnt_lgr_inset_ss4.dat'}]\n",
      "steady_state: {0: True,\n",
      " 1: False,\n",
      " 2: False,\n",
      " 3: False,\n",
      " 4: False,\n",
      " 5: False,\n",
      " 6: False,\n",
      " 7: False,\n",
      " 8: False,\n",
      " 9: False,\n",
      " 10: False,\n",
      " 11: False,\n",
      " 12: False}\n",
      "transient: {0: False,\n",
      " 1: True,\n",
      " 2: True,\n",
      " 3: True,\n",
      " 4: True,\n",
      " 5: True,\n",
      " 6: True,\n",
      " 7: True,\n",
      " 8: True,\n",
      " 9: True,\n",
      " 10: True,\n",
      " 11: True,\n",
      " 12: True}\n",
      "finished in 0.28s\n",
      "\n",
      "\n",
      "Setting up RCH package...\n",
      "wrote ./external/plsnt_lgr_inset_irch.dat, took 0.00s\n",
      "\n",
      "arguments to PrismSourceData:\n",
      "filenames: {600059060: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/PRISM_ppt_tmean_stable_4km_189501_201901_43.9850_-89.5522.csv'}\n",
      "period_stats: {0: ['mean', '2012-01-01', '2018-12-31'], 1: 'mean'}\n",
      "\n",
      "arguments to PrismSourceData:\n",
      "dest_model: plsnt_lgr_inset model:\n",
      "5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
      "Parent model: ./plsnt_lgr_parent\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
      "Grid spacing: 40.00 meters\n",
      "Packages: dis ic npf sto\n",
      "wrote ./external/plsnt_lgr_inset_rch0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch5.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch6.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch7.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch8.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch9.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch10.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch11.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch12.dat, took 0.00s\n",
      "\n",
      "arguments to ModflowGwfrcha:\n",
      "irch: [{'filename': './external/plsnt_lgr_inset_irch.dat'}]\n",
      "recharge: {0: {'filename': './external/plsnt_lgr_inset_rch0.dat'},\n",
      " 1: {'filename': './external/plsnt_lgr_inset_rch1.dat'},\n",
      " 2: {'filename': './external/plsnt_lgr_inset_rch2.dat'},\n",
      " 3: {'filename': './external/plsnt_lgr_inset_rch3.dat'},\n",
      " 4: {'filename': './external/plsnt_lgr_inset_rch4.dat'},\n",
      " 5: {'filename': './external/plsnt_lgr_inset_rch5.dat'},\n",
      " 6: {'filename': './external/plsnt_lgr_inset_rch6.dat'},\n",
      " 7: {'filename': './external/plsnt_lgr_inset_rch7.dat'},\n",
      " 8: {'filename': './external/plsnt_lgr_inset_rch8.dat'},\n",
      " 9: {'filename': './external/plsnt_lgr_inset_rch9.dat'},\n",
      " 10: {'filename': './external/plsnt_lgr_inset_rch10.dat'},\n",
      " 11: {'filename': './external/plsnt_lgr_inset_rch11.dat'},\n",
      " 12: {'filename': './external/plsnt_lgr_inset_rch12.dat'}}\n",
      "print_input: True\n",
      "print_flows: True\n",
      "save_flows: True\n",
      "readasarrays: True\n",
      "finished in 0.31s\n",
      "\n",
      "\n",
      "Setting up OC package...\n",
      "\n",
      "arguments to ModflowGwfoc:\n",
      "budget_filerecord: plsnt_lgr_inset.cbc\n",
      "head_filerecord: plsnt_lgr_inset.hds\n",
      "saverecord: defaultdict(<class 'list'>, {0: [('head', 'last'), ('budget', 'last')]})\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up SFR package...\n",
      "\n",
      "loading NHDPlus v2 hydrography data...\n",
      "for basins:\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDSnapshot/Hydrography/NHDFlowline.shp...\n",
      "filtering on bounding box -89.57361941749177, 43.97318294263003, -89.53352803700078, 43.99854796302356...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlowlineVAA.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlow.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/elevslope.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "load finished in 0.06s\n",
      "\n",
      "Getting routing information from NHDPlus Plusflow table...\n",
      "finished in 0.01s\n",
      "\n",
      "\n",
      "SFRmaker version 0.4.0.post26+ge11e929\n",
      "\n",
      "Creating sfr dataset...\n",
      "\n",
      "Creating grid class instance from flopy Grid instance...\n",
      "grid class created in 0.15s\n",
      "\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 5,600\n",
      "nlay: 1\n",
      "nrow: 70\n",
      "ncol: 80\n",
      "model length units: undefined\n",
      "crs: <Projected CRS: EPSG:3070>\n",
      "Name: NAD83 / Wisconsin Transverse Mercator\n",
      "Axis Info [cartesian]:\n",
      "- X[east]: Easting (metre)\n",
      "- Y[north]: Northing (metre)\n",
      "Area of Use:\n",
      "- name: USA - Wisconsin\n",
      "- bounds: (-92.89, 42.48, -86.25, 47.31)\n",
      "Coordinate Operation:\n",
      "- name: Wisconsin Transverse Mercator 83\n",
      "- method: Transverse Mercator\n",
      "Datum: North American Datum 1983\n",
      "- Ellipsoid: GRS 1980\n",
      "- Prime Meridian: Greenwich\n",
      "\n",
      "bounds: 554200.00, 389000.00, 557400.00, 391800.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "plsnt_lgr_inset model:\n",
      "5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
      "Parent model: ./plsnt_lgr_parent\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
      "Grid spacing: 40.00 meters\n",
      "Packages: dis ic npf sto rcha oc\n",
      "\n",
      "reprojecting hydrography from\n",
      "EPSG:4269\n",
      "to\n",
      "EPSG:3070\n",
      "\n",
      "\n",
      "Culling hydrography to active area...\n",
      "simplification tolerance: 2000.00\n",
      "starting lines: 2\n",
      "remaining lines: 2\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Intersecting 2 flowlines with 5,600 grid cells...\n",
      "Intersecting 2 features...\n",
      "2\n",
      "finished in 0.03s\n",
      "\n",
      "Setting up reach data... (may take a few minutes for large grids)\n",
      "finished in 0.01s\n",
      "\n",
      "Computing widths...\n",
      "\n",
      "Dropping 1 reaches with length < 2.00 meters...\n",
      "\n",
      "Repairing routing connections...\n",
      "enforcing best segment numbering...\n",
      "\n",
      "Setting up segment data...\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 5,600\n",
      "nlay: 1\n",
      "nrow: 70\n",
      "ncol: 80\n",
      "model length units: undefined\n",
      "crs: <Projected CRS: EPSG:3070>\n",
      "Name: NAD83 / Wisconsin Transverse Mercator\n",
      "Axis Info [cartesian]:\n",
      "- X[east]: Easting (metre)\n",
      "- Y[north]: Northing (metre)\n",
      "Area of Use:\n",
      "- name: USA - Wisconsin\n",
      "- bounds: (-92.89, 42.48, -86.25, 47.31)\n",
      "Coordinate Operation:\n",
      "- name: Wisconsin Transverse Mercator 83\n",
      "- method: Transverse Mercator\n",
      "Datum: North American Datum 1983\n",
      "- Ellipsoid: GRS 1980\n",
      "- Prime Meridian: Greenwich\n",
      "\n",
      "bounds: 554200.00, 389000.00, 557400.00, 391800.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "\n",
      "Time to create sfr dataset: 0.41s\n",
      "\n",
      "running rasterstats.zonal_stats on buffered LineStrings...\n",
      "finished in 0.07s\n",
      "\n",
      "\n",
      "Smoothing elevations...\n",
      "finished in 0.00s\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_inset_sfr_reach_data.csv\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_inset_sfr_segment_data.csv\n",
      "converting segment data to period data...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_cells.shp...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_outlets.shp...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_lines.shp...\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_routing.shp...\n",
      "No period data to export!\n",
      "No observations to export!\n",
      "No non-zero values of flow to export!\n",
      "\n",
      "arguments to ModflowGwfsfr:\n",
      "save_flows: True\n",
      "mover: True\n",
      "converting reach and segment data to package data...\n",
      "converting segment data to period data...\n",
      "computing cell thicknesses...\n",
      "finished in 0.33s\n",
      "\n",
      "\n",
      "arguments to MFsetupMixin.load_features:\n",
      "filename: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "\n",
      "arguments to MFsetupMixin.load_features:\n",
      "filename: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.02s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.02s\n",
      "wrote original/plsnt_lgr_inset_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr4.dat, took 0.00s\n",
      "loading ./external/plsnt_lgr_inset_top.dat, shape=(70, 80), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.23s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm4.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain0.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain1.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain2.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain3.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain4.dat, took 0.00s\n",
      "\n",
      "arguments to setup_structured_grid:\n",
      "rotation: 0\n",
      "snap_to_NHG: False\n",
      "dxy: 40\n",
      "buffer: 1000\n",
      "grid_file: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "epsg: 3070\n",
      "nlay: 5\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "features_shapefile: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "parent_model: plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages: dis ic npf sto rcha oc sfr_0 wel_0 obs_0 chd_0\n",
      "model_length_units: meters\n",
      "bbox_shapefile: /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp\n",
      "top: array: (70, 80), float64, min: 290.5, mean: 313.365, max: 348.75\n",
      "botm: array: (5, 70, 80), float64, min: 191.27, mean: 276.409, max: 338.89\n",
      "setting up model grid...\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 552800.0, 388200.0, 557800.0, 393200.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "arguments to MFsetupGrid:\n",
      "delr: [40.0 ... 40.0]\n",
      "delc: [40.0 ... 40.0]\n",
      "xoff: None\n",
      "yoff: None\n",
      "xul: 554200.0\n",
      "yul: 391800.0\n",
      "epsg: 3070\n",
      "lenuni: 2\n",
      "angrot: 0.0\n",
      "top: array: (70, 80), float64, min: 290.5, mean: 313.365, max: 348.75\n",
      "botm: array: (5, 70, 80), float64, min: 191.27, mean: 276.409, max: 338.89\n",
      "wrote /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp...\n",
      "finished in 0.20s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_irch.dat, took 0.00s\n",
      "finished in 1.92s\n",
      "\n",
      "\n",
      "Setting up LAK package...\n",
      "\n",
      "arguments to MFsetupMixin.load_features:\n",
      "filename: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "\n",
      "arguments to MFsetupMixin.load_features:\n",
      "filename: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp\n",
      "id_column: HYDROID\n",
      "include_ids: [600059060]\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.02s\n",
      "reading data from /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.02s\n",
      "wrote original/plsnt_lgr_inset_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr4.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr0.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr1.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr2.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr3.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr4.dat, took 0.00s\n",
      "setting up lakebed leakance zones...\n",
      "finished in 0.01s\n",
      "wrote original/plsnt_lgr_inset_lakzones.dat, took 0.00s\n",
      "setting up tabfiles...\n",
      "\n",
      "arguments to TabularSourceData:\n",
      "length_units: meters\n",
      "id_column: hydroid\n",
      "column_mappings: {'volume_m3': 'volume'}\n",
      "filenames: {0: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/area_stage_vol_Pleasant.csv'}\n",
      "\n",
      "arguments to TabularSourceData:\n",
      "wrote ./external/600059060_stage_area_volume.dat\n",
      "\n",
      "arguments to PrismSourceData:\n",
      "filenames: {600059060: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/PRISM_ppt_tmean_stable_4km_189501_201901_43.9850_-89.5522.csv'}\n",
      "period_stats: {0: ['mean', '2012-01-01', '2018-12-31'], 1: 'mean'}\n",
      "\n",
      "arguments to PrismSourceData:\n",
      "dest_model: plsnt_lgr_inset model:\n",
      "5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
      "Parent model: ./plsnt_lgr_parent\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
      "Grid spacing: 40.00 meters\n",
      "Packages: dis ic npf sto rcha oc sfr_0\n",
      "\n",
      "arguments to ModflowGwflak:\n",
      "connectiondata: [[0, 0, (3, 36, 53), 'vertical', 0.025, 0.0, 0.0, 0.0, 0.0] ... [0, 754, (4, 32, 38), 'horizontal', 0.025, 195.25, 280.67, 40.0, 40.0]]\n",
      "save_flows: True\n",
      "boundnames: True\n",
      "surfdep: 0.1\n",
      "time_conversion: 86400.0\n",
      "length_conversion: 1.0\n",
      "nlakes: 1\n",
      "noutlets: 0\n",
      "packagedata: [[0, 298.38, 755, 'lake1']]\n",
      "ntables: 1\n",
      "tables: [(0, './external/600059060_stage_area_volume.dat', 'junk', 'junk')]\n",
      "outlets: None\n",
      "perioddata: {0: [[0, 'rainfall', 0.0026829936043197404],\n",
      "     [0, 'evaporation', 0.0006298262025336206], [0, 'runoff', 0.0],\n",
      "     [0, 'withdrawal', 0.0]],\n",
      " 1: [[0, 'rainfall', 0.0006472903225806452],\n",
      "     [0, 'evaporation', 0.0002576362885573776], [0, 'runoff', 0.0],\n",
      "     [0, 'withdrawal', 0.0]],\n",
      " 2: [[0, 'rainfall', 0.0008758620689655173],\n",
      "     [0, 'evaporation', 0.0004085819980228165], [0, 'runoff', 0.0],\n",
      "     [0, 'withdrawal', 0.0]],\n",
      " 3: [[0, 'rainfall', 0.002425290322580645],\n",
      "     [0, 'evaporation', 0.0011436341364568883], [0, 'runoff', 0.0],\n",
      "     [0, 'withdrawal', 0.0]],\n",
      " 4: [[0, 'rainfall', 0.0030564666666666666],\n",
      "     [0, 'evaporation', 0.0013827463730816112], [0, 'runoff', 0.0],\n",
      "     [0, 'withdrawal', 0.0]],\n",
      " 5: [[0, 'rainfall', 0.005743677419354838],\n",
      "     [0, 'evaporation', 0.0028871244926997044], [0, 'runoff', 0.0],\n",
      "     [0, 'withdrawal', 0.0]],\n",
      " 6: [[0, 'rainfall', 0.0014816666666666665],\n",
      "     [0, 'evaporation', 0.004020965243130107], [0, 'runoff', 0.0],\n",
      "     [0, 'withdrawal', 0.0]],\n",
      " 7: [[0, 'rainfall', 0.0003769032258064516],\n",
      "     [0, 'evaporation', 0.005004471438241819], [0, 'runoff', 0.0],\n",
      "     [0, 'withdrawal', 0.0]],\n",
      " 8: [[0, 'rainfall', 0.002318774193548387],\n",
      "     [0, 'evaporation', 0.003269811775826732], [0, 'runoff', 0.0],\n",
      "     [0, 'withdrawal', 0.0]],\n",
      " 9: [[0, 'rainfall', 0.0008636000000000001],\n",
      "     [0, 'evaporation', 0.0018495745973831075], [0, 'runoff', 0.0],\n",
      "     [0, 'withdrawal', 0.0]],\n",
      " 10: [[0, 'rainfall', 0.004563806451612903],\n",
      "      [0, 'evaporation', 0.0008984485130861423], [0, 'runoff', 0.0],\n",
      "      [0, 'withdrawal', 0.0]],\n",
      " 11: [[0, 'rainfall', 0.0011345333333333334],\n",
      "      [0, 'evaporation', 0.00045804724944191835], [0, 'runoff', 0.0],\n",
      "      [0, 'withdrawal', 0.0]],\n",
      " 12: [[0, 'rainfall', 0.0016223225806451611],\n",
      "      [0, 'evaporation', 0.0002789859599701167], [0, 'runoff', 0.0],\n",
      "      [0, 'withdrawal', 0.0]]}\n",
      "observations: {'digits': 10,\n",
      " 'lake1.obs.csv': [('stage', 'stage', 'lake1'), ('inflow', 'inflow', 'lake1'),\n",
      "                   ('rainfall', 'rainfall', 'lake1'),\n",
      "                   ('runoff', 'runoff', 'lake1'), ('lak', 'lak', 'lake1'),\n",
      "                   ('withdrawal', 'withdrawal', 'lake1'),\n",
      "                   ('evaporation', 'evaporation', 'lake1'),\n",
      "                   ('storage', 'storage', 'lake1'),\n",
      "                   ('volume', 'volume', 'lake1'),\n",
      "                   ('surface-area', 'surface-area', 'lake1'),\n",
      "                   ('wetted-area', 'wetted-area', 'lake1'),\n",
      "                   ('conductance', 'conductance', 'lake1')]}\n",
      "finished in 0.40s\n",
      "\n",
      "\n",
      "Setting up WEL package...\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/csls_sources_wu_pts.shp...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "intersecting wells with model grid...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "took 0.00s\n",
      "\n",
      "computing cell thicknesses...\n",
      "finished in 0.15s\n",
      "\n",
      "\n",
      "reading /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/shps/csls_sources_wu_pts.shp...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "intersecting wells with model grid...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "took 0.00s\n",
      "\n",
      "computing cell thicknesses...\n",
      "finished in 0.16s\n",
      "\n",
      "\n",
      "Resampling pumping rates in /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/master_wu.csv to model stress periods...\n",
      "    wells with no data for a stress period will be assigned 0.0 pumping rates.\n",
      "took 0.01s\n",
      "\n",
      "\n",
      "arguments to ModflowGwfwel:\n",
      "stress_period_data: {0: {'filename': './external/plsnt_lgr_inset_wel_000.dat'},\n",
      " 1: {'filename': './external/plsnt_lgr_inset_wel_001.dat'},\n",
      " 2: {'filename': './external/plsnt_lgr_inset_wel_002.dat'},\n",
      " 3: {'filename': './external/plsnt_lgr_inset_wel_003.dat'},\n",
      " 4: {'filename': './external/plsnt_lgr_inset_wel_004.dat'},\n",
      " 5: {'filename': './external/plsnt_lgr_inset_wel_005.dat'},\n",
      " 6: {'filename': './external/plsnt_lgr_inset_wel_006.dat'},\n",
      " 7: {'filename': './external/plsnt_lgr_inset_wel_007.dat'},\n",
      " 8: {'filename': './external/plsnt_lgr_inset_wel_008.dat'},\n",
      " 9: {'filename': './external/plsnt_lgr_inset_wel_009.dat'},\n",
      " 10: {'filename': './external/plsnt_lgr_inset_wel_010.dat'},\n",
      " 11: {'filename': './external/plsnt_lgr_inset_wel_011.dat'},\n",
      " 12: {'filename': './external/plsnt_lgr_inset_wel_012.dat'}}\n",
      "print_input: True\n",
      "print_flows: True\n",
      "save_flows: True\n",
      "boundnames: True\n",
      "finished in 0.54s\n",
      "\n",
      "\n",
      "Setting up OBS package...\n",
      "Reading observation files...\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/nwis_heads_info_file.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/lake_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/wdnr_gw_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/uwsp_heads.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsnme\n",
      "    observation label column: obsnme\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/tables/wgnhs_head_targets.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: common_name\n",
      "    observation label column: common_name\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "\n",
      "Culling observations to model area...\n",
      "Dropping head observations that coincide with Lake Package Lakes...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "Dropping head observations specified in /home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "\n",
      "arguments to ModflowUtlobs:\n",
      "digits: 10\n",
      "print_input: True\n",
      "continuous: {'plsnt_lgr_inset.head.obs': rec.array([('00400037_uwsp', 'HEAD', (0, 5, 6)), ...,\n",
      "           ('yq987', 'HEAD', (4, 28, 41))],\n",
      "          dtype=[('obsname', 'O'), ('obstype', 'O'), ('id', 'O')])}\n",
      "finished in 0.06s\n",
      "\n",
      "\n",
      "Setting up the simulation water mover package...\n",
      "\n",
      "arguments to ModflowGwfmvr:\n",
      "print_flows: True\n",
      "modelnames: True\n",
      "maxmvr: 2\n",
      "maxpackages: 2\n",
      "packages: [('plsnt_lgr_parent', 'sfr_0'), ('plsnt_lgr_inset', 'sfr_0')]\n",
      "perioddata: {0: [['plsnt_lgr_inset', 'sfr_0', 22, 'plsnt_lgr_parent', 'sfr_0', 7, 'factor',\n",
      "      1.0],\n",
      "     ['plsnt_lgr_inset', 'sfr_0', 24, 'plsnt_lgr_parent', 'sfr_0', 0, 'factor',\n",
      "      1.0]]}\n",
      "finished in 0.01s\n",
      "\n",
      "\n",
      "arguments to ModflowGwfgwf:\n",
      "exgtype: gwf6-gwf6\n",
      "exgmnamea: plsnt_lgr_parent\n",
      "exgmnameb: plsnt_lgr_inset\n",
      "nexg: 1276\n",
      "auxiliary: [('angldegx', 'cdist')]\n",
      "exchangedata: [[(0, 7, 6), (0, 0, 0), 1, 100.0, 20.0, 40.0, 0.0, 144.22205101855957] ... [(4, 21, 22), (4, 69, 79), 1, 100.0, 20.0, 40.0, 90.0, 144.22205101855957]]\n",
      "mvr_filerecord: pleasant_lgr.mvr\n",
      "finished setting up model in 10.89s\n",
      "\n",
      "plsnt_lgr_parent model:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages: dis ic npf sto rcha oc sfr_0 wel_0 obs_0 chd_0\n"
     ]
    }
   ],
   "source": [
    "m = MF6model.setup_from_yaml('pleasant_lgr_parent.yml')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "plsnt_lgr_parent model:\n",
       "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
       "Parent model: /home/travis/build/aleaf/modflow-setup/examples/data/pleasant/pleasant\n",
       "CRS: epsg:3070\n",
       "(epsg: 3070)\n",
       "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
       "Grid spacing: 200.00 meters\n",
       "Packages: dis ic npf sto rcha oc sfr_0 wel_0 obs_0 chd_0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['simulation', 'model', 'parent', 'intermediate_data', 'postprocessing', 'setup_grid', 'dis', 'tdis', 'ic', 'npf', 'sto', 'rch', 'sfr', 'lak', 'mvr', 'riv', 'wel', 'chd', 'oc', 'obs', 'ims', 'filename', 'ghb', 'maw', 'external_files', 'grid', 'perimeter_boundary'])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.cfg.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "defaultdict(dict,\n",
       "            {'options': {'length_units': 'meters'},\n",
       "             'dimensions': {'nlay': 5},\n",
       "             'griddata': {'top': [{'filename': './external/plsnt_lgr_parent_top.dat'}],\n",
       "              'botm': [{'filename': './external/plsnt_lgr_parent_botm0.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm1.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm2.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm3.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm4.dat'}],\n",
       "              'idomain': [{'filename': './external/plsnt_lgr_parent_idomain0.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain1.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain2.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain3.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain4.dat'}]},\n",
       "             'top_filename_fmt': 'top.dat',\n",
       "             'botm_filename_fmt': 'botm{:d}.dat',\n",
       "             'idomain_filename_fmt': 'idomain{:d}.dat',\n",
       "             'minimum_layer_thickness': 1,\n",
       "             'drop_thin_cells': True,\n",
       "             'remake_top': True,\n",
       "             'source_data': {'top': {'filename': '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif',\n",
       "               'elevation_units': 'meters'},\n",
       "              'botm': {'filenames': {1: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif',\n",
       "                2: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif',\n",
       "                3: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif',\n",
       "                4: '/home/travis/build/aleaf/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif'}}},\n",
       "             'nlay': 4})"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.cfg['dis']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'plsnt_lgr_inset': plsnt_lgr_inset model:\n",
       " 5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
       " Parent model: ./plsnt_lgr_parent\n",
       " CRS: epsg:3070\n",
       " (epsg: 3070)\n",
       " Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
       " Grid spacing: 40.00 meters\n",
       " Packages: dis ic npf sto rcha oc sfr_0 lak_0 obs_0 wel_0 obs_1}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.inset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7f0fa11bc0a0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "inset = m.inset['plsnt_lgr_inset']\n",
    "\n",
    "l, r, b, t = m.modelgrid.extent\n",
    "layer = 0\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 10))\n",
    "parent_mv = flopy.plot.PlotMapView(model=m, ax=ax, layer=layer)\n",
    "inset_mv = flopy.plot.PlotMapView(model=inset, ax=ax, layer=layer)\n",
    "\n",
    "vconn = inset.lak.connectiondata.array[inset.lak.connectiondata.array['claktype'] == 'vertical']\n",
    "k, i, j = cellids_to_kij(vconn['cellid'])\n",
    "lakeconnections = np.zeros((inset.nrow, inset.ncol))\n",
    "lakeconnections[i, j] = np.array(k)\n",
    "lakeconnections = np.ma.masked_array(lakeconnections, mask=lakeconnections == 0)\n",
    "qmi = inset_mv.plot_array(lakeconnections)\n",
    "\n",
    "#inset_mv.plot_bc('LAK', color='navy')\n",
    "#parent_mv.plot_bc('WEL_0', color='red')\n",
    "\n",
    "lcp = parent_mv.plot_grid(lw=0.5, ax=ax)\n",
    "lci = inset_mv.plot_grid(lw=0.5)\n",
    "ax.set_ylim(b, t)\n",
    "ax.set_xlim(l, r)\n",
    "ax.set_aspect(1)\n",
    "plt.colorbar(qmi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing simulation...\n",
      "  writing simulation name file...\n",
      "  writing simulation tdis package...\n",
      "  writing ims package ims_-1...\n",
      "  writing mvr package pleasant_lgr.mvr...\n",
      "  writing package pleasant_lgr.gwfgwf...\n",
      "  writing model plsnt_lgr_parent...\n",
      "    writing model name file...\n",
      "    writing package dis...\n",
      "    writing package ic...\n",
      "    writing package npf...\n",
      "    writing package sto...\n",
      "    writing package rcha...\n",
      "    writing package oc...\n",
      "    writing package sfr_0...\n",
      "    writing package wel_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'wel', 'dimensions') changed to 2 based on size of stress_period_data\n",
      "    writing package obs_0...\n",
      "    writing package chd_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'chd', 'dimensions') changed to 235 based on size of stress_period_data\n",
      "  writing model plsnt_lgr_inset...\n",
      "    writing model name file...\n",
      "    writing package dis...\n",
      "    writing package ic...\n",
      "    writing package npf...\n",
      "    writing package sto...\n",
      "    writing package rcha...\n",
      "    writing package oc...\n",
      "    writing package sfr_0...\n",
      "    writing package lak_0...\n",
      "    writing package obs_0...\n",
      "    writing package wel_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'wel', 'dimensions') changed to 2 based on size of stress_period_data\n",
      "    writing package obs_1...\n"
     ]
    }
   ],
   "source": [
    "m.write_input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "passed.\n",
      "\n",
      "Checking for continuity in segment and reach numbering...\n",
      "passed.\n",
      "\n",
      "Checking for increasing segment numbers in downstream direction...\n",
      "passed.\n",
      "\n",
      "Checking for circular routing...\n",
      "passed.\n",
      "\n",
      "No DIS package or SpatialReference object; cannot check reach proximities.\n",
      "\n",
      "Checking for model cells with multiple non-zero SFR conductances...\n",
      "passed.\n",
      "\n",
      "Checking for streambed tops of less than -10...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking for streambed tops of greater than 15000...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking segment_data for downstream rises in streambed elevation...\n",
      "Segment elevup and elevdn not specified for nstrm=-10 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking reach_data for downstream rises in streambed elevation...\n",
      "2 reaches encountered with strtop < strtop of downstream reach.\n",
      "Elevation rises:\n",
      "k i j iseg ireach strtop strtopdn d_strtop reachID diff\n",
      "4 21 17 2 1 290.278564453125 294.37811279296875 4.09954833984375 4 -4.09954833984375\n",
      "4 21 18 2 2 290.278564453125 293.09417724609375 2.81561279296875 5 -2.81561279296875\n",
      "\n",
      "\n",
      "Checking reach_data for inconsistencies between streambed elevations and the model grid...\n",
      "passed.\n",
      "\n",
      "Checking segment_data for inconsistencies between segment end elevations and the model grid...\n",
      "Segment elevup and elevdn not specified for nstrm=-10 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of less than 0.0001...\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of greater than 1.0...\n",
      "passed.\n",
      "\n",
      "wrote plsnt_lgr_parent_SFR.chk\n",
      "wrote ./plsnt_lgr_parent.sfr.obs\n",
      "converting reach and segment data to package data...\n",
      "wrote ./plsnt_lgr_parent.sfr\n",
      "passed.\n",
      "\n",
      "Checking for continuity in segment and reach numbering...\n",
      "passed.\n",
      "\n",
      "Checking for increasing segment numbers in downstream direction...\n",
      "passed.\n",
      "\n",
      "Checking for circular routing...\n",
      "passed.\n",
      "\n",
      "No DIS package or SpatialReference object; cannot check reach proximities.\n",
      "\n",
      "Checking for model cells with multiple non-zero SFR conductances...\n",
      "1 model cells with multiple non-zero SFR conductances found.\n",
      "This may lead to circular routing between collocated reaches.\n",
      "Nodes with overlapping conductances:\n",
      "k\ti\tj\tiseg\tireach\trchlen\tstrthick\tstrhc1\n",
      "0\t27\t71\t1\t12\t13.225701332092285\t1.0\t1.0\n",
      "0\t27\t71\t1\t13\t26.684703826904297\t1.0\t1.0\n",
      "\n",
      "Checking for streambed tops of less than -10...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking for streambed tops of greater than 15000...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking segment_data for downstream rises in streambed elevation...\n",
      "Segment elevup and elevdn not specified for nstrm=-25 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking reach_data for downstream rises in streambed elevation...\n",
      "passed.\n",
      "\n",
      "Checking reach_data for inconsistencies between streambed elevations and the model grid...\n",
      "passed.\n",
      "\n",
      "Checking segment_data for inconsistencies between segment end elevations and the model grid...\n",
      "Segment elevup and elevdn not specified for nstrm=-25 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of less than 0.0001...\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of greater than 1.0...\n",
      "passed.\n",
      "\n",
      "wrote plsnt_lgr_inset_SFR.chk\n",
      "converting reach and segment data to package data...\n",
      "wrote ./plsnt_lgr_inset.sfr\n"
     ]
    }
   ],
   "source": [
    "# write the SFR package again using SFRmaker,\n",
    "# because flopy doesn't check the packagedata against the idomain before writing\n",
    "for model in m, m.inset['plsnt_lgr_inset']:\n",
    "    if hasattr(model, 'sfr'):\n",
    "        sfr_package_filename = os.path.join(model.model_ws, model.sfr.filename)\n",
    "        model.sfrdata.write_package(sfr_package_filename,\n",
    "                                    idomain=model.dis.idomain.array,\n",
    "                                    version='mf6',\n",
    "                                    options=['save_flows',\n",
    "                                             'BUDGET FILEOUT {}.sfr.cbc'.format(model.name),\n",
    "                                             'STAGE FILEOUT {}.sfr.stage.bin'.format(model.name),\n",
    "                                             'mover'\n",
    "                                               ]\n",
    "                                    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FloPy is using the following  executable to run the model: /home/travis/build/aleaf/modflow-setup/bin/linux/mf6\n",
      "                                   MODFLOW 6\n",
      "                U.S. GEOLOGICAL SURVEY MODULAR HYDROLOGIC MODEL\n",
      "                            VERSION 6.1.0 12/12/2019\n",
      "\n",
      "   MODFLOW 6 compiled Dec 13 2019 11:34:14 with IFORT compiler (ver. 18.0.3)\n",
      "\n",
      "This software has been approved for release by the U.S. Geological \n",
      "Survey (USGS). Although the software has been subjected to rigorous \n",
      "review, the USGS reserves the right to update the software as needed \n",
      "pursuant to further analysis and review. No warranty, expressed or \n",
      "implied, is made by the USGS or the U.S. Government as to the \n",
      "functionality of the software and related material nor shall the \n",
      "fact of release constitute any such warranty. Furthermore, the \n",
      "software is released on condition that neither the USGS nor the U.S. \n",
      "Government shall be held liable for any damages resulting from its \n",
      "authorized or unauthorized use. Also refer to the USGS Water \n",
      "Resources Software User Rights Notice for complete use, copyright, \n",
      "and distribution information.\n",
      "\n",
      " Run start date and time (yyyy/mm/dd hh:mm:ss): 2020/08/07 20:22:23\n",
      "\n",
      " Writing simulation list file: mfsim.lst\n",
      " Using Simulation name file: mfsim.nam\n",
      " Solving:  Stress period:     1    Time step:     1\n",
      " Solving:  Stress period:     2    Time step:     1\n",
      " Solving:  Stress period:     3    Time step:     1\n",
      " Solving:  Stress period:     4    Time step:     1\n",
      " Solving:  Stress period:     5    Time step:     1\n",
      " Solving:  Stress period:     6    Time step:     1\n",
      " Solving:  Stress period:     7    Time step:     1\n",
      " Solving:  Stress period:     8    Time step:     1\n",
      " Solving:  Stress period:     9    Time step:     1\n",
      " Solving:  Stress period:    10    Time step:     1\n",
      " Solving:  Stress period:    11    Time step:     1\n",
      " Solving:  Stress period:    12    Time step:     1\n",
      " Solving:  Stress period:    13    Time step:     1\n",
      " Run end date and time (yyyy/mm/dd hh:mm:ss): 2020/08/07 20:22:28\n",
      " Elapsed run time:  4.219 Seconds\n",
      "\n",
      " Normal termination of simulation.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(True, [])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.simulation.run_simulation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/travis/build/aleaf/modflow-setup/examples/pleasant_lgr'"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "tmr_parent_headsobj = bf.HeadFile('../data/pleasant/pleasant.hds')\n",
    "lgr_parent_headsobj = bf.HeadFile('plsnt_lgr_parent.hds')\n",
    "lgr_inset_headsobj = bf.HeadFile('plsnt_lgr_inset.hds')\n",
    "\n",
    "tmr_parent_hds = tmr_parent_headsobj.get_data(kstpkper=(4, 12))\n",
    "lgr_parent_hds = lgr_parent_headsobj.get_data(kstpkper=(0, 12))\n",
    "lgr_inset_hds = lgr_inset_headsobj.get_data(kstpkper=(0, 12))\n",
    "\n",
    "lgr_parent_hds = np.ma.masked_array(lgr_parent_hds, mask=lgr_parent_hds == 1e30)\n",
    "lgr_inset_hds = np.ma.masked_array(lgr_inset_hds, mask=lgr_inset_hds == 1e30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "layer = 0\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 10))\n",
    "parent_mv = flopy.plot.PlotMapView(model=m, ax=ax, layer=layer)\n",
    "inset_mv = flopy.plot.PlotMapView(model=inset, ax=ax, layer=layer)\n",
    "\n",
    "pctr = parent_mv.contour_array(lgr_parent_hds, levels=np.arange(290, 315))\n",
    "ictr = inset_mv.contour_array(lgr_inset_hds, levels=np.arange(290, 315))\n",
    "#qmp = parent_mv.plot_array(lgr_parent_hds)\n",
    "#qmi = inset_mv.plot_array(lgr_inset_hds)\n",
    "\n",
    "lcp = parent_mv.plot_grid(lw=0.5, ax=ax)\n",
    "lci = inset_mv.plot_grid(lw=0.5)\n",
    "ax.set_ylim(b, t)\n",
    "ax.set_xlim(l, r)\n",
    "ax.set_aspect(1)\n",
    "#plt.colorbar(qmp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "creating postproc/plsnt_lgr_parent/pdfs...\n",
      "creating postproc/plsnt_lgr_parent/shps...\n",
      "creating postproc/plsnt_lgr_parent/rasters...\n",
      "\n",
      "dis package...\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay4.tif\n",
      "top:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/top.tif\n",
      "botm:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay4.tif\n",
      "idomain:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay4.tif\n",
      "\n",
      "ic package...\n",
      "strt:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay4.tif\n",
      "\n",
      "npf package...\n",
      "icelltype:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay4.tif\n",
      "k:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay4.tif\n",
      "k33:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay4.tif\n",
      "\n",
      "sto package...\n",
      "iconvert:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay4.tif\n",
      "ss:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay4.tif\n",
      "sy:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay4.tif\n",
      "\n",
      "rcha package...\n",
      "irch:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per4.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per5.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per6.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per7.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per8.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per9.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per10.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per11.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per12.tif\n",
      "recharge:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per4.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per5.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per6.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per7.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per8.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per9.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per10.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per11.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per12.tif\n",
      "\n",
      "sfr_0 package...\n",
      "\n",
      "wel_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/wel0_stress_period_data.shp...\n",
      "q:\n",
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/obs0_stress_period_data.shp...\n",
      "\n",
      "chd_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/chd0_stress_period_data.shp...\n",
      "head:\n",
      "creating postproc/plsnt_lgr_inset/pdfs...\n",
      "creating postproc/plsnt_lgr_inset/shps...\n",
      "creating postproc/plsnt_lgr_inset/rasters...\n",
      "\n",
      "dis package...\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay4.tif\n",
      "top:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/top.tif\n",
      "botm:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay4.tif\n",
      "idomain:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay4.tif\n",
      "\n",
      "ic package...\n",
      "strt:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay4.tif\n",
      "\n",
      "npf package...\n",
      "icelltype:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay4.tif\n",
      "k:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay4.tif\n",
      "k33:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay4.tif\n",
      "\n",
      "sto package...\n",
      "iconvert:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay4.tif\n",
      "ss:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay4.tif\n",
      "sy:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay4.tif\n",
      "\n",
      "rcha package...\n",
      "irch:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per4.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per5.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per6.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per7.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per8.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per9.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per10.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per11.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per12.tif\n",
      "recharge:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per4.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per5.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per6.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per7.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per8.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per9.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per10.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per11.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per12.tif\n",
      "\n",
      "sfr_0 package...\n",
      "\n",
      "lak_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "obs_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "wel_0 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/wel0_stress_period_data.shp...\n",
      "q:\n",
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_1 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/obs1_stress_period_data.shp...\n"
     ]
    }
   ],
   "source": [
    "for model in m, inset:\n",
    "    mfexport.export(model, model.modelgrid, output_path='postproc/{}/'.format(model.name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "summarizing plsnt_lgr_parent input...\n",
      "summarizing plsnt_lgr_inset input...\n",
      "skipped, not implemented yet\n"
     ]
    }
   ],
   "source": [
    "for model in m, inset:\n",
    "    mfexport.summarize(model, output_path='postproc/{}/'.format(model.name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "creating shapely Polygons of grid cells...\n",
      "finished in 0.05s\n",
      "\n",
      "writing postproc/plsnt_lgr_inset/shps/lake_connections.shp...\n"
     ]
    }
   ],
   "source": [
    "outpath='postproc/{}/shps'.format(inset.name)\n",
    "if not os.path.isdir(outpath):\n",
    "    os.makedirs(outpath)\n",
    "connectiondata = pd.DataFrame(inset.lak.connectiondata.array)\n",
    "k, i, j = cellids_to_kij(connectiondata['cellid'])\n",
    "connectiondata['k'] = k\n",
    "connectiondata['i'] = i\n",
    "connectiondata['j'] = j\n",
    "connectiondata.drop('cellid', axis=1, inplace=True)\n",
    "polygons = np.reshape(inset.modelgrid.polygons, (inset.modelgrid.nrow, inset.modelgrid.ncol))\n",
    "connectiondata['geometry'] = polygons[i, j]\n",
    "df2shp(connectiondata, os.path.join(outpath, 'lake_connections.shp'), epsg=3070)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "gis",
   "language": "python",
   "name": "gis"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
