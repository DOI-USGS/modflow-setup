intermediate_data:
  tmpdir: 'original/'

simulation:
  sim_name: 'pleasant_lgr'
  version: 'mf6'
  sim_ws: 'pleasant_lgr/'

model:
  simulation: 'pleasant_lgr'
  modelname: 'plsnt_lgr_parent'
  options:
    print_input: True
    save_flows: True
    newton: True
    newton_under_relaxation: True
  external_path: 'external/'
  perimeter_boundary_type: 'specified head'
  packages: ['dis',
             'ic',
             'npf',
             'oc',
             'sto',
             'rch', # Note: with no recharge block below and default_source_data=True, recharge is regridded from parent model
             'sfr',
             'lak',
             'obs',
             'wel',
             'ims'
  ]

parent:
  # argments to flopy.modflow.Modflow.load for parent model
  namefile: 'pleasant.nam'
  model_ws: 'data/pleasant/'
  version: 'mfnwt'
  # information for modflow-setup
  # note: parent model is geo-located in namfile header
  # (only works if length_units='meters')
  headfile: 'data/pleasant/pleasant.hds'
  hiKlakes_value: 1.e4 # unfortunately python yaml currently requires a dot to parse exp notation as float
  default_source_data: True  # if True, packages and variables that are omitted will be pulled from this model
  copy_stress_periods: 'all'
  inset_layer_mapping:  # mapping between inset and parent model layers
    0: 0  # inset: parent  (inset layers 1 and 0 copied from parent layer 0)
    1: 0
    2: 1
    3: 2
    4: 3
  start_date_time: '2012-01-01'
  length_units: 'meters'
  time_units: 'days'

# parameters for setting up the pfl_nwt grid
# using features in features_file
setup_grid:
  remake: True
  xoff: 553000 # lower left x-coordinate
  yoff: 388000 # lower left y-coordinate
  rotation: 0.
  nrow: 25
  ncol: 25
  dxy: 200 # m
  grid_file: '{}_grid.json' # grid info will be written to this file
  epsg: 3070
  lgr:
    pleasant_lgr_inset:
      filename: 'pleasant_lgr_inset.yml'
      layer_refinement: 1  # number of lgr model layers per parent model layer

dis:
  remake_top: True
  options:
    length_units: 'meters'
  dimensions:
    nlay: 5
  source_data:
    top:
      filename: 'data/pleasant/source_data/rasters/dem40m.tif' # DEM file; path relative to setup script
      elevation_units: 'meters'
    botm:
      filenames:
        1: 'data/pleasant/source_data/rasters/botm0.tif'  # preprocessed surface for parent model layer 0 bottom
        2: 'data/pleasant/source_data/rasters/botm1.tif'  # preprocessed surface for parent model layer 1 bottom
        3: 'data/pleasant/source_data/rasters/botm2.tif'  # preprocessed surface for parent model layer 2 bottom
        4: 'data/pleasant/source_data/rasters/botm3.tif'  # preprocessed surface for parent model layer 3 bottom
  drop_thin_cells: True

tdis:
  options:
    time_units: 'days'
    start_date_time: '2012-01-01'
  perioddata:
    # time discretization info can be specified directly under the perioddata key
    # or in groups of stress periods that are discretized in a similar way
    group 1: # initial steady-state period (steady specified under sto package)
      #perlen: 1 # Specify perlen as an int or list of lengths in model units, or perlen=None and 3 of start_date, end_date, nper and/or freq."
      nper: 1
      nstp: 1
      tsmult: 1
      steady: True  # "steady" can be entered here; otherwise the global entry specified in the sto package is used as the default
      # oc_saverecord: can also be specified by group here; otherwise the global entry specified in the oc package is used as the default
    group 2: # monthly stress periods
      start_date_time: '2012-01-01'  # can be specified by group, otherwise start_date_time for the model (under tdis: options) will be used.
      end_date_time: '2012-12-31'  # end times are specified following pandas slice convention, which includes the specified end date
      freq: '1MS' # same as argument to pandas.date_range; (see "Offset Aliases" at https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases)
      nstp: 1
      tsmult: 1.5
      steady: False

ic:
  source_data:
    strt:
      from_parent:
        binaryfile: 'data/pleasant/pleasant.hds'

npf:
  options:
    save_flows: True
  griddata:
    icelltype: 1 # variable sat. thickness in all layers

sto:
  options:
    save_flows: True
  griddata:
    iconvert: 1  # convertible layers

wel:
  options:
    print_input: True
    print_flows: True
    save_flows: True

sfr:
  options:
    save_flows: True
  source_data:
    flowlines:
      nhdplus_paths: ['data/pleasant/source_data/shps']
    dem:
      filename: 'data/pleasant/source_data/rasters/dem40m.tif'
      elevation_units: 'meters'
  set_streambed_top_elevations_from_dem: True
  output_path:


ims:
  options:
    print_option: 'all'
    complexity: 'moderate'
    'csv_output fileout': 'solver_out.csv'
  nonlinear:
    outer_hclose: 1.e-2
    outer_rclosebnd: 1.e4
    outer_maximum: 200
    under_relaxation:  'dbd'
    under_relaxation_theta: 0.7
    under_relaxation_kappa: 0.1
    under_relaxation_gamma: 0.0
    under_relaxation_momentum: 0.0
    backtracking_number: 0
  linear:
    inner_maximum: 100
    inner_hclose: 1.e-4
    rcloserecord: [0.0001, 'relative_rclose']
    linear_acceleration: 'bicgstab'
    scaling_method: None
    reordering_method: None
    relaxation_factor: 0.0  # either ILU(0) or ILUT preconditioning
    number_orthogonalizations: 0
    preconditioner_levels: 7
    preconditioner_drop_tolerance: 0.001

obs:
  source_data:
    filenames: ['data/pleasant/source_data/tables/nwis_heads_info_file.csv',
                'data/pleasant/source_data/tables/lake_sites.csv',  # some lakes are high-k; obs need to be in hydmod
                'data/pleasant/source_data/tables/wdnr_gw_sites.csv',
                'data/pleasant/source_data/tables/uwsp_heads.csv',
                'data/pleasant/source_data/tables/wgnhs_head_targets.csv'
                     ]
    column_mappings:
      obsname: ['obsprefix', 'obsnme', 'common_name']
  drop_observations: ['10019209_lk'  # pleasant lake; monitored via gage package
  ]
