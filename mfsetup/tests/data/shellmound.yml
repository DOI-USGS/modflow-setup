# Configuration file for shellmound test case
#
# The MF6model.setup_from_yaml reads this in as a python dictionary (via the pyyaml package),
# and attaches it to a newly created MF6model object instance (MF6model is a subclass of flopy.mf6.ModflowGwf).
# For example, the simulation block would become
# cfg['simulation'] = {'sim_name: 'mfsim', 'version': 'mf6': 'sim_ws'}, where cfg is the dictionary
# made from the yaml file.
#
# The blocks below are then used as input to create Flopy object instances or
# as input to other aspects of the MFsetup workflow that work on top of Flopy.
# For example, the model block provides the input to flopy.mf6.ModflowGwf, via
# the __init__ method for MF6model. For clarity, the items in the options block
# are stored in their own dictionary that represents that block in the MODFLOW-6
# name file (as opposed to the flopy.mf6.ModflowGwf signature, which includes them
# as individual default arguments). Some items in the model block do not represent flopy
# input. The relative_external_filepaths item is a flag for MFSetup that instructs it
# to reference external files relative to the model workspace, to avoid broken paths
# when the model is copied to a different location.
#
# In general, within blocks or subblocks that correspond to MODFLOW-6 input,
# variables that correspond to an input variable in flopy.mf6 indicate input
# that will be passed directly to flopy (numbers, lists, external file paths, etc.).
#
# In contrast, 'source_data' subblocks indicate input from general file formats
# (shapefiles, csvs, rasters, etc.) that needs to be mapped to the model space
# and time discretization. The source_data blocks are intended to be general across
# input types. For example- 'filename' indicates a file path (string), regardless
# of the type of file, and 'filenames' indicates a list or dictionary of files that
# map to model layers or stress periods. Items with the '_units' suffix indicate
# the units of the source data, allowing Modflow-setup to convert the values to model units
# accordingly. '_column' Items indicate field names in the source data where the input can be found.

# input for MODFLOW 6 simulation
simulation:
  sim_name: 'mfsim'
  version: 'mf6'
  sim_ws: '../tmp/shellmound'
  options:
    continue: True

# input for MODFLOW 6 model
model:
  simulation: 'shellmound'
  modelname: 'shellmound'
  options:
    print_input: True
    save_flows: True
    newton: True
    newton_under_relaxation: False
  # packages to build
  # (any packages not listed or commented out will not be built,
  #  event if they have an input block below)
  packages: ['dis',
             'ic',
             'npf',
             'oc',
             'sto',
             'rch',
             'sfr',
             'chd',
             'drn',
             'ghb',
             'riv',
             'obs',
             'wel',
             'ims'
  ]
  external_path: 'external/'

# parameters for setting up the horizontal configuration of the grid
# in the context of a coordinate reference system
setup_grid:
  xoff: 501405 # lower left x-coordinate
  yoff: 1175835 # lower left y-coordinate
  rotation: 0.
  epsg: 5070
  # snap model to the National Hydrogeologic Grid
  # (Clark and others, 2018)
  snap_to_NHG: True

# Structured Discretization Package
dis:
  options:
    length_units: 'meters'
  dimensions:
    nlay: 13
    nrow: 30
    ncol: 35
  griddata:
    delr: 1000.
    delc: 1000.
  source_data:
    top:
      filename: 'shellmound/rasters/meras_100m_dem.tif' # DEM file; path relative to setup script
      elevation_units: 'feet'
    botm:
      filenames:
        0: 'shellmound/rasters/vkbg_surf.tif' # Vicksburg-Jackson Group (top)
        1: 'shellmound/rasters/ucaq_surf.tif' # Upper Claiborne aquifer (top)
        2: 'shellmound/rasters/mccu_surf.tif' # Middle Claiborne confining unit (top)
        3: 'shellmound/rasters/mcaq_surf.tif' # Middle Claiborne aquifer (top)
        6: 'shellmound/rasters/lccu_surf.tif' # Lower Claiborne confining unit (top)
        8: 'shellmound/rasters/lcaq_surf.tif' # Lower Claiborne aquifer (top)
        9: 'shellmound/rasters/mwaq_surf.tif' # Middle Wilcox aquifer (top)
        10: 'shellmound/rasters/lwaq_surf.tif' # Lower Wilcox aquifer (top)
        12: 'shellmound/rasters/mdwy_surf.tif' # Midway confining unit (top)
      elevation_units: 'feet'
    idomain:
      filename: 'shellmound/shps/active_area.shp'
  minimum_layer_thickness: 1 # layers less than this thickness are converted to vertical pass-through cells
  drop_thin_cells: True

# Temporal Discretization Package
tdis:
  options:
    time_units: 'days'
    start_date_time: '1998-04-01'
  perioddata:
    # time discretization info can be specified directly under the perioddata key
    # or in groups of stress periods that are discretized in a similar way
    group 1: # initial steady-state period (steady specified under sto package)
      #perlen: 1 # Specify perlen as an int or list of lengths in model units, or perlen=None and 3 of start_date, end_date, nper and/or freq."
      nper: 1
      nstp: 1
      tsmult: 1
      steady: True  # "steady" can be entered here; otherwise the global entry specified in the sto package is used as the default
      # oc_saverecord: can also be specified by group here; otherwise the global entry specified in the oc package is used as the default
    group 2: # single long period for spin-up of pumping
      start_date_time: '1998-04-01'  # can be specified by group, otherwise start_date_time for the model (under tdis: options) will be used.
      end_date_time: '2007-04-01'  # model ends at midnight on this date (2007-03-31 would be the last day simulated)
      nper: 1
      nstp: 10
      tsmult: 1.5
      steady: False
    group 3:
      start_date_time: '2007-04-01'
      end_date_time: '2015-10-01'  # model ends at midnight on this date (2015-09-30 would be the last day simulated)
      freq: '6MS' # same as argument to pandas.date_range; (see "Offset Aliases" at https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases)
      nstp: 5
      tsmult: 1.5
      steady: False

# Initial Conditions Package
# if no starting head values are specified, they are set
# to the model top by default
ic:
  # optional format for writing external files
  # e.g. (strt_001.dat)
  # default is strt_{:03d}.dat
  strt_filename_fmt: "strt_{:03d}.dat"

# Node Property Flow Package
npf:
  options:
    save_flows: True
  griddata:
    icelltype: 1 # variable sat. thickness in all layers
  source_data:
    k:
      filenames:
        0: 'shellmound/rasters/k0.tif' # Vicksburg-Jackson Group
        1: 'shellmound/rasters/k1.tif' # Upper Claiborne aquifer
        2: 'shellmound/rasters/k2.tif' # Middle Claiborne confining unit
        3: 'shellmound/rasters/k3.tif' # Middle Claiborne aquifer
        4: 'shellmound/rasters/k3.tif' # Middle Claiborne aquifer
        5: 'shellmound/rasters/k3.tif' # Middle Claiborne aquifer
        6: 'shellmound/rasters/k4.tif' # Lower Claiborne confining unit
        7: 'shellmound/rasters/k4.tif' # Lower Claiborne confining unit
        8: 'shellmound/rasters/k5.tif' # Lower Claiborne aquifer
        9: 'shellmound/rasters/k6.tif' # Middle Wilcox aquifer
        10: 'shellmound/rasters/k10.tif' # Lower Wilcox aquifer
        11: 'shellmound/rasters/k10.tif' # Lower Wilcox aquifer
        12: 'shellmound/rasters/k12.tif' # Lower Wilcox aquifer
      length_units: 'feet'
    k33:
      filenames:
        0: 'shellmound/rasters/k330.tif' # Vicksburg-Jackson Group
        1: 'shellmound/rasters/k331.tif' # Upper Claiborne aquifer
        2: 'shellmound/rasters/k332.tif' # Middle Claiborne confining unit
        3: 'shellmound/rasters/k333.tif' # Middle Claiborne aquifer
        4: 'shellmound/rasters/k333.tif' # Middle Claiborne aquifer
        5: 'shellmound/rasters/k333.tif' # Middle Claiborne aquifer
        6: 'shellmound/rasters/k334.tif' # Lower Claiborne confining unit
        7: 'shellmound/rasters/k334.tif' # Lower Claiborne confining unit
        8: 'shellmound/rasters/k335.tif' # Lower Claiborne aquifer
        9: 'shellmound/rasters/k336.tif' # Middle Wilcox aquifer
        10: 'shellmound/rasters/k3310.tif' # Lower Wilcox aquifer
        11: 'shellmound/rasters/k3310.tif' # Lower Wilcox aquifer
        12: 'shellmound/rasters/k3312.tif' # Lower Wilcox aquifer
      length_units: 'feet'
  k_filename_fmt: "k_{:03d}.dat"
  k33_filename_fmt: "k33_{:03d}.dat"

# Storage Package
sto:
  options:
    save_flows: True
  griddata:
    iconvert: 1  # convertible layers
    # initial global values for storage
    sy: 0.25
    ss: 1.e-6

# Recharge Package
rch:
  options:
    print_input: True
    print_flows: False
    save_flows: True
    readasarrays: True
  source_data:
    # resample recharge from NetCDF file with time-series of grids
    recharge:
      filename: 'shellmound/net_infiltration__2000-01-01_to_2017-12-31__414_by_394.nc'
      variable: 'net_infiltration'
      length_units: 'inches'
      time_units: 'days'
      crs: 5070
      resample_method: 'linear'
      period_stats:
        # for the first two stress periods
        # apply mean recharge rates for dates below
        0: ['mean', '2000-01-01', '2017-12-31']
        1: ['mean', '2000-01-01', '2017-12-31']
        2: 'mean'  # for periods 2 on, use the mean recharge for that period

# Streamflow Routing Package
# SFR input is created using SFRmaker
# https://github.com/usgs/sfrmaker
sfr:
  options:
    save_flows: True
  source_data:
    flowlines:
      filename: 'shellmound/shps/flowlines.shp'
      id_column: 'COMID'  # arguments to sfrmaker.Lines.from_shapefile
      routing_column: 'tocomid'
      width1_column: 'width1'
      width2_column: 'width2'
      up_elevation_column: 'elevupsmo'
      dn_elevation_column: 'elevdnsmo'
      name_column: 'GNIS_NAME'
      attr_length_units: 'feet'  # units of source data
      attr_height_units: 'feet'  # units of source data
    # specified inflows to SFR network
    inflows:  # see sfrmaker.data.add_to_perioddata for arguments
      filename: 'shellmound/tables/inflows.csv'
      datetime_column: 'datetime'
      line_id_column: 'line_id'
      data_column: 'flow_m3d'  # flows are already in cubic meters/day; can therefore skip unit input
      category_column: 'category'
    observations:  # see sfrmaker.observations.add_observations for arguments
      filename: shellmound/tables/observations.csv
      obstype: [downstream-flow, 'stage']  # modflow-6 observation type
      x_location_column: x  # observation locations, in CRS coordinates
      y_location_column: y
      obsname_column: site_no  # column for naming observations
    # specified runoff
    # that has been reprocessed to units of m3/day per line ID
    runoff:  # see sfrmaker.data.add_to_perioddata for arguments
      filename: 'shellmound/tables/swb_runoff_by_nhdplus_comid_m3d.csv'
      datetime_column: 'time'
      line_id_column: 'comid'
      data_column: 'runoff_m3d'
    # modflow-setup will try to locate the inflows or runoff values
    # using the routing information in the flowlines shapefile
    # however, in some cases an inflow location might be just outside of the flowlines that are provided
    # (for example, if they were clipped to the model grid, or if they are outside of the model bounding box)
    # or a runoff value might be assigned to a line that was culled from the preprocessed flowlines
    # the routing option allows complete routing of the original data to be supplied,
    # so that values associated with missing lines can be assigned to the next existing downstream line
    routing:
      filename: 'shellmound/tables/flowline_routing.csv'
      id_column: 'FROMCOMID'  # arguments to sfrmaker.Lines.from_shapefile
      routing_column: 'TOCOMID'
  sfrmaker_options:
    # the sfrmaker_options: block can include arguments to the Lines.to_sfr method in SFRmaker
    # (see https://doi-usgs.github.io/sfrmaker/api/sfrmaker.lines.html#sfrmaker.lines.Lines.to_sfr)
    # or other options such as set_streambed_top_elevations_from_dem (see pleasant examples)
    # or to_riv (shellmound_tmr example)
    one_reach_per_cell: True #  consolidate SFR reaches to one per i, j location
    add_outlets: [17955371, 17956213]  # add outlets at these line numbers
    minimum_slope: 1.e-5
    to_riv: [18047206] # convert this line and all downstream lines to the RIV package

# Constant Head Package
chd:
  options:
    save_flows: True
  source_data:
    shapefile:
      filename: '../../../mfsetup/tests/data/shellmound/shps/waterbodies.shp'
      id_column: 'COMID' # shapefile attribute field with include_ids:
      include_ids: [18046162] # features used to form the boundary
      boundname_col: 'GNIS_NAME'
    csvfile:
      filename: 'shellmound/tables/chd_heads.csv'
      id_column: 'comid'
      datetime_column: 'start_datetime'
      end_datetime_column: 'end_datetime'
      head_column: 'head'
      length_units: 'feet'
      # how heads will be aggregated to the model stress periods
      period_stats:
          # apply the mean heads across a specified time period
          # for the initial steady state
          # (default of 'mean' uses all times in input data)
          0: ['mean', '2000-01-01', '2017-12-31']
          1: mean  # apply the mean heads for the time period of s.p. 1
          #  the last statistic specified (mean) will also be applied to subsequent periods

# Drain Package
drn:
  options:
    save_flows: True
  source_data:
    shapefile:
      filename: '../../../mfsetup/tests/data/shellmound/shps/waterbodies.shp'
      id_column: 'COMID'
      # Note: to include all features in a shapefile,
      # simply omit the include_ids: key
      # id_column: can also be omitted
      include_ids: [18047154, 18046236]
    elev:
      filename: 'shellmound/rasters/meras_100m_dem.tif'
      elevation_units: 'feet'
    cond: 1.e+3  # in model units

# General Head Boundary Package
ghb:
  options:
    save_flows: True
  source_data:
    shapefile:
      filename: '../../../mfsetup/tests/data/shellmound/shps/waterbodies.shp'
      id_column: 'COMID'
      # Note: to include all features in a shapefile,
      # simply omit the include_ids: key
      include_ids: [18046230]
      # argument to rasterio.features.rasterize
      # if true, all grid cells touching the feature(s)
      # in the shapefile will be assigned BCs, if False
      # only the cells with centers inside the polygon
      # will be included
      all_touched: True
    # Example of mixed boundary condition input, where
    # a shapefile defines the feature extents
    # a csvfile defines transient head values
    # a raster defines static but spatially varying conductance
    csvfile:
      filename: 'shellmound/tables/chd_heads.csv'
      id_column: 'comid'
      datetime_column: 'start_datetime'
      end_datetime_column: 'end_datetime'
      bhead_column: 'head'
      length_units: 'feet'
      # with no period_stats: block, aggregation defaults
      # to 'mean' for each stress period
    cond:
      # note: a single global value could also be specified here,
      # as for the Drain Package
      filename: shellmound/rasters/k330.tif
      length_units: meters
      time_units: days


# River Package
riv:
  options:
    save_flows: True
  source_data:
    shapefile:
      filename: '../../../mfsetup/tests/data/shellmound/shps/waterbodies.shp'
      id_column: 'COMID'
      include_ids: [17953939]
      # option to include feature names from the shapefile
      # as Modflow boundnames
      boundname_col: 'GNIS_NAME'
    stage:
      filename: 'shellmound/rasters/meras_100m_dem.tif'
      elevation_units: 'feet'
      # zonal statistic to use in sampling elevations in above GeoTIFF to grid
      stat: 'min'
    cond: 1.e+3
  mfsetup_options:
    default_rbot_thickness: 1.

# Well Package
wel:
  options:
    print_input: True
    print_flows: True
    save_flows: True
  source_data:
    csvfiles:
      # pumping input from CSV files
      filenames: ['shellmound/tables/1998-2007_avg_pumping_from_meras21_m3.csv',
                  'shellmound/tables/iwum_m3_6M.csv',
                  'shellmound/tables/sp69_pumping_from_meras21_m3.csv']
      # 'x' and 'y' are the default names for x and y location columns
      volume_units: 'meters'
      time_units: 'days'
      data_column: 'flux_m3'
      datetime_column: 'start_datetime'
      # end datetimes only for input data that needs upsampling;
      # see https://aleaf.github.io/modflow-setup/api/mfsetup.tdis.html#mfsetup.tdis.aggregate_dataframe_to_stress_period
      end_datetime_column: 'end_datetime'
      id_column: 'node'
      period_stats:  # how fluxes will be distributed across model stress periods
        0: none  # no wells simulated in initial period
        1: 'mean'  # mean pumping rate for period 1 and subsequent periods
      vertical_flux_distribution:
        across_layers: False  # False to put fluxes in one layer
        # put wells in layer with thickest or most transmissive intersection with well open interval
        distribute_by: 'transmissivity'  # thickness or transmissivity
        minimum_layer_thickness: 10.  # layers must be at 10 length units thick to have a well;
        # (any dropped wells would be recorded in shellmound_dropped_wells.csv)

# Output Control Package
oc:
  head_fileout_fmt: '{}.hds'
  budget_fileout_fmt: '{}.cbc'
  # dictionary input similar to flopy
  saverecord: {0: {head: 'last',
                   budget: 'last'}
  }
  # MODFLOW 6-style text input can also be used
  # e.g.
  # period_options: {0: ['save head last',
  #              'save budget last' ]

obs:
  source_data:
    filenames: ['shellmound/tables/preprocessed_head_obs_info.csv'
    ]
    column_mappings:
      obsname: ['obsprefix']


ims:
  options:
    print_option: 'all'
    complexity: 'moderate'
    'csv_output fileout': 'solver_out.csv'
  nonlinear:
    outer_dvclose: 1.e-1
    outer_maximum: 200
    under_relaxation:  'dbd'
    under_relaxation_theta: 0.7
    under_relaxation_kappa: 0.1
    under_relaxation_gamma: 0.0
    under_relaxation_momentum: 0.0
    backtracking_number: 0
  linear:
    inner_maximum: 100
    inner_dvclose: 1.e-2
    rcloserecord: [0.0001, 'relative_rclose']
    linear_acceleration: 'bicgstab'
    scaling_method: None
    reordering_method: None
    relaxation_factor: 0.0  # either ILU(0) or ILUT preconditioning
    number_orthogonalizations: 0
    preconditioner_levels: 7
    preconditioner_drop_tolerance: 0.001
