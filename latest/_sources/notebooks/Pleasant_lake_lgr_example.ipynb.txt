{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pleasant Lake Example\n",
    "\n",
    "* **[View the configuration file(s)](https://aleaf.github.io/modflow-setup/config-file-gallery.html#pleasant-lake-test-case)** \n",
    "* **[Run this example](https://mybinder.org/v2/gh/aleaf/modflow-setup/develop?urlpath=lab/tree/examples)  on  [Binder](https://mybinder.org/)**\n",
    "\n",
    "#### Model details\n",
    "* MODFLOW-6 model with local grid refinement (LGR)\n",
    "* LGR parent model is itself a Telescopic Mesh Refinment (TMR) inset from a MODFLOW-NWT model\n",
    "* Layer 1 in TMR parent model is subdivided evenly into two layers in LGR model (``botm: from_parent: 0: -0.5``). Other layers mapped explicitly between TMR parent and LGR model.\n",
    "* starting heads from LGR parent model resampled from binary output from the TMR parent\n",
    "* rch, npf, sto, and wel input copied from parent model\n",
    "* SFR package constructed from an NHDPlus v2 dataset (path to NHDPlus files in the same structure as the `downloads from the NHDPlus website`_)\n",
    "* head observations from csv files with different column names\n",
    "* LGR inset extent based on a buffer distance around a feature of interest\n",
    "* LGR inset dis, ic, npf, sto and rch packages copied from LGR parent\n",
    "* WEL package created from custom format\n",
    "* Lake package created from polygon features, bathymetry raster, stage-area-volume file and climate data from `PRISM`_.\n",
    "* Lake package observations set up automatically (output file for each lake)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:47:57.907259Z",
     "iopub.status.busy": "2021-02-03T18:47:57.906659Z",
     "iopub.status.idle": "2021-02-03T18:47:59.150809Z",
     "shell.execute_reply": "2021-02-03T18:47:59.150195Z"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import flopy\n",
    "import flopy.utils.binaryfile as bf\n",
    "from mfsetup import MF6model\n",
    "from mfsetup.discretization import cellids_to_kij\n",
    "from gisutils import df2shp\n",
    "import mfexport\n",
    "\n",
    "wd = os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Just make a model grid\n",
    "Oftentimes at the start of a modeling project, we want to quickly test different grid resolutions and extents before attempting to build the model. We can do this with Modflow-setup by creating a model instance and running the ``setup_grid()`` method. A model grid instance is created from the ``setup_grid:`` block in the configuration file. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:47:59.171811Z",
     "iopub.status.busy": "2021-02-03T18:47:59.161446Z",
     "iopub.status.idle": "2021-02-03T18:48:00.671758Z",
     "shell.execute_reply": "2021-02-03T18:48:00.671227Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "m = MF6model(cfg='pleasant_lgr_parent.yml')\n",
    "m.setup_grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:00.678214Z",
     "iopub.status.busy": "2021-02-03T18:48:00.677600Z",
     "iopub.status.idle": "2021-02-03T18:48:00.681525Z",
     "shell.execute_reply": "2021-02-03T18:48:00.682127Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "xll:552800.0; yll:388200.0; rotation:0.0; proj4_str:epsg:3070; units:meters; lenuni:2"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.modelgrid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:00.686669Z",
     "iopub.status.busy": "2021-02-03T18:48:00.685358Z",
     "iopub.status.idle": "2021-02-03T18:48:00.688205Z",
     "shell.execute_reply": "2021-02-03T18:48:00.687651Z"
    }
   },
   "outputs": [],
   "source": [
    "os.chdir(wd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:00.692155Z",
     "iopub.status.busy": "2021-02-03T18:48:00.691429Z",
     "iopub.status.idle": "2021-02-03T18:48:14.324207Z",
     "shell.execute_reply": "2021-02-03T18:48:14.323490Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loading configuration file pleasant_lgr_parent.yml...\n",
      "\n",
      "Setting up plsnt_lgr_parent model from data in None\n",
      "\n",
      "loading parent model /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/pleasant.nam...\n",
      "finished in 0.14s\n",
      "\n",
      "setting up model grid...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp... Done\n",
      "finished in 0.02s\n",
      "\n",
      "loading configuration file /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "\n",
      "Setting up DIS package...\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif...\n",
      "finished in 0.08s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif...\n",
      "finished in 0.06s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif...\n",
      "finished in 0.05s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif...\n",
      "finished in 0.06s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif...\n",
      "finished in 0.06s\n",
      "loading original/plsnt_lgr_parent_top.dat.original, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_004.dat, took 0.00s\n",
      "(re)setting the idomain array...\n",
      "computing cell thicknesses...\n",
      "finished in 0.04s\n",
      "\n",
      "wrote original/plsnt_lgr_parent_lakarr_000.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_001.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_002.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_003.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_004.dat, took 0.00s\n",
      "loading original/plsnt_lgr_parent_top.dat.original, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.03s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_004.dat, took 0.00s\n",
      "setting up model grid...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp... Done\n",
      "finished in 0.02s\n",
      "\n",
      "loading configuration file /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "finished in 0.55s\n",
      "\n",
      "setting up model grid...\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 552800.0, 388200.0, 557800.0, 393200.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp... Done\n",
      "finished in 0.34s\n",
      "\n",
      "(re)setting the idomain array...\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote original/plsnt_lgr_parent_lakarr_000.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_001.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_002.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_003.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_004.dat, took 0.00s\n",
      "loading original/plsnt_lgr_parent_top.dat.original, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_004.dat, took 0.00s\n",
      "setting up model grid...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp... Done\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "\n",
      "Setting up TDIS package...\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up IMS package...\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up IC package...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_strt_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt_004.dat, took 0.00s\n",
      "finished in 0.10s\n",
      "\n",
      "\n",
      "Setting up NPF package...\n",
      "wrote ./external/plsnt_lgr_parent_k_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k33_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k33_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k33_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k33_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k33_004.dat, took 0.00s\n",
      "finished in 0.18s\n",
      "\n",
      "\n",
      "Setting up STO package...\n",
      "wrote ./external/plsnt_lgr_parent_sy_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss_004.dat, took 0.00s\n",
      "finished in 0.18s\n",
      "\n",
      "\n",
      "Setting up RCH package...\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_005.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_006.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_007.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_008.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_009.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_010.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_011.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_012.dat, took 0.00s\n",
      "finished in 0.04s\n",
      "\n",
      "\n",
      "Setting up OC package...\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up SFR package...\n",
      "\n",
      "loading NHDPlus v2 hydrography data...\n",
      "for basins:\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDSnapshot/Hydrography/NHDFlowline.shp...\n",
      "filtering on bounding box -89.5911225596923, 43.965959882234365, -89.52843935935044, 44.01121639579922...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlowlineVAA.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlow.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/elevslope.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "load finished in 0.11s\n",
      "\n",
      "Getting routing information from NHDPlus Plusflow table...\n",
      "finished in 0.01s\n",
      "\n",
      "\n",
      "SFRmaker version 0.7.0.post13+gb42a513\n",
      "\n",
      "Creating sfr dataset...\n",
      "\n",
      "Creating grid class instance from flopy Grid instance...\n",
      "grid class created in 0.07s\n",
      "\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 625\n",
      "nlay: 1\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "model length units: undefined\n",
      "crs: EPSG:3070\n",
      "bounds: 552800.00, 388200.00, 557800.00, 393200.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr\n",
      "plsnt_lgr_parent model version 0.post218+gfab5624:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages: dis ic npf sto rcha oc\n",
      "Warning: No length units specified in CRS for input LineStrings or length units not recognizeddefaulting to meters.\n",
      "\n",
      "reprojecting hydrography from\n",
      "EPSG:4269\n",
      "to\n",
      "EPSG:3070\n",
      "\n",
      "\n",
      "Culling hydrography to active area...\n",
      "simplification tolerance: 2000.00\n",
      "starting lines: 2\n",
      "remaining lines: 2\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Intersecting 2 flowlines with 625 grid cells...\n",
      "Intersecting 2 features...\n",
      "2\n",
      "finished in 0.00s\n",
      "\n",
      "Setting up reach data... (may take a few minutes for large grids)\n",
      "finished in 0.01s\n",
      "\n",
      "Computing widths...\n",
      "\n",
      "Dropping 0 reaches with length < 10.00 meters...\n",
      "\n",
      "Repairing routing connections...\n",
      "enforcing best segment numbering...\n",
      "\n",
      "Setting up segment data...\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 625\n",
      "nlay: 1\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "model length units: undefined\n",
      "crs: EPSG:3070\n",
      "bounds: 552800.00, 388200.00, 557800.00, 393200.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "\n",
      "Time to create sfr dataset: 0.28s\n",
      "\n",
      "running rasterstats.zonal_stats on buffered LineStrings...\n",
      "finished in 0.03s\n",
      "\n",
      "\n",
      "Smoothing elevations...\n",
      "finished in 0.00s\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_parent_sfr_reach_data.csv\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_parent_sfr_segment_data.csv\n",
      "converting segment data to period data...\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_cells.shp... Done\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_outlets.shp... Done\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_lines.shp... Done\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_routing.shp... Done\n",
      "No period data to export!\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_observations.shp... Done\n",
      "No non-zero values of flow to export!\n",
      "converting reach and segment data to package data...\n",
      "converting segment data to period data...\n",
      "(re)setting the idomain array...\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote original/plsnt_lgr_parent_lakarr_000.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_001.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_002.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_003.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_004.dat, took 0.00s\n",
      "loading original/plsnt_lgr_parent_top.dat.original, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.03s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_004.dat, took 0.00s\n",
      "setting up model grid...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp... Done\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "finished in 1.06s\n",
      "\n",
      "\n",
      "Setting up LAK package...\n",
      "wrote original/plsnt_lgr_parent_lakarr_000.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_001.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_002.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_003.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_004.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_000.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_001.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_002.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_003.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_parent_lakarr_004.dat, took 0.00s\n",
      "lakes_shapefile not specified, or no lakes in model area\n",
      "\n",
      "Setting up WEL package...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "finished in 0.15s\n",
      "\n",
      "\n",
      "Setting up OBS package...\n",
      "Reading observation files...\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/nwis_heads_info_file.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/lake_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/wdnr_gw_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/uwsp_heads.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsnme\n",
      "    observation label column: obsnme\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/wgnhs_head_targets.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: common_name\n",
      "    observation label column: common_name\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "\n",
      "Culling observations to model area...\n",
      "Dropping head observations that coincide with Lake Package Lakes...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "Dropping head observations specified in /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr_parent.yml...\n",
      "finished in 0.07s\n",
      "\n",
      "setting up specified head perimeter boundary with CHD package...\n",
      "finished in 1.21s\n",
      "\n",
      "\n",
      "Setting up DIS package...\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif...\n",
      "finished in 0.08s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif...\n",
      "finished in 0.06s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif...\n",
      "finished in 0.06s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif...\n",
      "finished in 0.06s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif...\n",
      "finished in 0.06s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.25s\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 554200.0, 389000.0, 557400.0, 391800.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "caching data in /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.24s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.24s\n",
      "loading original/plsnt_lgr_inset_top.dat.original, shape=(70, 80), loading original/plsnt_lgr_inset_top.dat.original, shape=(70, 80), took 0.01s\n",
      "computing cell thicknesses...\n",
      "finished in 0.25s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_004.dat, took 0.00s\n",
      "(re)setting the idomain array...\n",
      "computing cell thicknesses...\n",
      "finished in 0.26s\n",
      "\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.24s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.23s\n",
      "wrote original/plsnt_lgr_inset_lakarr_000.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_001.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_002.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_003.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_004.dat, took 0.00s\n",
      "loading original/plsnt_lgr_inset_top.dat.original, shape=(70, 80), took 0.01s\n",
      "computing cell thicknesses...\n",
      "finished in 0.24s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_004.dat, took 0.00s\n",
      "setting up model grid...\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 552800.0, 388200.0, 557800.0, 393200.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp... Done\n",
      "finished in 0.34s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_irch.dat, took 0.00s\n",
      "finished in 3.11s\n",
      "\n",
      "\n",
      "Setting up IC package...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_strt_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_strt_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_strt_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_strt_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_strt_004.dat, took 0.00s\n",
      "finished in 0.07s\n",
      "\n",
      "\n",
      "Setting up NPF package...\n",
      "wrote ./external/plsnt_lgr_inset_k_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k33_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k33_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k33_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k33_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k33_004.dat, took 0.00s\n",
      "finished in 0.14s\n",
      "\n",
      "\n",
      "Setting up STO package...\n",
      "wrote ./external/plsnt_lgr_inset_sy_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_sy_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_sy_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_sy_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_sy_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_ss_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_ss_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_ss_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_ss_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_ss_004.dat, took 0.00s\n",
      "finished in 0.14s\n",
      "\n",
      "\n",
      "Setting up RCH package...\n",
      "wrote ./external/plsnt_lgr_inset_irch.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_005.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_006.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_007.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_008.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_009.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_010.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_011.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_012.dat, took 0.00s\n",
      "finished in 0.12s\n",
      "\n",
      "\n",
      "Setting up OC package...\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up SFR package...\n",
      "\n",
      "loading NHDPlus v2 hydrography data...\n",
      "for basins:\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDSnapshot/Hydrography/NHDFlowline.shp...\n",
      "filtering on bounding box -89.57361941749177, 43.97318294263003, -89.53352803700078, 43.99854796302356...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlowlineVAA.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlow.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/elevslope.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "load finished in 0.11s\n",
      "\n",
      "Getting routing information from NHDPlus Plusflow table...\n",
      "finished in 0.01s\n",
      "\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.25s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.24s\n",
      "\n",
      "SFRmaker version 0.7.0.post13+gb42a513\n",
      "\n",
      "Creating sfr dataset...\n",
      "\n",
      "Creating grid class instance from flopy Grid instance...\n",
      "grid class created in 0.20s\n",
      "\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 5,600\n",
      "nlay: 1\n",
      "nrow: 70\n",
      "ncol: 80\n",
      "model length units: undefined\n",
      "crs: EPSG:3070\n",
      "bounds: 554200.00, 389000.00, 557400.00, 391800.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr\n",
      "plsnt_lgr_inset model version 0.post218+gfab5624:\n",
      "5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
      "Parent model: ./plsnt_lgr_parent\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
      "Grid spacing: 40.00 meters\n",
      "Packages: dis ic npf sto rcha oc\n",
      "Warning: No length units specified in CRS for input LineStrings or length units not recognizeddefaulting to meters.\n",
      "\n",
      "reprojecting hydrography from\n",
      "EPSG:4269\n",
      "to\n",
      "EPSG:3070\n",
      "\n",
      "\n",
      "Culling hydrography to active area...\n",
      "simplification tolerance: 2000.00\n",
      "starting lines: 2\n",
      "remaining lines: 2\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Intersecting 2 flowlines with 5,600 grid cells...\n",
      "Intersecting 2 features...\n",
      "2\n",
      "finished in 0.03s\n",
      "\n",
      "Setting up reach data... (may take a few minutes for large grids)\n",
      "finished in 0.01s\n",
      "\n",
      "Computing widths...\n",
      "\n",
      "Dropping 1 reaches with length < 2.00 meters...\n",
      "\n",
      "Repairing routing connections...\n",
      "enforcing best segment numbering...\n",
      "\n",
      "Setting up segment data...\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 5,600\n",
      "nlay: 1\n",
      "nrow: 70\n",
      "ncol: 80\n",
      "model length units: undefined\n",
      "crs: EPSG:3070\n",
      "bounds: 554200.00, 389000.00, 557400.00, 391800.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "\n",
      "Time to create sfr dataset: 0.47s\n",
      "\n",
      "running rasterstats.zonal_stats on buffered LineStrings...\n",
      "finished in 0.06s\n",
      "\n",
      "\n",
      "Smoothing elevations...\n",
      "finished in 0.00s\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_inset_sfr_reach_data.csv\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_inset_sfr_segment_data.csv\n",
      "converting segment data to period data...\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_cells.shp... Done\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_outlets.shp... Done\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_lines.shp... Done\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_routing.shp... Done\n",
      "No period data to export!\n",
      "No observations to export!\n",
      "No non-zero values of flow to export!\n",
      "converting reach and segment data to package data...\n",
      "converting segment data to period data...\n",
      "(re)setting the idomain array...\n",
      "computing cell thicknesses...\n",
      "finished in 0.23s\n",
      "\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.24s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.24s\n",
      "wrote original/plsnt_lgr_inset_lakarr_000.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_001.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_002.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_003.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_004.dat, took 0.00s\n",
      "loading original/plsnt_lgr_inset_top.dat.original, shape=(70, 80), took 0.01s\n",
      "computing cell thicknesses...\n",
      "finished in 0.24s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_004.dat, took 0.00s\n",
      "setting up model grid...\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 552800.0, 388200.0, 557800.0, 393200.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp... Done\n",
      "finished in 0.34s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_irch.dat, took 0.00s\n",
      "finished in 3.17s\n",
      "\n",
      "\n",
      "Setting up LAK package...\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.24s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.24s\n",
      "wrote original/plsnt_lgr_inset_lakarr_000.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_001.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_002.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_003.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_004.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_000.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_001.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_002.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_003.dat, took 0.00s\n",
      "wrote original/plsnt_lgr_inset_lakarr_004.dat, took 0.00s\n",
      "setting up lakebed leakance zones...\n",
      "finished in 0.02s\n",
      "wrote original/plsnt_lgr_inset_lakzones.dat, took 0.00s\n",
      "setting up tabfiles...\n",
      "wrote ./external/600059060_stage_area_volume.dat\n",
      "finished in 0.94s\n",
      "\n",
      "\n",
      "Setting up WEL package...\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/csls_sources_wu_pts.shp...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "intersecting wells with model grid...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "took 0.00s\n",
      "\n",
      "computing cell thicknesses...\n",
      "finished in 0.23s\n",
      "\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/csls_sources_wu_pts.shp...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "intersecting wells with model grid...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "took 0.00s\n",
      "\n",
      "computing cell thicknesses...\n",
      "finished in 0.24s\n",
      "\n",
      "\n",
      "Resampling pumping rates in /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/master_wu.csv to model stress periods...\n",
      "    wells with no data for a stress period will be assigned 0.0 pumping rates.\n",
      "took 0.02s\n",
      "\n",
      "finished in 0.91s\n",
      "\n",
      "\n",
      "Setting up OBS package...\n",
      "Reading observation files...\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/nwis_heads_info_file.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/lake_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/wdnr_gw_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/uwsp_heads.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsnme\n",
      "    observation label column: obsnme\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/wgnhs_head_targets.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: common_name\n",
      "    observation label column: common_name\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "\n",
      "Culling observations to model area...\n",
      "Dropping head observations that coincide with Lake Package Lakes...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "Dropping head observations specified in /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "finished in 0.10s\n",
      "\n",
      "\n",
      "Setting up the simulation water mover package...\n",
      "finished in 0.01s\n",
      "\n",
      "finished setting up model in 13.58s\n",
      "\n",
      "plsnt_lgr_parent model version 0.post218+gfab5624:\n",
      "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
      "Parent model: /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/pleasant\n",
      "CRS: epsg:3070\n",
      "(epsg: 3070)\n",
      "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
      "Grid spacing: 200.00 meters\n",
      "Packages: dis ic npf sto rcha oc sfr_0 wel_0 obs_0 chd_0\n"
     ]
    }
   ],
   "source": [
    "m = MF6model.setup_from_yaml('pleasant_lgr_parent.yml')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:14.329264Z",
     "iopub.status.busy": "2021-02-03T18:48:14.328682Z",
     "iopub.status.idle": "2021-02-03T18:48:14.334555Z",
     "shell.execute_reply": "2021-02-03T18:48:14.334080Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "plsnt_lgr_parent model version 0.post218+gfab5624:\n",
       "5 layer(s), 25 row(s), 25 column(s), 13 stress period(s)\n",
       "Parent model: /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/pleasant\n",
       "CRS: epsg:3070\n",
       "(epsg: 3070)\n",
       "Bounds: (552800.0, 557800.0, 388200.0, 393200.0)\n",
       "Grid spacing: 200.00 meters\n",
       "Packages: dis ic npf sto rcha oc sfr_0 wel_0 obs_0 chd_0"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:14.338438Z",
     "iopub.status.busy": "2021-02-03T18:48:14.337907Z",
     "iopub.status.idle": "2021-02-03T18:48:14.343636Z",
     "shell.execute_reply": "2021-02-03T18:48:14.343171Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['metadata', 'simulation', 'model', 'parent', 'intermediate_data', 'postprocessing', 'setup_grid', 'dis', 'tdis', 'ic', 'npf', 'sto', 'rch', 'sfr', 'high_k_lakes', 'lak', 'mvr', 'riv', 'wel', 'chd', 'oc', 'obs', 'ims', 'filename', 'ghb', 'maw', 'external_files', 'grid', 'perimeter_boundary'])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.cfg.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:14.348558Z",
     "iopub.status.busy": "2021-02-03T18:48:14.348033Z",
     "iopub.status.idle": "2021-02-03T18:48:14.353933Z",
     "shell.execute_reply": "2021-02-03T18:48:14.353304Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "defaultdict(dict,\n",
       "            {'remake_top': True,\n",
       "             'options': {'length_units': 'meters'},\n",
       "             'dimensions': {'nlay': 5},\n",
       "             'griddata': {'top': [{'filename': './external/plsnt_lgr_parent_top.dat'}],\n",
       "              'botm': [{'filename': './external/plsnt_lgr_parent_botm_000.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_001.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_002.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_003.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_004.dat'}],\n",
       "              'idomain': [{'filename': './external/plsnt_lgr_parent_idomain_000.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_001.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_002.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_003.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_004.dat'}]},\n",
       "             'top_filename_fmt': 'top.dat',\n",
       "             'botm_filename_fmt': 'botm_{:03d}.dat',\n",
       "             'idomain_filename_fmt': 'idomain_{:03d}.dat',\n",
       "             'minimum_layer_thickness': 1,\n",
       "             'drop_thin_cells': True,\n",
       "             'source_data': {'top': {'filename': '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif',\n",
       "               'elevation_units': 'meters'},\n",
       "              'botm': {'filenames': {1: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif',\n",
       "                2: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif',\n",
       "                3: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif',\n",
       "                4: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif'}}},\n",
       "             'nlay': 4})"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.cfg['dis']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:14.357747Z",
     "iopub.status.busy": "2021-02-03T18:48:14.357223Z",
     "iopub.status.idle": "2021-02-03T18:48:14.361920Z",
     "shell.execute_reply": "2021-02-03T18:48:14.361310Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'plsnt_lgr_inset': plsnt_lgr_inset model version 0.post218+gfab5624:\n",
       " 5 layer(s), 70 row(s), 80 column(s), 13 stress period(s)\n",
       " Parent model: ./plsnt_lgr_parent\n",
       " CRS: epsg:3070\n",
       " (epsg: 3070)\n",
       " Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
       " Grid spacing: 40.00 meters\n",
       " Packages: dis ic npf sto rcha oc sfr_0 lak_0 obs_0 wel_0 obs_1}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.inset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:14.389415Z",
     "iopub.status.busy": "2021-02-03T18:48:14.388119Z",
     "iopub.status.idle": "2021-02-03T18:48:14.608531Z",
     "shell.execute_reply": "2021-02-03T18:48:14.608956Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7f75ec4d7760>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "inset = m.inset['plsnt_lgr_inset']\n",
    "\n",
    "l, r, b, t = m.modelgrid.extent\n",
    "layer = 0\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 10))\n",
    "parent_mv = flopy.plot.PlotMapView(model=m, ax=ax, layer=layer)\n",
    "inset_mv = flopy.plot.PlotMapView(model=inset, ax=ax, layer=layer)\n",
    "\n",
    "vconn = inset.lak.connectiondata.array[inset.lak.connectiondata.array['claktype'] == 'vertical']\n",
    "k, i, j = cellids_to_kij(vconn['cellid'])\n",
    "lakeconnections = np.zeros((inset.nrow, inset.ncol))\n",
    "lakeconnections[i, j] = np.array(k)\n",
    "lakeconnections = np.ma.masked_array(lakeconnections, mask=lakeconnections == 0)\n",
    "qmi = inset_mv.plot_array(lakeconnections)\n",
    "\n",
    "#inset_mv.plot_bc('LAK', color='navy')\n",
    "#parent_mv.plot_bc('WEL_0', color='red')\n",
    "\n",
    "lcp = parent_mv.plot_grid(lw=0.5, ax=ax)\n",
    "lci = inset_mv.plot_grid(lw=0.5)\n",
    "ax.set_ylim(b, t)\n",
    "ax.set_xlim(l, r)\n",
    "ax.set_aspect(1)\n",
    "plt.colorbar(qmi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:14.613830Z",
     "iopub.status.busy": "2021-02-03T18:48:14.612383Z",
     "iopub.status.idle": "2021-02-03T18:48:15.123375Z",
     "shell.execute_reply": "2021-02-03T18:48:15.123853Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing simulation...\n",
      "  writing simulation name file...\n",
      "  writing simulation tdis package...\n",
      "  writing ims package ims_-1...\n",
      "  writing mvr package pleasant_lgr.mvr...\n",
      "  writing package pleasant_lgr.gwfgwf...\n",
      "  writing model plsnt_lgr_parent...\n",
      "    writing model name file...\n",
      "    writing package dis...\n",
      "    writing package ic...\n",
      "    writing package npf...\n",
      "    writing package sto...\n",
      "    writing package rcha...\n",
      "    writing package oc...\n",
      "    writing package sfr_0...\n",
      "    writing package wel_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'wel', 'dimensions') changed to 2 based on size of stress_period_data\n",
      "    writing package obs_0...\n",
      "    writing package chd_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'chd', 'dimensions') changed to 235 based on size of stress_period_data\n",
      "  writing model plsnt_lgr_inset...\n",
      "    writing model name file...\n",
      "    writing package dis...\n",
      "    writing package ic...\n",
      "    writing package npf...\n",
      "    writing package sto...\n",
      "    writing package rcha...\n",
      "    writing package oc...\n",
      "    writing package sfr_0...\n",
      "    writing package lak_0...\n",
      "    writing package obs_0...\n",
      "    writing package wel_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'wel', 'dimensions') changed to 2 based on size of stress_period_data\n",
      "    writing package obs_1...\n",
      "SFRmaker v. 0.7.0.post13+gb42a513\n",
      "\n",
      "Running Flopy v. 3.3.3 diagnostics...\n",
      "passed.\n",
      "\n",
      "Checking for continuity in segment and reach numbering...\n",
      "passed.\n",
      "\n",
      "Checking for increasing segment numbers in downstream direction...\n",
      "passed.\n",
      "\n",
      "Checking for circular routing...\n",
      "passed.\n",
      "\n",
      "No DIS package or SpatialReference object; cannot check reach proximities.\n",
      "\n",
      "Checking for model cells with multiple non-zero SFR conductances...\n",
      "passed.\n",
      "\n",
      "Checking for streambed tops of less than -10...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking for streambed tops of greater than 15000...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking segment_data for downstream rises in streambed elevation...\n",
      "Segment elevup and elevdn not specified for nstrm=-10 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking reach_data for downstream rises in streambed elevation...\n",
      "2 reaches encountered with strtop < strtop of downstream reach.\n",
      "Elevation rises:\n",
      "k i j iseg ireach strtop strtopdn d_strtop reachID diff\n",
      "4 21 17 2 1 290.3638610839844 294.76507568359375 4.401214599609375 4 -4.401214599609375\n",
      "4 21 18 2 2 290.3638610839844 293.5867614746094 3.222900390625 5 -3.222900390625\n",
      "\n",
      "\n",
      "Checking reach_data for inconsistencies between streambed elevations and the model grid...\n",
      "passed.\n",
      "\n",
      "Checking segment_data for inconsistencies between segment end elevations and the model grid...\n",
      "Segment elevup and elevdn not specified for nstrm=-10 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of less than 0.0001...\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of greater than 1.0...\n",
      "passed.\n",
      "\n",
      "wrote plsnt_lgr_parent_SFR.chk\n",
      "wrote plsnt_lgr_parent.sfr.obs\n",
      "converting reach and segment data to package data...\n",
      "wrote ./external/plsnt_lgr_parent_packagedata.dat\n",
      "wrote ./plsnt_lgr_parent.sfr\n"
     ]
    }
   ],
   "source": [
    "m.write_input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:15.131993Z",
     "iopub.status.busy": "2021-02-03T18:48:15.127679Z",
     "iopub.status.idle": "2021-02-03T18:48:23.314200Z",
     "shell.execute_reply": "2021-02-03T18:48:23.314689Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FloPy is using the following  executable to run the model: /home/runner/.local/bin/mf6\n",
      "                                   MODFLOW 6\n",
      "                U.S. GEOLOGICAL SURVEY MODULAR HYDROLOGIC MODEL\n",
      "                            VERSION 6.2.0 10/22/2020\n",
      "\n",
      "   MODFLOW 6 compiled Oct 26 2020 11:03:14 with IFORT compiler (ver. 18.0.3)\n",
      "\n",
      "This software has been approved for release by the U.S. Geological \n",
      "Survey (USGS). Although the software has been subjected to rigorous \n",
      "review, the USGS reserves the right to update the software as needed \n",
      "pursuant to further analysis and review. No warranty, expressed or \n",
      "implied, is made by the USGS or the U.S. Government as to the \n",
      "functionality of the software and related material nor shall the \n",
      "fact of release constitute any such warranty. Furthermore, the \n",
      "software is released on condition that neither the USGS nor the U.S. \n",
      "Government shall be held liable for any damages resulting from its \n",
      "authorized or unauthorized use. Also refer to the USGS Water \n",
      "Resources Software User Rights Notice for complete use, copyright, \n",
      "and distribution information.\n",
      "\n",
      " \n",
      " Run start date and time (yyyy/mm/dd hh:mm:ss): 2021/02/03 18:48:15\n",
      " \n",
      " Writing simulation list file: mfsim.lst\n",
      " Using Simulation name file: mfsim.nam\n",
      " \n",
      "    Solving:  Stress period:     1    Time step:     1\n",
      "    Solving:  Stress period:     2    Time step:     1\n",
      "    Solving:  Stress period:     3    Time step:     1\n",
      "    Solving:  Stress period:     4    Time step:     1\n",
      "    Solving:  Stress period:     5    Time step:     1\n",
      "    Solving:  Stress period:     6    Time step:     1\n",
      "    Solving:  Stress period:     7    Time step:     1\n",
      "    Solving:  Stress period:     8    Time step:     1\n",
      "    Solving:  Stress period:     9    Time step:     1\n",
      "    Solving:  Stress period:    10    Time step:     1\n",
      "    Solving:  Stress period:    11    Time step:     1\n",
      "    Solving:  Stress period:    12    Time step:     1\n",
      "    Solving:  Stress period:    13    Time step:     1\n",
      " \n",
      " Run end date and time (yyyy/mm/dd hh:mm:ss): 2021/02/03 18:48:23\n",
      " Elapsed run time:  7.955 Seconds\n",
      " \n",
      " Normal termination of simulation.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(True, [])"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.simulation.run_simulation()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:23.319342Z",
     "iopub.status.busy": "2021-02-03T18:48:23.318683Z",
     "iopub.status.idle": "2021-02-03T18:48:23.324480Z",
     "shell.execute_reply": "2021-02-03T18:48:23.323913Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:23.330469Z",
     "iopub.status.busy": "2021-02-03T18:48:23.329126Z",
     "iopub.status.idle": "2021-02-03T18:48:23.346850Z",
     "shell.execute_reply": "2021-02-03T18:48:23.346083Z"
    }
   },
   "outputs": [],
   "source": [
    "tmr_parent_headsobj = bf.HeadFile('../data/pleasant/pleasant.hds')\n",
    "lgr_parent_headsobj = bf.HeadFile('plsnt_lgr_parent.hds')\n",
    "lgr_inset_headsobj = bf.HeadFile('plsnt_lgr_inset.hds')\n",
    "\n",
    "tmr_parent_hds = tmr_parent_headsobj.get_data(kstpkper=(4, 12))\n",
    "lgr_parent_hds = lgr_parent_headsobj.get_data(kstpkper=(0, 12))\n",
    "lgr_inset_hds = lgr_inset_headsobj.get_data(kstpkper=(0, 12))\n",
    "\n",
    "lgr_parent_hds = np.ma.masked_array(lgr_parent_hds, mask=lgr_parent_hds == 1e30)\n",
    "lgr_inset_hds = np.ma.masked_array(lgr_inset_hds, mask=lgr_inset_hds == 1e30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:23.368235Z",
     "iopub.status.busy": "2021-02-03T18:48:23.367677Z",
     "iopub.status.idle": "2021-02-03T18:48:23.674220Z",
     "shell.execute_reply": "2021-02-03T18:48:23.674858Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "layer = 0\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 10))\n",
    "parent_mv = flopy.plot.PlotMapView(model=m, ax=ax, layer=layer)\n",
    "inset_mv = flopy.plot.PlotMapView(model=inset, ax=ax, layer=layer)\n",
    "\n",
    "pctr = parent_mv.contour_array(lgr_parent_hds, levels=np.arange(290, 315))\n",
    "ictr = inset_mv.contour_array(lgr_inset_hds, levels=np.arange(290, 315))\n",
    "#qmp = parent_mv.plot_array(lgr_parent_hds)\n",
    "#qmi = inset_mv.plot_array(lgr_inset_hds)\n",
    "\n",
    "lcp = parent_mv.plot_grid(lw=0.5, ax=ax)\n",
    "lci = inset_mv.plot_grid(lw=0.5)\n",
    "ax.set_ylim(b, t)\n",
    "ax.set_xlim(l, r)\n",
    "ax.set_aspect(1)\n",
    "#plt.colorbar(qmp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:48:23.678893Z",
     "iopub.status.busy": "2021-02-03T18:48:23.678253Z",
     "iopub.status.idle": "2021-02-03T18:49:05.210186Z",
     "shell.execute_reply": "2021-02-03T18:49:05.209044Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "creating postproc/plsnt_lgr_parent/pdfs...\n",
      "creating postproc/plsnt_lgr_parent/shps...\n",
      "creating postproc/plsnt_lgr_parent/rasters...\n",
      "\n",
      "dis package...\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay4.tif\n",
      "top:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/top.tif\n",
      "botm:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay4.tif\n",
      "idomain:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay4.tif\n",
      "\n",
      "ic package...\n",
      "strt:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay4.tif\n",
      "\n",
      "npf package...\n",
      "icelltype:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay4.tif\n",
      "k:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay4.tif\n",
      "k33:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay4.tif\n",
      "\n",
      "sto package...\n",
      "iconvert:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay4.tif\n",
      "ss:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay4.tif\n",
      "sy:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay4.tif\n",
      "\n",
      "rcha package...\n",
      "irch:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per1.tif\n",
      "recharge:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per4.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per5.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per6.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per7.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per8.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per9.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per10.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per11.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per12.tif\n",
      "\n",
      "sfr_0 package...\n",
      "\n",
      "wel_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/wel0_stress_period_data.shp... Done\n",
      "q:\n",
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/obs0_stress_period_data.shp... Done\n",
      "\n",
      "chd_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/chd0_stress_period_data.shp... Done\n",
      "head:\n",
      "creating postproc/plsnt_lgr_inset/pdfs...\n",
      "creating postproc/plsnt_lgr_inset/shps...\n",
      "creating postproc/plsnt_lgr_inset/rasters...\n",
      "\n",
      "dis package...\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay4.tif\n",
      "top:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/top.tif\n",
      "botm:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay4.tif\n",
      "idomain:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay4.tif\n",
      "\n",
      "ic package...\n",
      "strt:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay4.tif\n",
      "\n",
      "npf package...\n",
      "icelltype:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay4.tif\n",
      "k:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay4.tif\n",
      "k33:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay4.tif\n",
      "\n",
      "sto package...\n",
      "iconvert:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay4.tif\n",
      "ss:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay4.tif\n",
      "sy:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay4.tif\n",
      "\n",
      "rcha package...\n",
      "irch:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per1.tif\n",
      "recharge:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per4.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per5.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per6.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per7.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per8.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per9.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per10.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per11.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per12.tif\n",
      "\n",
      "sfr_0 package...\n",
      "\n",
      "lak_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "obs_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "wel_0 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/wel0_stress_period_data.shp... Done\n",
      "q:\n",
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_1 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/obs1_stress_period_data.shp... Done\n"
     ]
    }
   ],
   "source": [
    "for model in m, inset:\n",
    "    mfexport.export(model, model.modelgrid, output_path='postproc/{}/'.format(model.name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:49:05.216799Z",
     "iopub.status.busy": "2021-02-03T18:49:05.215053Z",
     "iopub.status.idle": "2021-02-03T18:49:06.337749Z",
     "shell.execute_reply": "2021-02-03T18:49:06.338262Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "summarizing plsnt_lgr_parent input...\n",
      "summarizing plsnt_lgr_inset input...\n",
      "skipped, not implemented yet\n"
     ]
    }
   ],
   "source": [
    "for model in m, inset:\n",
    "    mfexport.summarize(model, output_path='postproc/{}/'.format(model.name))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-02-03T18:49:06.348600Z",
     "iopub.status.busy": "2021-02-03T18:49:06.344881Z",
     "iopub.status.idle": "2021-02-03T18:49:06.481926Z",
     "shell.execute_reply": "2021-02-03T18:49:06.482622Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "creating shapely Polygons of grid cells...\n",
      "finished in 0.04s\n",
      "\n",
      "writing postproc/plsnt_lgr_inset/shps/lake_connections.shp... Done\n"
     ]
    }
   ],
   "source": [
    "outpath='postproc/{}/shps'.format(inset.name)\n",
    "if not os.path.isdir(outpath):\n",
    "    os.makedirs(outpath)\n",
    "connectiondata = pd.DataFrame(inset.lak.connectiondata.array)\n",
    "k, i, j = cellids_to_kij(connectiondata['cellid'])\n",
    "connectiondata['k'] = k\n",
    "connectiondata['i'] = i\n",
    "connectiondata['j'] = j\n",
    "connectiondata.drop('cellid', axis=1, inplace=True)\n",
    "polygons = np.reshape(inset.modelgrid.polygons, (inset.modelgrid.nrow, inset.modelgrid.ncol))\n",
    "connectiondata['geometry'] = polygons[i, j]\n",
    "df2shp(connectiondata, os.path.join(outpath, 'lake_connections.shp'), epsg=3070)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "gis",
   "language": "python",
   "name": "gis"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
