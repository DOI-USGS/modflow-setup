{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pleasant Lake Example\n",
    "This example is a simplified version of the Pleasant Lake model published by Fienen et al (2021). The goal of the Pleasant Lake model, part of the Central Sands Lake Study, was to address connections between groundwater abstraction and ecological function of a lake in central Wisconsin, USA (WDNR 2021; Figure 1). This required modeling at multiple scales. Fine discretization was needed near the lake for accurate simulation of water levels and groundwater-lake flux. A large model domain was also needed, to simulate farfield water-use activity (chiefly irrigated agriculture) in order to delineate a limit of connection, as well as to incorporate distant hydrologic boundaries. Adopting a fine enough discretization for the lake detail throughout the farfield would have resulted in a model with more cells than could be practically managed. To mitigate this, three models were combined: a large regional model built with MODFLOW-NWT (Niswonger et al. 2011), an intermediate MODFLOW 6 model inset within the regional model to simulate the irrigated agriculture area, and a refined MODFLOW 6 inset model (nested within the intermediate model) to simulate the lake. Regional groundwater flow and the effects of distant boundaries were simulated with the MODFLOW-NWT model, which was coupled sequentially (one-way) to the MODFLOW 6 models through time-varying specified head boundaries along the intermediate MODFLOW 6 model perimeter. The two MODFLOW 6 models were coupled dynamically (both ways) within the groundwater flow solution, allowing for feedback between the models. Estimates of groundwater recharge for the MODFLOW models were provided by a soil water balance code (SWB; Westenbroek et al 2018) simulation that could consider alternative assumptions of climate and land use. Net infiltration estimates from the SWB model were conveyed to the Recharge Packages in the MODFLOW models using the NetCDF functionality in Modflow-setup. \n",
    "\n",
    "<img src=\"https://github.com/aleaf/modflow-setup/blob/develop/docs/source/_static/fig1_pleasant_lake_model.jpg?raw=true\" align=\"center\">\n",
    "\n",
    "**Figure 1**: The full Pleasant Lake model domain with location map, showing the relationship between the regional, intermediate and LGR inset models, as well as the irrigation wells considered.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Most details of the Fienen et al (2021) model are included here, but to reduce file sizes and execution time, a smaller Modflow-6 simulation domain is used. The smaller domain is for illustration purposes only, and is not intended to be adequate for representing pumping impacts or providing a sufficient distance to the perimeter boundaries.\n",
    "\n",
    "\n",
    "* **[View the configuration file(s)](https://doi-usgs.github.io/modflow-setup/latest/config-file-gallery.html#pleasant-lake-test-case)** \n",
    "* **[Run this example](https://mybinder.org/v2/gh/usgs/modflow-setup/develop?urlpath=lab/tree/examples)  on  [Binder](https://mybinder.org/)**\n",
    "\n",
    "#### Model details\n",
    "* MODFLOW-6 simulation with a dynamically linked parent model and local grid refinement (LGR) inset model\n",
    "* LGR parent model is itself a Telescopic Mesh Refinment (TMR) inset from a regional MODFLOW-NWT model\n",
    "* Layer 1 in the regional model is subdivided evenly into two layers in the LGR models (``botm: from_parent: 0: -0.5``). The other layers are mapped explicitly between the TMR parent and LGR models.\n",
    "* starting heads for the LGR parent models were resampled from the regional model binary output\n",
    "* rch, npf, sto, and wel input copied from the regional model\n",
    "* SFR package constructed from an NHDPlus v2 dataset (path to NHDPlus files in the same structure as the `downloads from the NHDPlus website`_)\n",
    "* head observations from csv files with different column names\n",
    "* LGR inset extent based on a buffer distance around a feature of interest\n",
    "* LGR inset dis, ic, npf, sto and rch packages copied from LGR parent\n",
    "* Lake package created from polygon features, bathymetry raster, stage-area-volume file and climate data from `PRISM`_.\n",
    "* Lake package observations are set up automatically (output file for each lake)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:07.597546Z",
     "iopub.status.busy": "2024-10-17T18:06:07.597385Z",
     "iopub.status.idle": "2024-10-17T18:06:08.843484Z",
     "shell.execute_reply": "2024-10-17T18:06:08.843059Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy.interpolate import griddata\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import patheffects\n",
    "import flopy\n",
    "import flopy.utils.binaryfile as bf\n",
    "from mfsetup import MF6model\n",
    "from mfsetup.discretization import cellids_to_kij\n",
    "from gisutils import df2shp\n",
    "import mfexport\n",
    "from mfexport.utils import get_water_table\n",
    "\n",
    "wd = os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Just make a model grid\n",
    "Oftentimes at the start of a modeling project, we want to quickly test different grid resolutions and extents before attempting to build the model. We can do this with Modflow-setup by creating a model instance and then running the ``setup_grid()`` method. A model grid instance is created from the ``setup_grid:`` block in the configuration file. \n",
    "\n",
    "Note: ``%%capture`` in the block below is just to suppress printing of ``stdout`` for display of this notebook in the modflow-setup documentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:08.845617Z",
     "iopub.status.busy": "2024-10-17T18:06:08.845184Z",
     "iopub.status.idle": "2024-10-17T18:06:09.501563Z",
     "shell.execute_reply": "2024-10-17T18:06:09.501042Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "m = MF6model(cfg='pleasant_lgr_parent.yml')\n",
    "m.setup_grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since this model has local-grid refinement, it actually consists of two models: a parent built from ``pleasant_lgr_parent.yml``, and an inset built from ``pleasant_lgr_inset.yml``, which is referenced within ``pleasant_lgr_parent.yml``. The two sub-models are connected and solved simulataneously within the same MODFLOW 6 simulation. A model grid is made for each sub-model. The model grids are instances of the ``MFsetupGrid`` grid class, a subclass of the Flopy ``StructuredGrid`` class with some added functionality."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:09.503627Z",
     "iopub.status.busy": "2024-10-17T18:06:09.503294Z",
     "iopub.status.idle": "2024-10-17T18:06:09.509200Z",
     "shell.execute_reply": "2024-10-17T18:06:09.508605Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5 layer(s), 25 row(s), 25 column(s)\n",
       "delr: [200.00...200.00] undefined\n",
       "delc: [200.00...200.00] undefined\n",
       "CRS: EPSG:3070\n",
       "length units: meters\n",
       "xll: 553400.0; yll: 387800.0; rotation: 0.0\n",
       "Bounds: (np.float64(553400.0), np.float64(558400.0), np.float64(387800.0), np.float64(392800.0))"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.modelgrid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:09.537000Z",
     "iopub.status.busy": "2024-10-17T18:06:09.536825Z",
     "iopub.status.idle": "2024-10-17T18:06:09.540863Z",
     "shell.execute_reply": "2024-10-17T18:06:09.540482Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "75 row(s), 85 column(s)\n",
       "delr: [40.00...40.00] undefined\n",
       "delc: [40.00...40.00] undefined\n",
       "CRS: EPSG:3070\n",
       "length units: meters\n",
       "xll: 554200.0; yll: 388800.0; rotation: 0\n",
       "Bounds: (np.float64(554200.0), np.float64(557600.0), np.float64(388800.0), np.float64(391800.0))"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.inset['plsnt_lgr_inset'].modelgrid"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Working directory gottcha\n",
    "Currently, to facilitate working with external files in Flopy, **Modflow-setup changes the working directory to the model workspace**. In the context of a flat script that only builds the model, this is fine, but in a notebook or other workflows, this can potentially cause confusion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:09.542495Z",
     "iopub.status.busy": "2024-10-17T18:06:09.542174Z",
     "iopub.status.idle": "2024-10-17T18:06:09.545364Z",
     "shell.execute_reply": "2024-10-17T18:06:09.544973Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Write shapefiles of the inset and parent modelgrids\n",
    "A shapefile of the grid bounding box is written by default on creation of the model grid, to the location specified by ``output_files: grid_file:`` in the ``setup_grid:`` block (default is ``<model workspace>/postproc/shps/``). A shapefile of the grid cells as polygon features can be written as below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:09.546981Z",
     "iopub.status.busy": "2024-10-17T18:06:09.546660Z",
     "iopub.status.idle": "2024-10-17T18:06:10.408628Z",
     "shell.execute_reply": "2024-10-17T18:06:10.408184Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "creating shapely Polygons of grid cells...\n",
      "finished in 0.01s\n",
      "\n",
      "writing postproc/shps/plsnt_lgr_parent_grid.shp... Done\n",
      "creating shapely Polygons of grid cells...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "finished in 0.17s\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing postproc/shps/plsnt_lgr_inset_grid.shp... Done\n"
     ]
    }
   ],
   "source": [
    "m.modelgrid.write_shapefile('postproc/shps/plsnt_lgr_parent_grid.shp')\n",
    "m.inset['plsnt_lgr_inset'].modelgrid.write_shapefile('postproc/shps/plsnt_lgr_inset_grid.shp')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Change the working directory back to the notebook location"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:10.410193Z",
     "iopub.status.busy": "2024-10-17T18:06:10.410016Z",
     "iopub.status.idle": "2024-10-17T18:06:10.412809Z",
     "shell.execute_reply": "2024-10-17T18:06:10.412325Z"
    }
   },
   "outputs": [],
   "source": [
    "os.chdir(wd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Build the whole model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:10.414234Z",
     "iopub.status.busy": "2024-10-17T18:06:10.414073Z",
     "iopub.status.idle": "2024-10-17T18:06:20.279522Z",
     "shell.execute_reply": "2024-10-17T18:06:20.279001Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "m = MF6model.setup_from_yaml('pleasant_lgr_parent.yml')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a ``MF6model`` instance (subclass of ``flopy.mf6.ModflowGwf``) is returned"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:20.281497Z",
     "iopub.status.busy": "2024-10-17T18:06:20.281322Z",
     "iopub.status.idle": "2024-10-17T18:06:20.288336Z",
     "shell.execute_reply": "2024-10-17T18:06:20.287813Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pleasant Lake test case version 0.1.post48+gccfbed8\n",
       "Parent model: /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/pleasant\n",
       "5 layer(s), 25 row(s), 25 column(s)\n",
       "delr: [200.00...200.00] undefined\n",
       "delc: [200.00...200.00] undefined\n",
       "CRS: EPSG:3070\n",
       "length units: meters\n",
       "xll: 553400.0; yll: 387800.0; rotation: 0.0\n",
       "Bounds: (np.float64(553400.0), np.float64(558400.0), np.float64(387800.0), np.float64(392800.0))\n",
       "Packages: dis ic npf sto rcha_0 oc chd_0 obs_0 sfr_0 wel_0 obs_1 obs_2\n",
       "13 period(s):\n",
       " per start_datetime end_datetime  perlen  steady  nstp\n",
       "   0     2012-01-01   2012-01-01     1.0    True     1\n",
       "   1     2012-01-01   2012-02-01    31.0   False     1\n",
       "   2     2012-02-01   2012-03-01    29.0   False     1\n",
       "   ...\n",
       "  12     2012-12-01   2013-01-01    31.0   False     1"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "information from the configuration file is stored in an attached ``cfg`` dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:20.289907Z",
     "iopub.status.busy": "2024-10-17T18:06:20.289594Z",
     "iopub.status.idle": "2024-10-17T18:06:20.292908Z",
     "shell.execute_reply": "2024-10-17T18:06:20.292532Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['metadata', 'simulation', 'model', 'parent', 'postprocessing', 'setup_grid', 'dis', 'tdis', 'ic', 'npf', 'sto', 'rch', 'sfr', 'high_k_lakes', 'lak', 'mvr', 'chd', 'drn', 'ghb', 'riv', 'wel', 'oc', 'obs', 'ims', 'mfsetup_options', 'filename', 'maw', 'external_files', 'intermediate_data', 'grid'])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.cfg.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "the ``cfg`` dictionary contains both information from the configuration file, and MODFLOW input (such as external text file arrays) that was developed from the original source data. Internally in Modflow-setup, MODFLOW input in ``cfg`` is fed to the various Flopy object constructors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:20.294534Z",
     "iopub.status.busy": "2024-10-17T18:06:20.294228Z",
     "iopub.status.idle": "2024-10-17T18:06:20.298363Z",
     "shell.execute_reply": "2024-10-17T18:06:20.297898Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "defaultdict(dict,\n",
       "            {'remake_top': True,\n",
       "             'options': {'length_units': 'meters'},\n",
       "             'dimensions': {'nlay': 5, 'nrow': 25, 'ncol': 25},\n",
       "             'griddata': {'top': [{'filename': './external/plsnt_lgr_parent_top.dat'}],\n",
       "              'botm': [{'filename': './external/plsnt_lgr_parent_botm_000.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_001.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_002.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_003.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_004.dat'}],\n",
       "              'idomain': [{'filename': './external/plsnt_lgr_parent_idomain_000.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_001.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_002.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_003.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_004.dat'}]},\n",
       "             'top_filename_fmt': 'top.dat',\n",
       "             'botm_filename_fmt': 'botm_{:03d}.dat',\n",
       "             'idomain_filename_fmt': 'idomain_{:03d}.dat',\n",
       "             'minimum_layer_thickness': 1,\n",
       "             'drop_thin_cells': True,\n",
       "             'source_data': {'top': {'filename': '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif',\n",
       "               'elevation_units': 'meters'},\n",
       "              'botm': {'filenames': {1: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif',\n",
       "                2: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif',\n",
       "                3: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif',\n",
       "                4: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif'}}},\n",
       "             'nlay': 4})"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.cfg['dis']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The inset LGR model is attached to the parent within an ``inset`` dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:20.299807Z",
     "iopub.status.busy": "2024-10-17T18:06:20.299626Z",
     "iopub.status.idle": "2024-10-17T18:06:20.306275Z",
     "shell.execute_reply": "2024-10-17T18:06:20.305880Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'plsnt_lgr_inset': plsnt_lgr_inset model version 0.5.0.post48+gccfbed8\n",
       " Parent model: ./plsnt_lgr_parent\n",
       " 5 layer(s), 75 row(s), 85 column(s)\n",
       " delr: [40.00...40.00] undefined\n",
       " delc: [40.00...40.00] undefined\n",
       " CRS: EPSG:3070\n",
       " length units: meters\n",
       " xll: 554200.0; yll: 388800.0; rotation: 0\n",
       " Bounds: (np.float64(554200.0), np.float64(557600.0), np.float64(388800.0), np.float64(391800.0))\n",
       " Packages: dis ic npf sto rcha_0 oc sfr_0 lak_0 obs_0 obs_1\n",
       " 13 period(s):\n",
       "  per start_datetime end_datetime  perlen  steady  nstp\n",
       "    0     2012-01-01   2012-01-01     1.0    True     1\n",
       "    1     2012-01-01   2012-02-01    31.0   False     1\n",
       "    2     2012-02-01   2012-03-01    29.0   False     1\n",
       "    ...\n",
       "   12     2012-12-01   2013-01-01    31.0   False     1}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.inset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot the inset and parent model grids with Lake Package connections by layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:20.307688Z",
     "iopub.status.busy": "2024-10-17T18:06:20.307527Z",
     "iopub.status.idle": "2024-10-17T18:06:20.483445Z",
     "shell.execute_reply": "2024-10-17T18:06:20.482952Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7fcae1ca53d0>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "inset = m.inset['plsnt_lgr_inset']\n",
    "\n",
    "l, r, b, t = m.modelgrid.extent\n",
    "layer = 0\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 10))\n",
    "parent_mv = flopy.plot.PlotMapView(model=m, ax=ax, layer=layer)\n",
    "inset_mv = flopy.plot.PlotMapView(model=inset, ax=ax, layer=layer)\n",
    "\n",
    "vconn = inset.lak.connectiondata.array[inset.lak.connectiondata.array['claktype'] == 'vertical']\n",
    "k, i, j = cellids_to_kij(vconn['cellid'])\n",
    "lakeconnections = np.zeros((inset.nrow, inset.ncol))\n",
    "lakeconnections[i, j] = np.array(k+1)\n",
    "lakeconnections = np.ma.masked_array(lakeconnections, mask=lakeconnections == 0)\n",
    "qmi = inset_mv.plot_array(lakeconnections)\n",
    "\n",
    "#inset_mv.plot_bc('LAK', color='navy')\n",
    "#parent_mv.plot_bc('WEL_0', color='red')\n",
    "\n",
    "lcp = parent_mv.plot_grid(lw=0.5, ax=ax)\n",
    "lci = inset_mv.plot_grid(lw=0.5)\n",
    "ax.set_ylim(b, t)\n",
    "ax.set_xlim(l, r)\n",
    "ax.set_aspect(1)\n",
    "plt.colorbar(qmi)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Make a cross section of the grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:20.485088Z",
     "iopub.status.busy": "2024-10-17T18:06:20.484927Z",
     "iopub.status.idle": "2024-10-17T18:06:20.762935Z",
     "shell.execute_reply": "2024-10-17T18:06:20.762419Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1400x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(14, 5))\n",
    "xs_line = [(553000, 390200), (558000, 390200)]\n",
    "xs = flopy.plot.PlotCrossSection(model=m,\n",
    "                                line={\"line\": xs_line}, ax=ax,\n",
    "                                geographic_coords=True)\n",
    "lc = xs.plot_grid(zorder=4)\n",
    "xs2 = flopy.plot.PlotCrossSection(model=inset,\n",
    "                                line={\"line\": xs_line}, ax=ax,\n",
    "                                geographic_coords=True)\n",
    "lc = xs2.plot_grid(zorder=4)\n",
    "ax.set_ylim(190, 400)\n",
    "plt.savefig('../../docs/source/_static/pleasant_lgr_xsection.png', bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### write the MODFLOW input files\n",
    "(just like you would for a Flopy model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:20.764583Z",
     "iopub.status.busy": "2024-10-17T18:06:20.764423Z",
     "iopub.status.idle": "2024-10-17T18:06:21.454423Z",
     "shell.execute_reply": "2024-10-17T18:06:21.453929Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing simulation...\n",
      "  writing simulation name file...\n",
      "  writing simulation tdis package...\n",
      "  writing solution package ims_-1...\n",
      "  writing package pleasant_lgr.gwfgwf...\n",
      "  writing package pleasant_lgr.mvr...\n",
      "  writing model plsnt_lgr_parent...\n",
      "    writing model name file...\n",
      "    writing package dis...\n",
      "    writing package ic...\n",
      "    writing package npf...\n",
      "    writing package sto...\n",
      "    writing package rcha_0...\n",
      "    writing package oc...\n",
      "    writing package chd_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'chd', 'dimensions') changed to 269 based on size of stress_period_data\n",
      "    writing package obs_0...\n",
      "    writing package sfr_0...\n",
      "    writing package wel_0...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFORMATION: maxbound in ('gwf6', 'wel', 'dimensions') changed to 2 based on size of stress_period_data\n",
      "    writing package obs_1...\n",
      "    writing package obs_2...\n",
      "  writing model plsnt_lgr_inset...\n",
      "    writing model name file...\n",
      "    writing package dis...\n",
      "    writing package ic...\n",
      "    writing package npf...\n",
      "    writing package sto...\n",
      "    writing package rcha_0...\n",
      "    writing package oc...\n",
      "    writing package sfr_0...\n",
      "    writing package lak_0...\n",
      "    writing package obs_0...\n",
      "    writing package obs_1...\n",
      "SFRmaker v. 0.11.2.post6+gb2233e6\n",
      "\n",
      "Running Flopy v. 3.9.0.dev2 diagnostics...\n",
      "passed.\n",
      "\n",
      "Checking for continuity in segment and reach numbering...\n",
      "passed.\n",
      "\n",
      "Checking for increasing segment numbers in downstream direction...\n",
      "passed.\n",
      "\n",
      "Checking for circular routing...\n",
      "passed.\n",
      "\n",
      "Checking reach connections for proximity...\n",
      "2 segments with non-adjacent reaches found.\n",
      "At segments:\n",
      "1 2\n",
      "\n",
      "2 segments with non-adjacent reaches found.\n",
      "At segments:\n",
      "1 2\n",
      "\n",
      "\n",
      "Checking for model cells with multiple non-zero SFR conductances...\n",
      "passed.\n",
      "\n",
      "Checking for streambed tops of less than -10...\n",
      "passed.\n",
      "\n",
      "Checking for streambed tops of greater than 15000...\n",
      "passed.\n",
      "\n",
      "Checking segment_data for downstream rises in streambed elevation...\n",
      "Segment elevup and elevdn not specified for nstrm=-16 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking reach_data for downstream rises in streambed elevation...\n",
      "7 reaches encountered with strtop < strtop of downstream reach.\n",
      "Elevation rises:\n",
      "k i j iseg ireach strtop strtopdn d_strtop reachID diff\n",
      "4 20 15 2 1 290.66015625 292.6883850097656 2.028228759765625 5 -2.028228759765625\n",
      "4 21 15 2 2 290.66015625 292.11285400390625 1.45269775390625 6 -1.45269775390625\n",
      "2 24 20 2 10 288.81939697265625 290.1935119628906 1.374114990234375 14 -1.374114990234375\n",
      "2 24 19 2 9 289.3415832519531 290.66015625 1.318572998046875 13 -1.318572998046875\n",
      "2 24 18 2 8 289.4702453613281 290.66015625 1.189910888671875 12 -1.189910888671875\n",
      "1 24 21 2 11 288.60980224609375 289.4702453613281 0.860443115234375 15 -0.860443115234375\n",
      "4 23 18 2 7 290.1935119628906 290.66015625 0.466644287109375 11 -0.466644287109375\n",
      "\n",
      "\n",
      "Checking reach_data for inconsistencies between streambed elevations and the model grid...\n",
      "passed.\n",
      "\n",
      "Checking segment_data for inconsistencies between segment end elevations and the model grid...\n",
      "Segment elevup and elevdn not specified for nstrm=-16 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of less than 0.0001...\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of greater than 1.0...\n",
      "passed.\n",
      "\n",
      "wrote plsnt_lgr_parent_SFR.chk\n",
      "wrote plsnt_lgr_parent.sfr.obs\n",
      "converting reach and segment data to package data...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/external/plsnt_lgr_parent_packagedata.dat\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent.sfr\n",
      "SFRmaker v. 0.11.2.post6+gb2233e6\n",
      "\n",
      "Running Flopy v. 3.9.0.dev2 diagnostics...\n",
      "passed.\n",
      "\n",
      "Checking for continuity in segment and reach numbering...\n",
      "passed.\n",
      "\n",
      "Checking for increasing segment numbers in downstream direction...\n",
      "passed.\n",
      "\n",
      "Checking for circular routing...\n",
      "passed.\n",
      "\n",
      "Checking reach connections for proximity...\n",
      "0 segments with non-adjacent reaches found.\n",
      "At segments:\n",
      "\n",
      "\n",
      "0 segments with non-adjacent reaches found.\n",
      "At segments:\n",
      "\n",
      "\n",
      "\n",
      "Checking for model cells with multiple non-zero SFR conductances...\n",
      "1 model cells with multiple non-zero SFR conductances found.\n",
      "This may lead to circular routing between collocated reaches.\n",
      "Nodes with overlapping conductances:\n",
      "k\ti\tj\tiseg\tireach\trchlen\tstrthick\tstrhc1\n",
      "0\t27\t71\t1\t12\t13.225701332092285\t1.0\t1.0\n",
      "0\t27\t71\t1\t13\t26.684703826904297\t1.0\t1.0\n",
      "\n",
      "Checking for streambed tops of less than -10...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking for streambed tops of greater than 15000...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking segment_data for downstream rises in streambed elevation...\n",
      "Segment elevup and elevdn not specified for nstrm=-41 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking reach_data for downstream rises in streambed elevation...\n",
      "passed.\n",
      "\n",
      "Checking reach_data for inconsistencies between streambed elevations and the model grid...\n",
      "passed.\n",
      "\n",
      "Checking segment_data for inconsistencies between segment end elevations and the model grid...\n",
      "Segment elevup and elevdn not specified for nstrm=-41 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of less than 0.0001...\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of greater than 1.0...\n",
      "passed.\n",
      "\n",
      "wrote plsnt_lgr_inset_SFR.chk\n",
      "converting reach and segment data to package data...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/external/plsnt_lgr_inset_packagedata.dat\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset.sfr\n"
     ]
    }
   ],
   "source": [
    "m.write_input()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Run the model\n",
    "\n",
    "**Note:** Running the model through Flopy (as below) requires specification of the MODFLOW executable. In Flopy, the executable is specified via the ``exe_name`` argument to the simulation constructor for MODFLOW 6, or model constructor for previous MODFLOW versions. Similarly, in Modflow-setup, the ``exe_name`` is specified in the ``simulation:`` or ``model:`` block of the [configuration file](https://doi-usgs.github.io/modflow-setup/latest/config-file-gallery.html#pleasant-lake-test-case). This example assumes that a MODFLOW 6 executable with the name \"mf6\" either resides in the model workspace, or is included in the system path."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:21.456351Z",
     "iopub.status.busy": "2024-10-17T18:06:21.456014Z",
     "iopub.status.idle": "2024-10-17T18:06:25.329400Z",
     "shell.execute_reply": "2024-10-17T18:06:25.328907Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FloPy is using the following executable to run the model: ../../../../../.local/bin/mf6\n",
      "                                   MODFLOW 6\n",
      "                U.S. GEOLOGICAL SURVEY MODULAR HYDROLOGIC MODEL\n",
      "                   VERSION 6.3.0 release candidate 03/08/2022\n",
      "                               ***DEVELOP MODE***\n",
      "\n",
      "   MODFLOW 6 compiled Mar 08 2022 20:13:10 with Intel(R) Fortran Intel(R) 64\n",
      "   Compiler Classic for applications running on Intel(R) 64, Version 2021.5.0\n",
      "                             Build 20211109_000000\n",
      "\n",
      "This software is preliminary or provisional and is subject to \n",
      "revision. It is being provided to meet the need for timely best \n",
      "science. The software has not received final approval by the U.S. \n",
      "Geological Survey (USGS). No warranty, expressed or implied, is made \n",
      "by the USGS or the U.S. Government as to the functionality of the \n",
      "software and related material nor shall the fact of release \n",
      "constitute any such warranty. The software is provided on the \n",
      "condition that neither the USGS nor the U.S. Government shall be held \n",
      "liable for any damages resulting from the authorized or unauthorized \n",
      "use of the software.\n",
      "\n",
      " \n",
      " Run start date and time (yyyy/mm/dd hh:mm:ss): 2024/10/17 18:06:21\n",
      " \n",
      " Writing simulation list file: mfsim.lst\n",
      " Using Simulation name file: mfsim.nam\n",
      " \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     1    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     2    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     3    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     4    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     5    Time step:     1\n",
      "    Solving:  Stress period:     6    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     7    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     8    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     9    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:    10    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:    11    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:    12    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:    13    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " \n",
      " Run end date and time (yyyy/mm/dd hh:mm:ss): 2024/10/17 18:06:25\n",
      " Elapsed run time:  3.864 Seconds\n",
      " \n",
      " Normal termination of simulation.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(True, [])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.simulation.run_simulation()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the head results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:25.331406Z",
     "iopub.status.busy": "2024-10-17T18:06:25.330967Z",
     "iopub.status.idle": "2024-10-17T18:06:25.346216Z",
     "shell.execute_reply": "2024-10-17T18:06:25.345784Z"
    }
   },
   "outputs": [],
   "source": [
    "tmr_parent_headsobj = bf.HeadFile('../data/pleasant/pleasant.hds')\n",
    "lgr_parent_headsobj = bf.HeadFile('plsnt_lgr_parent.hds')\n",
    "lgr_inset_headsobj = bf.HeadFile('plsnt_lgr_inset.hds')\n",
    "\n",
    "# read the head results for the last stress period\n",
    "kper = 12\n",
    "lgr_parent_hds = lgr_parent_headsobj.get_data(kstpkper=(0, kper))\n",
    "lgr_inset_hds = lgr_inset_headsobj.get_data(kstpkper=(0, kper))\n",
    "\n",
    "# Get the water table elevation from the 3D head results\n",
    "inset_wt = get_water_table(lgr_inset_hds, nodata=1e30)\n",
    "parent_wt = get_water_table(lgr_parent_hds, nodata=1e30)\n",
    "\n",
    "# put in the lake level (not included in head output)\n",
    "lake_results = pd.read_csv('lake1.obs.csv')\n",
    "stage = lake_results['STAGE'][kper]\n",
    "inset_wt[inset.lakarr[0] == 1] = stage"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### First combine the parent and inset model head results\n",
    "(into a single grid at the inset model resolution; for a nicer looking plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:25.348053Z",
     "iopub.status.busy": "2024-10-17T18:06:25.347713Z",
     "iopub.status.idle": "2024-10-17T18:06:25.421492Z",
     "shell.execute_reply": "2024-10-17T18:06:25.421016Z"
    }
   },
   "outputs": [],
   "source": [
    "# make the single grid\n",
    "l, b, r, t = m.modelgrid.bounds\n",
    "xi = np.arange(l, r, 40)\n",
    "yi = np.arange(b, t, 40)[::-1]\n",
    "Xi, Yi = np.meshgrid(xi, yi)\n",
    "\n",
    "# make a single set of points\n",
    "# including both parent and inset cell centers\n",
    "# and water table values\n",
    "x = m.modelgrid.xcellcenters[~parent_wt.mask]\n",
    "y = m.modelgrid.ycellcenters[~parent_wt.mask]\n",
    "x = np.append(x, inset.modelgrid.xcellcenters[~inset_wt.mask])\n",
    "y = np.append(y, inset.modelgrid.ycellcenters[~inset_wt.mask])\n",
    "z = parent_wt[~parent_wt.mask].data\n",
    "z = np.append(z, inset_wt[~inset_wt.mask].data)\n",
    "\n",
    "# interpolate the results from the points\n",
    "# onto the single inset resolution grid\n",
    "results = griddata((x, y), z, (Xi, Yi))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make the plot\n",
    "* include the parent and inset model grids\n",
    "* show the head contours for the combined parent/inset simulation\n",
    "* show SFR boundary condition cells in green\n",
    "* show the lakebed leakance zones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:25.423595Z",
     "iopub.status.busy": "2024-10-17T18:06:25.423227Z",
     "iopub.status.idle": "2024-10-17T18:06:26.610483Z",
     "shell.execute_reply": "2024-10-17T18:06:26.609980Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 650x650 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['axes.labelsize'] = 8\n",
    "plt.rcParams['xtick.labelsize'] = 8\n",
    "plt.rcParams['ytick.labelsize'] = 8\n",
    "\n",
    "layer = 0\n",
    "fig, ax = plt.subplots(figsize=(6.5, 6.5))\n",
    "# create Flopy plot objects\n",
    "parent_mv = flopy.plot.PlotMapView(model=m, ax=ax, layer=layer)\n",
    "inset_mv = flopy.plot.PlotMapView(model=inset, ax=ax, layer=layer)\n",
    "\n",
    "# plot boundary condition cells from Modflow-setup array properties\n",
    "inset_bcs = np.ma.masked_array(inset._isbc2d, mask=inset._isbc2d==0)\n",
    "parent_bcs = np.ma.masked_array(m._isbc2d, mask=m._isbc2d==0)\n",
    "parent_mv.plot_array(parent_bcs, vmin=0, vmax=5)\n",
    "inset_mv.plot_array(inset_bcs, vmin=0, vmax=5)\n",
    "\n",
    "#bdlknc_values = inset.lak.connectiondata.array['bedleak']\n",
    "conn = inset.lak.connectiondata.array\n",
    "k, i, j = cellids_to_kij(conn['cellid'])\n",
    "bdlknc = np.zeros((inset.nlay, inset.nrow, inset.ncol))\n",
    "bdlknc[k, i, j] = conn['bedleak']\n",
    "bdlknc = np.max(bdlknc, axis=0)\n",
    "bdlknc = np.ma.masked_array(bdlknc, mask=bdlknc == 0)\n",
    "inset_mv.plot_array(bdlknc, cmap='Blues', zorder=200)\n",
    "\n",
    "# contour the combined inset/parent head results\n",
    "levels = np.arange(290, 315, 2)\n",
    "ctr = ax.contour(Xi, Yi, results, levels=levels, colors='b', zorder=10)\n",
    "labels = ax.clabel(ctr, inline=True, fontsize=8, inline_spacing=10)\n",
    "plt.setp(labels, path_effects=[\n",
    "    patheffects.withStroke(linewidth=3, foreground=\"w\")])\n",
    "\n",
    "# plot the grid cell edges\n",
    "lcp = parent_mv.plot_grid(lw=0.5, ax=ax)\n",
    "lci = inset_mv.plot_grid(lw=0.5)\n",
    "\n",
    "ax.set_ylim(b, t)\n",
    "ax.set_xlim(l, r)\n",
    "ax.set_aspect(1)\n",
    "ax.set_ylabel('Northing, in Wisconsin Transverse Mercator (meters)')\n",
    "ax.set_xlabel('Easting, in Wisconsin Transverse Mercator (meters)')\n",
    "\n",
    "ax.text(555600, 390450, 'Pleasant\\nLake', ha='left', va='top', color='DarkBlue', \n",
    "        fontsize=10, fontstyle='italic', family='Serif', zorder=202)\n",
    "txt = ax.text(556400, 391000, 'Chaffee Creek (SFR)', ha='left', va='top', color='DarkGreen', \n",
    "        fontsize=10, fontstyle='italic', family='Serif', zorder=20)\n",
    "txt.set_path_effects([patheffects.withStroke(linewidth=5, foreground='w')])\n",
    "txt = ax.text(556700, 388900, 'Tagatz\\nCreek (SFR)', ha='left', va='top', color='DarkGreen', \n",
    "        fontsize=10, fontstyle='italic', family='Serif', zorder=20)\n",
    "txt.set_path_effects([patheffects.withStroke(linewidth=5, foreground='w')])\n",
    "\n",
    "txt = ax.annotate(\"Littoral zone\",\n",
    "            xy=(555450, 390100), xycoords='data',\n",
    "            xytext=(555050,390100), textcoords='data',\n",
    "                  ha='right',\n",
    "            arrowprops=dict(arrowstyle=\"-|>\",\n",
    "                            connectionstyle=\"arc3\", fc='k'),\n",
    "            path_effects=[patheffects.withStroke(linewidth=4, foreground='w')],\n",
    "            zorder=203\n",
    "            )\n",
    "txt.arrow_patch.set_path_effects([\n",
    "    patheffects.Stroke(linewidth=2, foreground=\"w\"),\n",
    "    patheffects.Normal()])\n",
    "\n",
    "txt = ax.annotate(\"Profundal zone\",\n",
    "            xy=(555600, 390100), xycoords='data',\n",
    "            xytext=(555800,389500), textcoords='data',\n",
    "                  ha='right',\n",
    "            arrowprops=dict(arrowstyle=\"-|>\",\n",
    "                            connectionstyle=\"arc3\", fc='k'),\n",
    "            path_effects=[patheffects.withStroke(linewidth=4, foreground='w')],\n",
    "            zorder=203\n",
    "            )\n",
    "txt.arrow_patch.set_path_effects([\n",
    "    patheffects.Stroke(linewidth=2, foreground=\"w\"),\n",
    "    patheffects.Normal()])\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('postproc/pdfs/figure_2.pdf')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use [Modflow-export](https://github.com/aleaf/modflow-export) to export the modflow input to PDFs, rasters and shapefiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:26.612104Z",
     "iopub.status.busy": "2024-10-17T18:06:26.611950Z",
     "iopub.status.idle": "2024-10-17T18:06:52.013010Z",
     "shell.execute_reply": "2024-10-17T18:06:52.012506Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "creating postproc/plsnt_lgr_parent/pdfs...\n",
      "creating postproc/plsnt_lgr_parent/shps...\n",
      "creating postproc/plsnt_lgr_parent/rasters...\n",
      "\n",
      "dis package...\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay4.tif\n",
      "top:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/top.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "botm:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay4.tif\n",
      "idomain:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay4.tif\n",
      "\n",
      "ic package...\n",
      "strt:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay4.tif\n",
      "\n",
      "npf package...\n",
      "icelltype:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay4.tif\n",
      "k:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k33:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay4.tif\n",
      "\n",
      "sto package...\n",
      "iconvert:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ss:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay4.tif\n",
      "sy:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "rcha_0 package...\n",
      "irch:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per0.tif\n",
      "recharge:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per4.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per5.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per6.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per7.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per8.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per9.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per10.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per11.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per12.tif\n",
      "\n",
      "chd_0 package...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing postproc/plsnt_lgr_parent/shps/chd0_stress_period_data.shp... Done\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "head:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "sfr_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/plsnt_lgr_parent.sfr.shp... Done\n",
      "\n",
      "wel_0 package...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing postproc/plsnt_lgr_parent/shps/wel0_stress_period_data.shp... Done\n",
      "q:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_1 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "obs_2 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/obs2_stress_period_data.shp... Done\n",
      "creating postproc/plsnt_lgr_inset/pdfs...\n",
      "creating postproc/plsnt_lgr_inset/shps...\n",
      "creating postproc/plsnt_lgr_inset/rasters...\n",
      "\n",
      "dis package...\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "top:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/top.tif\n",
      "botm:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay4.tif\n",
      "idomain:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "ic package...\n",
      "strt:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay4.tif\n",
      "\n",
      "npf package...\n",
      "icelltype:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay4.tif\n",
      "k33:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "sto package...\n",
      "iconvert:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay4.tif\n",
      "ss:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay4.tif\n",
      "sy:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "rcha_0 package...\n",
      "irch:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "recharge:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "sfr_0 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/plsnt_lgr_inset.sfr.shp... Done\n",
      "\n",
      "lak_0 package...\n",
      "skipping lak0.perioddata; efficient export not implemented\n",
      "\n",
      "obs_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "obs_1 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/obs1_stress_period_data.shp... Done\n"
     ]
    }
   ],
   "source": [
    "for model in m, inset:\n",
    "    mfexport.export(model, model.modelgrid, output_path=f'postproc/{model.name}/')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Modflow-export can also create a summary table of the model inputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T18:06:52.014963Z",
     "iopub.status.busy": "2024-10-17T18:06:52.014554Z",
     "iopub.status.idle": "2024-10-17T18:06:53.563064Z",
     "shell.execute_reply": "2024-10-17T18:06:53.562573Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "summarizing plsnt_lgr_parent input...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "skipped, not implemented yet\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "skipped, not implemented yet\n",
      "summarizing plsnt_lgr_inset input...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "skipped, not implemented yet\n"
     ]
    }
   ],
   "source": [
    "for model in m, inset:\n",
    "    mfexport.summarize(model, output_path=f'postproc/{model.name}/')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
