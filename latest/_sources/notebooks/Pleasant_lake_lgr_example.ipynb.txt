{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pleasant Lake Example\n",
    "\n",
    "* **[View the configuration file(s)](https://aleaf.github.io/modflow-setup/latest/config-file-gallery.html#pleasant-lake-test-case)** \n",
    "* **[Run this example](https://mybinder.org/v2/gh/aleaf/modflow-setup/develop?urlpath=lab/tree/examples)  on  [Binder](https://mybinder.org/)**\n",
    "\n",
    "#### Model details\n",
    "* MODFLOW-6 model with local grid refinement (LGR)\n",
    "* LGR parent model is itself a Telescopic Mesh Refinment (TMR) inset from a MODFLOW-NWT model\n",
    "* Layer 1 in TMR parent model is subdivided evenly into two layers in LGR model (``botm: from_parent: 0: -0.5``). Other layers mapped explicitly between TMR parent and LGR model.\n",
    "* starting heads from LGR parent model resampled from binary output from the TMR parent\n",
    "* rch, npf, sto, and wel input copied from parent model\n",
    "* SFR package constructed from an NHDPlus v2 dataset (path to NHDPlus files in the same structure as the `downloads from the NHDPlus website`_)\n",
    "* head observations from csv files with different column names\n",
    "* LGR inset extent based on a buffer distance around a feature of interest\n",
    "* LGR inset dis, ic, npf, sto and rch packages copied from LGR parent\n",
    "* WEL package created from custom format\n",
    "* Lake package created from polygon features, bathymetry raster, stage-area-volume file and climate data from `PRISM`_.\n",
    "* Lake package observations set up automatically (output file for each lake)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:37:46.254515Z",
     "iopub.status.busy": "2022-02-10T20:37:46.253987Z",
     "iopub.status.idle": "2022-02-10T20:37:47.834036Z",
     "shell.execute_reply": "2022-02-10T20:37:47.833517Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/geopandas/_compat.py:18: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  PANDAS_GE_10 = str(pd.__version__) >= LooseVersion(\"1.0.0\")\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/setuptools/_distutils/version.py:351: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  other = LooseVersion(other)\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/geopandas/_compat.py:19: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  PANDAS_GE_11 = str(pd.__version__) >= LooseVersion(\"1.1.0\")\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/setuptools/_distutils/version.py:351: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  other = LooseVersion(other)\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/geopandas/_compat.py:20: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  PANDAS_GE_115 = str(pd.__version__) >= LooseVersion(\"1.1.5\")\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/setuptools/_distutils/version.py:351: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  other = LooseVersion(other)\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/geopandas/_compat.py:21: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  PANDAS_GE_12 = str(pd.__version__) >= LooseVersion(\"1.2.0\")\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/setuptools/_distutils/version.py:351: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  other = LooseVersion(other)\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/geopandas/_compat.py:29: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  SHAPELY_GE_17 = str(shapely.__version__) >= LooseVersion(\"1.7.0\")\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/setuptools/_distutils/version.py:351: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  other = LooseVersion(other)\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/geopandas/_compat.py:30: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  SHAPELY_GE_18 = str(shapely.__version__) >= LooseVersion(\"1.8\")\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/setuptools/_distutils/version.py:351: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  other = LooseVersion(other)\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/geopandas/_compat.py:31: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  SHAPELY_GE_20 = str(shapely.__version__) >= LooseVersion(\"2.0\")\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/setuptools/_distutils/version.py:351: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  other = LooseVersion(other)\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/geopandas/_compat.py:227: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  PYPROJ_LT_3 = LooseVersion(pyproj.__version__) < LooseVersion(\"3\")\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/geopandas/_compat.py:227: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  PYPROJ_LT_3 = LooseVersion(pyproj.__version__) < LooseVersion(\"3\")\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/geopandas/_compat.py:228: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  PYPROJ_GE_31 = LooseVersion(pyproj.__version__) >= LooseVersion(\"3.1\")\n",
      "/usr/share/miniconda/envs/mfsetup_ci/lib/python3.10/site-packages/geopandas/_compat.py:228: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  PYPROJ_GE_31 = LooseVersion(pyproj.__version__) >= LooseVersion(\"3.1\")\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import flopy\n",
    "import flopy.utils.binaryfile as bf\n",
    "from mfsetup import MF6model\n",
    "from mfsetup.discretization import cellids_to_kij\n",
    "from gisutils import df2shp\n",
    "import mfexport\n",
    "\n",
    "wd = os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Just make a model grid\n",
    "Oftentimes at the start of a modeling project, we want to quickly test different grid resolutions and extents before attempting to build the model. We can do this with Modflow-setup by creating a model instance and then running the ``setup_grid()`` method. A model grid instance is created from the ``setup_grid:`` block in the configuration file. \n",
    "\n",
    "Note: ``%%capture`` in the block below is just to suppress printing of ``stdout`` for display of this notebook in the modflow-setup documentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:37:47.838918Z",
     "iopub.status.busy": "2022-02-10T20:37:47.838448Z",
     "iopub.status.idle": "2022-02-10T20:37:49.115114Z",
     "shell.execute_reply": "2022-02-10T20:37:49.114369Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "m = MF6model(cfg='pleasant_lgr_parent.yml')\n",
    "m.setup_grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since this model has local-grid refinement, it actually consists of two models: a parent built from ``pleasant_lgr_parent.yml``, and an inset built from ``pleasant_lgr_inset.yml``, which is referenced within ``pleasant_lgr_parent.yml``. The two sub-models are connected and solved simulataneously within the same MODFLOW 6 simulation. A model grid is made for each sub-model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:37:49.120564Z",
     "iopub.status.busy": "2022-02-10T20:37:49.120099Z",
     "iopub.status.idle": "2022-02-10T20:37:49.125961Z",
     "shell.execute_reply": "2022-02-10T20:37:49.125405Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5 layer(s), 25 row(s), 25 column(s)\n",
       "delr: [200.00...200.00] meters\n",
       "delc: [200.00...200.00] meters\n",
       "CRS: EPSG:3070\n",
       "length units: meters\n",
       "xll: 553000.0; yll: 388000.0; rotation: 0.0\n",
       "Bounds: (553000.0, 558000.0, 388000.0, 393000.0)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.modelgrid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:37:49.129774Z",
     "iopub.status.busy": "2022-02-10T20:37:49.128941Z",
     "iopub.status.idle": "2022-02-10T20:37:49.133011Z",
     "shell.execute_reply": "2022-02-10T20:37:49.133327Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "70 row(s), 80 column(s)\n",
       "delr: [40.00...40.00] meters\n",
       "delc: [40.00...40.00] meters\n",
       "CRS: EPSG:3070\n",
       "length units: meters\n",
       "xll: 554200.0; yll: 389000.0; rotation: 0.0\n",
       "Bounds: (554200.0, 557400.0, 389000.0, 391800.0)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.inset['plsnt_lgr_inset'].modelgrid"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Working directory gottcha\n",
    "Currently, to facilitate working with external files in Flopy, Modflow-setup changes the working directory to the model workspace. In the context of a flat script that only builds the model, this is fine, but in a notebook or other workflows, this can potentially cause confusion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:37:49.136885Z",
     "iopub.status.busy": "2022-02-10T20:37:49.136072Z",
     "iopub.status.idle": "2022-02-10T20:37:49.139137Z",
     "shell.execute_reply": "2022-02-10T20:37:49.139435Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Write shapefiles of the inset and parent modelgrids\n",
    "A shapefile of the grid bounding box is written by default on creation of the model grid, to the location specified by ``output_files: grid_file:`` in the ``setup_grid:`` block (default is ``<model workspace>/postproc/shps/``)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:37:49.142722Z",
     "iopub.status.busy": "2022-02-10T20:37:49.142186Z",
     "iopub.status.idle": "2022-02-10T20:37:49.897081Z",
     "shell.execute_reply": "2022-02-10T20:37:49.897474Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "creating shapely Polygons of grid cells...\n",
      "finished in 0.01s\n",
      "\n",
      "writing postproc/shps/plsnt_lgr_parent_grid.shp... Done\n",
      "creating shapely Polygons of grid cells...\n",
      "finished in 0.13s\n",
      "\n",
      "writing postproc/shps/plsnt_lgr_inset_grid.shp... Done\n"
     ]
    }
   ],
   "source": [
    "m.modelgrid.write_shapefile('postproc/shps/plsnt_lgr_parent_grid.shp')\n",
    "m.inset['plsnt_lgr_inset'].modelgrid.write_shapefile('postproc/shps/plsnt_lgr_inset_grid.shp')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Change the working directory back to the notebook location"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:37:49.901317Z",
     "iopub.status.busy": "2022-02-10T20:37:49.900894Z",
     "iopub.status.idle": "2022-02-10T20:37:49.902805Z",
     "shell.execute_reply": "2022-02-10T20:37:49.902512Z"
    }
   },
   "outputs": [],
   "source": [
    "os.chdir(wd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Build the whole model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:37:49.906238Z",
     "iopub.status.busy": "2022-02-10T20:37:49.905777Z",
     "iopub.status.idle": "2022-02-10T20:38:01.354953Z",
     "shell.execute_reply": "2022-02-10T20:38:01.355268Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loading configuration file pleasant_lgr_parent.yml...\n",
      "\n",
      "Setting up plsnt_lgr_parent model from configuration in pleasant_lgr_parent.yml\n",
      "loading parent model /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/pleasant.nam...\n",
      "finished in 0.14s\n",
      "\n",
      "\n",
      "validating configuration...\n",
      "DIS package\n",
      "done with validation.\n",
      "\n",
      "setting up model grid...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp... Done\n",
      "finished in 0.01s\n",
      "\n",
      "loading configuration file /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "\n",
      "Setting up DIS package...\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif...\n",
      "finished in 0.02s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif...\n",
      "finished in 0.02s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif...\n",
      "finished in 0.02s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif...\n",
      "finished in 0.02s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif...\n",
      "finished in 0.02s\n",
      "loading original-arrays/plsnt_lgr_parent_top.dat.original, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_004.dat, took 0.00s\n",
      "(re)setting the idomain array...\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "setting up model grid...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp... Done\n",
      "finished in 0.01s\n",
      "\n",
      "loading configuration file /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_000.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_001.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_002.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_003.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_004.dat, took 0.00s\n",
      "loading original-arrays/plsnt_lgr_parent_top.dat.original, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_004.dat, took 0.00s\n",
      "setting up model grid...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp... Done\n",
      "finished in 0.01s\n",
      "\n",
      "loading configuration file /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "finished in 0.36s\n",
      "\n",
      "\n",
      "validating configuration...\n",
      "DIS package\n",
      "done with validation.\n",
      "\n",
      "setting up model grid...\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 553000.0, 388000.0, 558000.0, 393000.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp... Done\n",
      "finished in 0.26s\n",
      "\n",
      "(re)setting the idomain array...\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_000.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_001.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_002.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_003.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_004.dat, took 0.00s\n",
      "loading original-arrays/plsnt_lgr_parent_top.dat.original, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_004.dat, took 0.00s\n",
      "setting up model grid...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp... Done\n",
      "finished in 0.01s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "\n",
      "Setting up TDIS package...\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up IMS package...\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up IC package...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_strt_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_strt_004.dat, took 0.00s\n",
      "finished in 0.41s\n",
      "\n",
      "\n",
      "Setting up NPF package...\n",
      "wrote ./external/plsnt_lgr_parent_k_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k33_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k33_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k33_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k33_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_k33_004.dat, took 0.00s\n",
      "finished in 0.14s\n",
      "\n",
      "\n",
      "Setting up STO package...\n",
      "wrote ./external/plsnt_lgr_parent_sy_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_sy_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_ss_004.dat, took 0.00s\n",
      "finished in 0.14s\n",
      "\n",
      "\n",
      "Setting up RCH package...\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_005.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_006.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_007.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_008.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_009.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_010.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_011.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_rch_012.dat, took 0.00s\n",
      "finished in 0.03s\n",
      "\n",
      "\n",
      "Setting up OC package...\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up CHD package...\n",
      "\n",
      "getting perimeter cells...\n",
      "creating shapely Polygons of grid cells...\n",
      "finished in 0.01s\n",
      "\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/tables/boundary_cells.shp\n",
      "perimeter cells took 0.14s\n",
      "\n",
      "Calculating 3D interpolation weights...\n",
      "finished in 0.31s\n",
      "\n",
      "\n",
      "getting perimeter heads...\n",
      "for stress period 0, took 0.00s\n",
      "for stress period 1, took 0.00s\n",
      "for stress period 2, took 0.00s\n",
      "for stress period 3, took 0.00s\n",
      "for stress period 4, took 0.00s\n",
      "for stress period 5, took 0.00s\n",
      "for stress period 6, took 0.00s\n",
      "for stress period 7, took 0.00s\n",
      "for stress period 8, took 0.00s\n",
      "for stress period 9, took 0.00s\n",
      "for stress period 10, took 0.00s\n",
      "for stress period 11, took 0.00s\n",
      "for stress period 12, took 0.00s\n",
      "getting perimeter heads took 0.06s\n",
      "\n",
      "No other CHD input specified\n",
      "setup of chd took 0.64s\n",
      "\n",
      "\n",
      "Setting up SFR package...\n",
      "\n",
      "loading NHDPlus v2 hydrography data...\n",
      "for basins:\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDSnapshot/Hydrography/NHDFlowline.shp...\n",
      "filtering on bounding box -89.58864189423825, 43.964148922793996, -89.52595875596734, 44.00940678140979...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlowlineVAA.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlow.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/elevslope.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "load finished in 0.07s\n",
      "\n",
      "Getting routing information from NHDPlus Plusflow table...\n",
      "finished in 0.01s\n",
      "\n",
      "\n",
      "SFRmaker version 0.9.1.post8+g4a06e6b\n",
      "\n",
      "Creating sfr dataset...\n",
      "\n",
      "Creating grid class instance from flopy Grid instance...\n",
      "grid class created in 0.02s\n",
      "\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 625\n",
      "nlay: 1\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "model length units: undefined\n",
      "crs: EPSG:3070\n",
      "bounds: 553000.00, 388000.00, 558000.00, 393000.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr\n",
      "Pleasant Lake test case version 0.1.post281+g9f375c9\n",
      "Parent model: /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/pleasant\n",
      "5 layer(s), 25 row(s), 25 column(s)\n",
      "delr: [200.00...200.00] meters\n",
      "delc: [200.00...200.00] meters\n",
      "CRS: EPSG:3070\n",
      "length units: meters\n",
      "xll: 553000.0; yll: 388000.0; rotation: 0.0\n",
      "Bounds: (553000.0, 558000.0, 388000.0, 393000.0)\n",
      "Packages: dis ic npf sto rcha_0 oc chd_0 obs_0\n",
      "13 period(s):\n",
      " per start_datetime end_datetime  perlen  steady  nstp\n",
      "   0     2012-01-01   2012-01-01     1.0    True     1\n",
      "   1     2012-01-01   2012-02-01    31.0   False     1\n",
      "   2     2012-02-01   2012-03-01    29.0   False     1\n",
      "   ...\n",
      "  12     2012-12-01   2013-01-01    31.0   False     1\n",
      "Warning: No length units specified in CRS for input LineStrings or length units not recognizeddefaulting to meters.\n",
      "\n",
      "reprojecting hydrography from\n",
      "EPSG:4269\n",
      "to\n",
      "EPSG:3070\n",
      "\n",
      "\n",
      "Culling hydrography to active area...\n",
      "simplification tolerance: 2000.00\n",
      "starting lines: 2\n",
      "remaining lines: 2\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Intersecting 2 flowlines with 625 grid cells...\n",
      "Intersecting 2 features...\n",
      "2\n",
      "finished in 0.00s\n",
      "\n",
      "Setting up reach data... (may take a few minutes for large grids)\n",
      "finished in 0.00s\n",
      "\n",
      "Computing widths...\n",
      "\n",
      "Dropping 0 reaches with length < 10.00 meters...\n",
      "\n",
      "Repairing routing connections...\n",
      "enforcing best segment numbering...\n",
      "\n",
      "Setting up segment data...\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 625\n",
      "nlay: 1\n",
      "nrow: 25\n",
      "ncol: 25\n",
      "model length units: undefined\n",
      "crs: EPSG:3070\n",
      "bounds: 553000.00, 388000.00, 558000.00, 393000.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "\n",
      "Time to create sfr dataset: 0.13s\n",
      "\n",
      "running rasterstats.zonal_stats on buffered LineStrings...\n",
      "finished in 0.09s\n",
      "\n",
      "\n",
      "Smoothing elevations...\n",
      "finished in 0.00s\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_parent_sfr_reach_data.csv\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_parent_sfr_segment_data.csv\n",
      "converting segment data to period data...\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_cells.shp... Done\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_outlets.shp... Done\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_lines.shp... Done\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_routing.shp... Done\n",
      "No period data to export!\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_sfr_observations.shp... Done\n",
      "No non-zero values of flow to export!\n",
      "converting reach and segment data to package data...\n",
      "converting segment data to period data...\n",
      "(re)setting the idomain array...\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_000.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_001.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_002.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_003.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_004.dat, took 0.00s\n",
      "loading original-arrays/plsnt_lgr_parent_top.dat.original, shape=(25, 25), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.02s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_parent_idomain_004.dat, took 0.00s\n",
      "setting up model grid...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_parent_bbox.shp... Done\n",
      "finished in 0.01s\n",
      "\n",
      "wrote ./external/plsnt_lgr_parent_irch.dat, took 0.00s\n",
      "finished in 0.70s\n",
      "\n",
      "\n",
      "Setting up LAK package...\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_000.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_001.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_002.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_003.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_004.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_000.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_001.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_002.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_003.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_parent_lakarr_004.dat, took 0.00s\n",
      "lakes_shapefile not specified, or no lakes in model area\n",
      "\n",
      "Setting up WEL package...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "finished in 0.12s\n",
      "\n",
      "\n",
      "Setting up OBS package...\n",
      "Reading observation files...\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/nwis_heads_info_file.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/lake_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/wdnr_gw_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/uwsp_heads.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsnme\n",
      "    observation label column: obsnme\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/wgnhs_head_targets.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: common_name\n",
      "    observation label column: common_name\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "\n",
      "Culling observations to model area...\n",
      "Dropping head observations that coincide with boundary conditions...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "Dropping head observations specified in /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr_parent.yml...\n",
      "finished in 0.05s\n",
      "\n",
      "\n",
      "Setting up DIS package...\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif...\n",
      "finished in 0.02s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif...\n",
      "finished in 0.02s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif...\n",
      "finished in 0.02s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif...\n",
      "finished in 0.02s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif...\n",
      "finished in 0.02s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.12s\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 554200.0, 389000.0, 557400.0, 391800.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "caching data in /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.12s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.12s\n",
      "loading original-arrays/plsnt_lgr_inset_top.dat.original, shape=(70, 80), loading original-arrays/plsnt_lgr_inset_top.dat.original, shape=(70, 80), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.17s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_004.dat, took 0.00s\n",
      "(re)setting the idomain array...\n",
      "computing cell thicknesses...\n",
      "finished in 0.15s\n",
      "\n",
      "setting up model grid...\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 553000.0, 388000.0, 558000.0, 393000.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp... Done\n",
      "finished in 0.27s\n",
      "\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.12s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.21s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_000.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_001.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_002.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_003.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_004.dat, took 0.00s\n",
      "loading original-arrays/plsnt_lgr_inset_top.dat.original, shape=(70, 80), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.15s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_004.dat, took 0.00s\n",
      "setting up model grid...\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 553000.0, 388000.0, 558000.0, 393000.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp... Done\n",
      "finished in 0.27s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_irch.dat, took 0.00s\n",
      "finished in 2.40s\n",
      "\n",
      "\n",
      "Setting up IC package...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_strt_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_strt_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_strt_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_strt_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_strt_004.dat, took 0.00s\n",
      "finished in 0.18s\n",
      "\n",
      "\n",
      "Setting up NPF package...\n",
      "wrote ./external/plsnt_lgr_inset_k_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k33_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k33_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k33_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k33_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_k33_004.dat, took 0.00s\n",
      "finished in 0.39s\n",
      "\n",
      "\n",
      "Setting up STO package...\n",
      "wrote ./external/plsnt_lgr_inset_sy_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_sy_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_sy_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_sy_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_sy_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_ss_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_ss_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_ss_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_ss_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_ss_004.dat, took 0.00s\n",
      "finished in 0.39s\n",
      "\n",
      "\n",
      "Setting up RCH package...\n",
      "wrote ./external/plsnt_lgr_inset_irch.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_005.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_006.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_007.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_008.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_009.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_010.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_011.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_rch_012.dat, took 0.00s\n",
      "finished in 0.14s\n",
      "\n",
      "\n",
      "Setting up OC package...\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Setting up SFR package...\n",
      "\n",
      "loading NHDPlus v2 hydrography data...\n",
      "for basins:\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDSnapshot/Hydrography/NHDFlowline.shp...\n",
      "filtering on bounding box -89.57361941749177, 43.97318294263003, -89.53352803700078, 43.99854796302356...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlowlineVAA.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/PlusFlow.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/NHDPlusAttributes/elevslope.dbf...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "\n",
      "load finished in 0.06s\n",
      "\n",
      "Getting routing information from NHDPlus Plusflow table...\n",
      "finished in 0.01s\n",
      "\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.12s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.12s\n",
      "\n",
      "SFRmaker version 0.9.1.post8+g4a06e6b\n",
      "\n",
      "Creating sfr dataset...\n",
      "\n",
      "Creating grid class instance from flopy Grid instance...\n",
      "grid class created in 0.07s\n",
      "\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 5,600\n",
      "nlay: 1\n",
      "nrow: 70\n",
      "ncol: 80\n",
      "model length units: undefined\n",
      "crs: EPSG:3070\n",
      "bounds: 554200.00, 389000.00, 557400.00, 391800.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr\n",
      "plsnt_lgr_inset model version 0.post281+g9f375c9\n",
      "Parent model: ./plsnt_lgr_parent\n",
      "5 layer(s), 70 row(s), 80 column(s)\n",
      "delr: [40.00...40.00] meters\n",
      "delc: [40.00...40.00] meters\n",
      "CRS: EPSG:3070\n",
      "length units: meters\n",
      "xll: 554200.0; yll: 389000.0; rotation: 0.0\n",
      "Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
      "Packages: dis ic npf sto rcha_0 oc\n",
      "13 period(s):\n",
      " per start_datetime end_datetime  perlen  steady  nstp\n",
      "   0     2012-01-01   2012-01-01     1.0    True     1\n",
      "   1     2012-01-01   2012-02-01    31.0   False     1\n",
      "   2     2012-02-01   2012-03-01    29.0   False     1\n",
      "   ...\n",
      "  12     2012-12-01   2013-01-01    31.0   False     1\n",
      "Warning: No length units specified in CRS for input LineStrings or length units not recognizeddefaulting to meters.\n",
      "\n",
      "reprojecting hydrography from\n",
      "EPSG:4269\n",
      "to\n",
      "EPSG:3070\n",
      "\n",
      "\n",
      "Culling hydrography to active area...\n",
      "simplification tolerance: 2000.00\n",
      "starting lines: 2\n",
      "remaining lines: 2\n",
      "finished in 0.00s\n",
      "\n",
      "\n",
      "Intersecting 2 flowlines with 5,600 grid cells...\n",
      "Intersecting 2 features...\n",
      "2\n",
      "finished in 0.02s\n",
      "\n",
      "Setting up reach data... (may take a few minutes for large grids)\n",
      "finished in 0.01s\n",
      "\n",
      "Computing widths...\n",
      "\n",
      "Dropping 1 reaches with length < 2.00 meters...\n",
      "\n",
      "Repairing routing connections...\n",
      "enforcing best segment numbering...\n",
      "\n",
      "Setting up segment data...\n",
      "Model grid information\n",
      "structured grid\n",
      "nnodes: 5,600\n",
      "nlay: 1\n",
      "nrow: 70\n",
      "ncol: 80\n",
      "model length units: undefined\n",
      "crs: EPSG:3070\n",
      "bounds: 554200.00, 389000.00, 557400.00, 391800.00\n",
      "active area defined by: isfr array\n",
      "\n",
      "\n",
      "Time to create sfr dataset: 0.26s\n",
      "\n",
      "running rasterstats.zonal_stats on buffered LineStrings...\n",
      "finished in 0.18s\n",
      "\n",
      "\n",
      "Smoothing elevations...\n",
      "finished in 0.00s\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_inset_sfr_reach_data.csv\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/tables/plsnt_lgr_inset_sfr_segment_data.csv\n",
      "converting segment data to period data...\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_cells.shp... Done\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_outlets.shp... Done\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_lines.shp... Done\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_sfr_routing.shp... Done\n",
      "No period data to export!\n",
      "No observations to export!\n",
      "No non-zero values of flow to export!\n",
      "converting reach and segment data to package data...\n",
      "converting segment data to period data...\n",
      "(re)setting the idomain array...\n",
      "computing cell thicknesses...\n",
      "finished in 0.16s\n",
      "\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.12s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.13s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_000.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_001.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_002.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_003.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_004.dat, took 0.00s\n",
      "loading original-arrays/plsnt_lgr_inset_top.dat.original, shape=(70, 80), took 0.00s\n",
      "computing cell thicknesses...\n",
      "finished in 0.16s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_botm_004.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_top.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_000.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_001.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_002.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_003.dat, took 0.00s\n",
      "wrote ./external/plsnt_lgr_inset_idomain_004.dat, took 0.00s\n",
      "setting up model grid...\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/all_lakes.shp...\n",
      "filtering on bounding box 553000.0, 388000.0, 558000.0, 393000.0...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset_grid.json\n",
      "writing /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/postproc/shps/plsnt_lgr_inset_bbox.shp... Done\n",
      "finished in 0.27s\n",
      "\n",
      "wrote ./external/plsnt_lgr_inset_irch.dat, took 0.00s\n",
      "finished in 2.20s\n",
      "\n",
      "\n",
      "Setting up LAK package...\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.13s\n",
      "reading data from /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/pleasant_bathymetry.tif...\n",
      "finished in 0.13s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_000.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_001.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_002.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_003.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_004.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_000.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_001.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_002.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_003.dat, took 0.00s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakarr_004.dat, took 0.00s\n",
      "setting up lakebed leakance zones...\n",
      "finished in 0.01s\n",
      "wrote original-arrays/plsnt_lgr_inset_lakzones.dat, took 0.00s\n",
      "setting up tabfiles...\n",
      "wrote ./external/600059060_stage_area_volume.dat\n",
      "finished in 0.80s\n",
      "\n",
      "\n",
      "Setting up WEL package...\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/csls_sources_wu_pts.shp...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "intersecting wells with model grid...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "took 0.00s\n",
      "\n",
      "computing cell thicknesses...\n",
      "finished in 0.14s\n",
      "\n",
      "\n",
      "reading /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/shps/csls_sources_wu_pts.shp...\n",
      "--> building dataframe... (may take a while for large shapefiles)\n",
      "intersecting wells with model grid...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "took 0.00s\n",
      "\n",
      "computing cell thicknesses...\n",
      "finished in 0.14s\n",
      "\n",
      "\n",
      "Resampling pumping rates in /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/master_wu.csv to model stress periods...\n",
      "    wells with no data for a stress period will be assigned 0.0 pumping rates.\n",
      "took 0.01s\n",
      "\n",
      "finished in 1.13s\n",
      "\n",
      "\n",
      "Setting up OBS package...\n",
      "Reading observation files...\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/nwis_heads_info_file.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/lake_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/wdnr_gw_sites.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsprefix\n",
      "    observation label column: obsprefix\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/uwsp_heads.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: obsnme\n",
      "    observation label column: obsnme\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/tables/wgnhs_head_targets.csv\n",
      "    observation type col: obs_type\n",
      "    observation label column: common_name\n",
      "    observation label column: common_name\n",
      "    x location col: x\n",
      "    y location col: y\n",
      "\n",
      "Culling observations to model area...\n",
      "Dropping head observations that coincide with boundary conditions...\n",
      "getting i, j locations...\n",
      "finished in 0.00s\n",
      "\n",
      "dropped 3 of 83 observations in cells with bcs.\n",
      "Dropping head observations specified in /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr_inset.yml...\n",
      "finished in 0.05s\n",
      "\n",
      "\n",
      "Setting up the simulation water mover package...\n",
      "finished in 0.00s\n",
      "\n",
      "finished setting up model in 11.41s\n",
      "\n",
      "Pleasant Lake test case version 0.1.post281+g9f375c9\n",
      "Parent model: /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/pleasant\n",
      "5 layer(s), 25 row(s), 25 column(s)\n",
      "delr: [200.00...200.00] meters\n",
      "delc: [200.00...200.00] meters\n",
      "CRS: EPSG:3070\n",
      "length units: meters\n",
      "xll: 553000.0; yll: 388000.0; rotation: 0.0\n",
      "Bounds: (553000.0, 558000.0, 388000.0, 393000.0)\n",
      "Packages: dis ic npf sto rcha_0 oc chd_0 obs_0 sfr_0 wel_0 obs_1\n",
      "13 period(s):\n",
      " per start_datetime end_datetime  perlen  steady  nstp\n",
      "   0     2012-01-01   2012-01-01     1.0    True     1\n",
      "   1     2012-01-01   2012-02-01    31.0   False     1\n",
      "   2     2012-02-01   2012-03-01    29.0   False     1\n",
      "   ...\n",
      "  12     2012-12-01   2013-01-01    31.0   False     1\n"
     ]
    }
   ],
   "source": [
    "m = MF6model.setup_from_yaml('pleasant_lgr_parent.yml')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a ``MF6model`` instance (subclass of ``flopy.mf6.ModflowGwf``) is returned"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:38:01.364510Z",
     "iopub.status.busy": "2022-02-10T20:38:01.364104Z",
     "iopub.status.idle": "2022-02-10T20:38:01.368376Z",
     "shell.execute_reply": "2022-02-10T20:38:01.368083Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pleasant Lake test case version 0.1.post281+g9f375c9\n",
       "Parent model: /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/pleasant\n",
       "5 layer(s), 25 row(s), 25 column(s)\n",
       "delr: [200.00...200.00] meters\n",
       "delc: [200.00...200.00] meters\n",
       "CRS: EPSG:3070\n",
       "length units: meters\n",
       "xll: 553000.0; yll: 388000.0; rotation: 0.0\n",
       "Bounds: (553000.0, 558000.0, 388000.0, 393000.0)\n",
       "Packages: dis ic npf sto rcha_0 oc chd_0 obs_0 sfr_0 wel_0 obs_1\n",
       "13 period(s):\n",
       " per start_datetime end_datetime  perlen  steady  nstp\n",
       "   0     2012-01-01   2012-01-01     1.0    True     1\n",
       "   1     2012-01-01   2012-02-01    31.0   False     1\n",
       "   2     2012-02-01   2012-03-01    29.0   False     1\n",
       "   ...\n",
       "  12     2012-12-01   2013-01-01    31.0   False     1"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "information from the configuration file is stored in an attached ``cfg`` dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:38:01.371425Z",
     "iopub.status.busy": "2022-02-10T20:38:01.371078Z",
     "iopub.status.idle": "2022-02-10T20:38:01.375167Z",
     "shell.execute_reply": "2022-02-10T20:38:01.374831Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['metadata', 'simulation', 'model', 'parent', 'postprocessing', 'setup_grid', 'dis', 'tdis', 'ic', 'npf', 'sto', 'rch', 'sfr', 'high_k_lakes', 'lak', 'mvr', 'riv', 'wel', 'chd', 'oc', 'obs', 'ims', 'mfsetup_options', 'filename', 'ghb', 'maw', 'external_files', 'grid', 'intermediate_data'])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.cfg.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "the ``cfg`` dictionary contains both information from the configuration file, and MODFLOW input (such as external text file arrays) that was developed from the original source data. Internally in Modflow-setup, MODFLOW input in ``cfg`` is fed to the various Flopy object constructors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:38:01.379653Z",
     "iopub.status.busy": "2022-02-10T20:38:01.379288Z",
     "iopub.status.idle": "2022-02-10T20:38:01.383386Z",
     "shell.execute_reply": "2022-02-10T20:38:01.383065Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "defaultdict(dict,\n",
       "            {'remake_top': True,\n",
       "             'options': {'length_units': 'meters'},\n",
       "             'dimensions': {'nlay': 5},\n",
       "             'griddata': {'top': [{'filename': './external/plsnt_lgr_parent_top.dat'}],\n",
       "              'botm': [{'filename': './external/plsnt_lgr_parent_botm_000.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_001.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_002.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_003.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_004.dat'}],\n",
       "              'idomain': [{'filename': './external/plsnt_lgr_parent_idomain_000.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_001.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_002.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_003.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_004.dat'}]},\n",
       "             'top_filename_fmt': 'top.dat',\n",
       "             'botm_filename_fmt': 'botm_{:03d}.dat',\n",
       "             'idomain_filename_fmt': 'idomain_{:03d}.dat',\n",
       "             'minimum_layer_thickness': 1,\n",
       "             'drop_thin_cells': True,\n",
       "             'source_data': {'top': {'filename': '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif',\n",
       "               'elevation_units': 'meters'},\n",
       "              'botm': {'filenames': {1: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif',\n",
       "                2: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif',\n",
       "                3: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif',\n",
       "                4: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif'}}},\n",
       "             'nlay': 4})"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.cfg['dis']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The inset LGR model is attached to the parent within an ``inset`` dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:38:01.386627Z",
     "iopub.status.busy": "2022-02-10T20:38:01.386077Z",
     "iopub.status.idle": "2022-02-10T20:38:01.393772Z",
     "shell.execute_reply": "2022-02-10T20:38:01.393437Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'plsnt_lgr_inset': plsnt_lgr_inset model version 0.post281+g9f375c9\n",
       " Parent model: ./plsnt_lgr_parent\n",
       " 5 layer(s), 70 row(s), 80 column(s)\n",
       " delr: [40.00...40.00] meters\n",
       " delc: [40.00...40.00] meters\n",
       " CRS: EPSG:3070\n",
       " length units: meters\n",
       " xll: 554200.0; yll: 389000.0; rotation: 0.0\n",
       " Bounds: (554200.0, 557400.0, 389000.0, 391800.0)\n",
       " Packages: dis ic npf sto rcha_0 oc sfr_0 lak_0 obs_0 wel_0 obs_1\n",
       " 13 period(s):\n",
       "  per start_datetime end_datetime  perlen  steady  nstp\n",
       "    0     2012-01-01   2012-01-01     1.0    True     1\n",
       "    1     2012-01-01   2012-02-01    31.0   False     1\n",
       "    2     2012-02-01   2012-03-01    29.0   False     1\n",
       "    ...\n",
       "   12     2012-12-01   2013-01-01    31.0   False     1}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.inset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot the inset and parent model grids with Lake Package connections by layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:38:01.399364Z",
     "iopub.status.busy": "2022-02-10T20:38:01.398895Z",
     "iopub.status.idle": "2022-02-10T20:38:01.552980Z",
     "shell.execute_reply": "2022-02-10T20:38:01.552619Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7f7066b64f70>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "inset = m.inset['plsnt_lgr_inset']\n",
    "\n",
    "l, r, b, t = m.modelgrid.extent\n",
    "layer = 0\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 10))\n",
    "parent_mv = flopy.plot.PlotMapView(model=m, ax=ax, layer=layer)\n",
    "inset_mv = flopy.plot.PlotMapView(model=inset, ax=ax, layer=layer)\n",
    "\n",
    "vconn = inset.lak.connectiondata.array[inset.lak.connectiondata.array['claktype'] == 'vertical']\n",
    "k, i, j = cellids_to_kij(vconn['cellid'])\n",
    "lakeconnections = np.zeros((inset.nrow, inset.ncol))\n",
    "lakeconnections[i, j] = np.array(k)\n",
    "lakeconnections = np.ma.masked_array(lakeconnections, mask=lakeconnections == 0)\n",
    "qmi = inset_mv.plot_array(lakeconnections)\n",
    "\n",
    "#inset_mv.plot_bc('LAK', color='navy')\n",
    "#parent_mv.plot_bc('WEL_0', color='red')\n",
    "\n",
    "lcp = parent_mv.plot_grid(lw=0.5, ax=ax)\n",
    "lci = inset_mv.plot_grid(lw=0.5)\n",
    "ax.set_ylim(b, t)\n",
    "ax.set_xlim(l, r)\n",
    "ax.set_aspect(1)\n",
    "plt.colorbar(qmi)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### write the MODFLOW input files\n",
    "(just like you would for a Flopy model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:38:01.556290Z",
     "iopub.status.busy": "2022-02-10T20:38:01.555929Z",
     "iopub.status.idle": "2022-02-10T20:38:02.349358Z",
     "shell.execute_reply": "2022-02-10T20:38:02.348678Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing simulation...\n",
      "  writing simulation name file...\n",
      "  writing simulation tdis package...\n",
      "  writing ims package ims_-1...\n",
      "  writing mvr package pleasant_lgr.mvr...\n",
      "  writing package pleasant_lgr.gwfgwf...\n",
      "  writing model plsnt_lgr_parent...\n",
      "    writing model name file...\n",
      "    writing package dis...\n",
      "    writing package ic...\n",
      "    writing package npf...\n",
      "    writing package sto...\n",
      "    writing package rcha_0...\n",
      "    writing package oc...\n",
      "    writing package chd_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'chd', 'dimensions') changed to 240 based on size of stress_period_data\n",
      "    writing package obs_0...\n",
      "    writing package sfr_0...\n",
      "    writing package wel_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'wel', 'dimensions') changed to 2 based on size of stress_period_data\n",
      "    writing package obs_1...\n",
      "  writing model plsnt_lgr_inset...\n",
      "    writing model name file...\n",
      "    writing package dis...\n",
      "    writing package ic...\n",
      "    writing package npf...\n",
      "    writing package sto...\n",
      "    writing package rcha_0...\n",
      "    writing package oc...\n",
      "    writing package sfr_0...\n",
      "    writing package lak_0...\n",
      "    writing package obs_0...\n",
      "    writing package wel_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'wel', 'dimensions') changed to 2 based on size of stress_period_data\n",
      "    writing package obs_1...\n",
      "SFRmaker v. 0.9.1.post8+g4a06e6b\n",
      "\n",
      "Running Flopy v. 3.3.5 diagnostics...\n",
      "passed.\n",
      "\n",
      "Checking for continuity in segment and reach numbering...\n",
      "passed.\n",
      "\n",
      "Checking for increasing segment numbers in downstream direction...\n",
      "passed.\n",
      "\n",
      "Checking for circular routing...\n",
      "passed.\n",
      "\n",
      "Checking reach connections for proximity...\n",
      "2 segments with non-adjacent reaches found.\n",
      "At segments:\n",
      "1 2\n",
      "\n",
      "2 segments with non-adjacent reaches found.\n",
      "At segments:\n",
      "1 2\n",
      "\n",
      "\n",
      "Checking for model cells with multiple non-zero SFR conductances...\n",
      "passed.\n",
      "\n",
      "Checking for streambed tops of less than -10...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking for streambed tops of greater than 15000...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking segment_data for downstream rises in streambed elevation...\n",
      "Segment elevup and elevdn not specified for nstrm=-13 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking reach_data for downstream rises in streambed elevation...\n",
      "3 reaches encountered with strtop < strtop of downstream reach.\n",
      "Elevation rises:\n",
      "k i j iseg ireach strtop strtopdn d_strtop reachID diff\n",
      "4 20 16 2 1 290.3638610839844 294.76507568359375 4.401214599609375 5 -4.401214599609375\n",
      "4 20 17 2 2 290.3638610839844 293.5867614746094 3.222900390625 6 -3.222900390625\n",
      "4 21 17 2 3 290.3638610839844 292.6883850097656 2.32452392578125 7 -2.32452392578125\n",
      "\n",
      "\n",
      "Checking reach_data for inconsistencies between streambed elevations and the model grid...\n",
      "passed.\n",
      "\n",
      "Checking segment_data for inconsistencies between segment end elevations and the model grid...\n",
      "Segment elevup and elevdn not specified for nstrm=-13 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of less than 0.0001...\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of greater than 1.0...\n",
      "passed.\n",
      "\n",
      "wrote plsnt_lgr_parent_SFR.chk\n",
      "wrote plsnt_lgr_parent.sfr.obs\n",
      "converting reach and segment data to package data...\n",
      "wrote ./external/plsnt_lgr_parent_packagedata.dat\n",
      "wrote ./plsnt_lgr_parent.sfr\n"
     ]
    }
   ],
   "source": [
    "m.write_input()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Run the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:38:02.353725Z",
     "iopub.status.busy": "2022-02-10T20:38:02.352203Z",
     "iopub.status.idle": "2022-02-10T20:38:09.684935Z",
     "shell.execute_reply": "2022-02-10T20:38:09.685279Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FloPy is using the following executable to run the model: /home/runner/.local/bin/mf6\n",
      "                                   MODFLOW 6\n",
      "                U.S. GEOLOGICAL SURVEY MODULAR HYDROLOGIC MODEL\n",
      "                            VERSION 6.2.0 10/22/2020\n",
      "\n",
      "   MODFLOW 6 compiled Oct 26 2020 11:03:14 with IFORT compiler (ver. 18.0.3)\n",
      "\n",
      "This software has been approved for release by the U.S. Geological \n",
      "Survey (USGS). Although the software has been subjected to rigorous \n",
      "review, the USGS reserves the right to update the software as needed \n",
      "pursuant to further analysis and review. No warranty, expressed or \n",
      "implied, is made by the USGS or the U.S. Government as to the \n",
      "functionality of the software and related material nor shall the \n",
      "fact of release constitute any such warranty. Furthermore, the \n",
      "software is released on condition that neither the USGS nor the U.S. \n",
      "Government shall be held liable for any damages resulting from its \n",
      "authorized or unauthorized use. Also refer to the USGS Water \n",
      "Resources Software User Rights Notice for complete use, copyright, \n",
      "and distribution information.\n",
      "\n",
      " \n",
      " Run start date and time (yyyy/mm/dd hh:mm:ss): 2022/02/10 20:38:02\n",
      " \n",
      " Writing simulation list file: mfsim.lst\n",
      " Using Simulation name file: mfsim.nam\n",
      " \n",
      "    Solving:  Stress period:     1    Time step:     1\n",
      "    Solving:  Stress period:     2    Time step:     1\n",
      "    Solving:  Stress period:     3    Time step:     1\n",
      "    Solving:  Stress period:     4    Time step:     1\n",
      "    Solving:  Stress period:     5    Time step:     1\n",
      "    Solving:  Stress period:     6    Time step:     1\n",
      "    Solving:  Stress period:     7    Time step:     1\n",
      "    Solving:  Stress period:     8    Time step:     1\n",
      "    Solving:  Stress period:     9    Time step:     1\n",
      "    Solving:  Stress period:    10    Time step:     1\n",
      "    Solving:  Stress period:    11    Time step:     1\n",
      "    Solving:  Stress period:    12    Time step:     1\n",
      "    Solving:  Stress period:    13    Time step:     1\n",
      " \n",
      " Run end date and time (yyyy/mm/dd hh:mm:ss): 2022/02/10 20:38:09\n",
      " Elapsed run time:  7.218 Seconds\n",
      " \n",
      " Normal termination of simulation.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(True, [])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.simulation.run_simulation()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the head results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:38:09.692428Z",
     "iopub.status.busy": "2022-02-10T20:38:09.692022Z",
     "iopub.status.idle": "2022-02-10T20:38:09.700722Z",
     "shell.execute_reply": "2022-02-10T20:38:09.701267Z"
    }
   },
   "outputs": [],
   "source": [
    "tmr_parent_headsobj = bf.HeadFile('../data/pleasant/pleasant.hds')\n",
    "lgr_parent_headsobj = bf.HeadFile('plsnt_lgr_parent.hds')\n",
    "lgr_inset_headsobj = bf.HeadFile('plsnt_lgr_inset.hds')\n",
    "\n",
    "tmr_parent_hds = tmr_parent_headsobj.get_data(kstpkper=(4, 12))\n",
    "lgr_parent_hds = lgr_parent_headsobj.get_data(kstpkper=(0, 12))\n",
    "lgr_inset_hds = lgr_inset_headsobj.get_data(kstpkper=(0, 12))\n",
    "\n",
    "lgr_parent_hds = np.ma.masked_array(lgr_parent_hds, mask=lgr_parent_hds == 1e30)\n",
    "lgr_inset_hds = np.ma.masked_array(lgr_inset_hds, mask=lgr_inset_hds == 1e30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:38:09.711791Z",
     "iopub.status.busy": "2022-02-10T20:38:09.710945Z",
     "iopub.status.idle": "2022-02-10T20:38:10.042937Z",
     "shell.execute_reply": "2022-02-10T20:38:10.043251Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "layer = 0\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 10))\n",
    "parent_mv = flopy.plot.PlotMapView(model=m, ax=ax, layer=layer)\n",
    "inset_mv = flopy.plot.PlotMapView(model=inset, ax=ax, layer=layer)\n",
    "\n",
    "pctr = parent_mv.contour_array(lgr_parent_hds, levels=np.arange(290, 315))\n",
    "ictr = inset_mv.contour_array(lgr_inset_hds, levels=np.arange(290, 315))\n",
    "#qmp = parent_mv.plot_array(lgr_parent_hds)\n",
    "#qmi = inset_mv.plot_array(lgr_inset_hds)\n",
    "\n",
    "lcp = parent_mv.plot_grid(lw=0.5, ax=ax)\n",
    "lci = inset_mv.plot_grid(lw=0.5)\n",
    "ax.set_ylim(b, t)\n",
    "ax.set_xlim(l, r)\n",
    "ax.set_aspect(1)\n",
    "#plt.colorbar(qmp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use [Modflow-export](https://github.com/aleaf/modflow-export) to export the modflow input to PDFs, rasters and shapefiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:38:10.048080Z",
     "iopub.status.busy": "2022-02-10T20:38:10.046411Z",
     "iopub.status.idle": "2022-02-10T20:38:40.660152Z",
     "shell.execute_reply": "2022-02-10T20:38:40.659470Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "creating postproc/plsnt_lgr_parent/pdfs...\n",
      "creating postproc/plsnt_lgr_parent/shps...\n",
      "creating postproc/plsnt_lgr_parent/rasters...\n",
      "\n",
      "dis package...\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay4.tif\n",
      "top:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/top.tif\n",
      "botm:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay4.tif\n",
      "idomain:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay4.tif\n",
      "\n",
      "ic package...\n",
      "strt:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay4.tif\n",
      "\n",
      "npf package...\n",
      "icelltype:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay4.tif\n",
      "k:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay4.tif\n",
      "k33:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay4.tif\n",
      "\n",
      "sto package...\n",
      "iconvert:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay4.tif\n",
      "ss:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay4.tif\n",
      "sy:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay4.tif\n",
      "\n",
      "rcha_0 package...\n",
      "irch:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per0.tif\n",
      "recharge:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per4.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per5.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per6.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per7.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per8.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per9.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per10.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per11.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per12.tif\n",
      "\n",
      "chd_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/chd0_stress_period_data.shp... Done\n",
      "head:\n",
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "sfr_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/plsnt_lgr_parent.sfr.shp... Done\n",
      "\n",
      "wel_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/wel0_stress_period_data.shp... Done\n",
      "q:\n",
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_1 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/obs1_stress_period_data.shp... Done\n",
      "creating postproc/plsnt_lgr_inset/pdfs...\n",
      "creating postproc/plsnt_lgr_inset/shps...\n",
      "creating postproc/plsnt_lgr_inset/rasters...\n",
      "\n",
      "dis package...\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay4.tif\n",
      "top:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/top.tif\n",
      "botm:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay4.tif\n",
      "idomain:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay4.tif\n",
      "\n",
      "ic package...\n",
      "strt:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay4.tif\n",
      "\n",
      "npf package...\n",
      "icelltype:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay4.tif\n",
      "k:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay4.tif\n",
      "k33:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay4.tif\n",
      "\n",
      "sto package...\n",
      "iconvert:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay4.tif\n",
      "ss:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay4.tif\n",
      "sy:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay4.tif\n",
      "\n",
      "rcha_0 package...\n",
      "irch:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per0.tif\n",
      "recharge:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per4.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per5.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per6.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per7.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per8.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per9.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per10.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per11.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per12.tif\n",
      "\n",
      "sfr_0 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/plsnt_lgr_inset.sfr.shp... Done\n",
      "\n",
      "lak_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "obs_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "wel_0 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/wel0_stress_period_data.shp... Done\n",
      "q:\n",
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_1 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/obs1_stress_period_data.shp... Done\n"
     ]
    }
   ],
   "source": [
    "for model in m, inset:\n",
    "    mfexport.export(model, model.modelgrid, output_path=f'postproc/{model.name}/')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Modflow-export can also create a summary table of the model inputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-10T20:38:40.664169Z",
     "iopub.status.busy": "2022-02-10T20:38:40.663816Z",
     "iopub.status.idle": "2022-02-10T20:38:42.617484Z",
     "shell.execute_reply": "2022-02-10T20:38:42.617857Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "summarizing plsnt_lgr_parent input...\n",
      "summarizing plsnt_lgr_inset input...\n",
      "skipped, not implemented yet\n"
     ]
    }
   ],
   "source": [
    "for model in m, inset:\n",
    "    mfexport.summarize(model, output_path=f'postproc/{model.name}/')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
