{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pleasant Lake Example\n",
    "This example is a simplified version of the Pleasant Lake model published by Fienen et al (2021). The goal of the Pleasant Lake model, part of the Central Sands Lake Study, was to address connections between groundwater abstraction and ecological function of a lake in central Wisconsin, USA (WDNR 2021; Figure 1). This required modeling at multiple scales. Fine discretization was needed near the lake for accurate simulation of water levels and groundwater-lake flux. A large model domain was also needed, to simulate farfield water-use activity (chiefly irrigated agriculture) in order to delineate a limit of connection, as well as to incorporate distant hydrologic boundaries. Adopting a fine enough discretization for the lake detail throughout the farfield would have resulted in a model with more cells than could be practically managed. To mitigate this, three models were combined: a large regional model built with MODFLOW-NWT (Niswonger et al. 2011), an intermediate MODFLOW 6 model inset within the regional model to simulate the irrigated agriculture area, and a refined MODFLOW 6 inset model (nested within the intermediate model) to simulate the lake. Regional groundwater flow and the effects of distant boundaries were simulated with the MODFLOW-NWT model, which was coupled sequentially (one-way) to the MODFLOW 6 models through time-varying specified head boundaries along the intermediate MODFLOW 6 model perimeter. The two MODFLOW 6 models were coupled dynamically (both ways) within the groundwater flow solution, allowing for feedback between the models. Estimates of groundwater recharge for the MODFLOW models were provided by a soil water balance code (SWB; Westenbroek et al 2018) simulation that could consider alternative assumptions of climate and land use. Net infiltration estimates from the SWB model were conveyed to the Recharge Packages in the MODFLOW models using the NetCDF functionality in Modflow-setup. \n",
    "\n",
    "<img src=\"https://github.com/aleaf/modflow-setup/blob/develop/docs/source/_static/fig1_pleasant_lake_model.jpg?raw=true\" align=\"center\">\n",
    "\n",
    "**Figure 1**: The full Pleasant Lake model domain with location map, showing the relationship between the regional, intermediate and LGR inset models, as well as the irrigation wells considered.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Most details of the Fienen et al (2021) model are included here, but to reduce file sizes and execution time, a smaller Modflow-6 simulation domain is used. The smaller domain is for illustration purposes only, and is not intended to be adequate for representing pumping impacts or providing a sufficient distance to the perimeter boundaries.\n",
    "\n",
    "\n",
    "* **[View the configuration file(s)](https://doi-usgs.github.io/modflow-setup/latest/config-file-gallery.html#pleasant-lake-test-case)** \n",
    "* **[Run this example](https://mybinder.org/v2/gh/usgs/modflow-setup/develop?urlpath=lab/tree/examples)  on  [Binder](https://mybinder.org/)**\n",
    "\n",
    "#### Model details\n",
    "* MODFLOW-6 simulation with a dynamically linked parent model and local grid refinement (LGR) inset model\n",
    "* LGR parent model is itself a Telescopic Mesh Refinment (TMR) inset from a regional MODFLOW-NWT model\n",
    "* Layer 1 in the regional model is subdivided evenly into two layers in the LGR models (``botm: from_parent: 0: -0.5``). The other layers are mapped explicitly between the TMR parent and LGR models.\n",
    "* starting heads for the LGR parent models were resampled from the regional model binary output\n",
    "* rch, npf, sto, and wel input copied from the regional model\n",
    "* SFR package constructed from an NHDPlus v2 dataset (path to NHDPlus files in the same structure as the `downloads from the NHDPlus website`_)\n",
    "* head observations from csv files with different column names\n",
    "* LGR inset extent based on a buffer distance around a feature of interest\n",
    "* LGR inset dis, ic, npf, sto and rch packages copied from LGR parent\n",
    "* Lake package created from polygon features, bathymetry raster, stage-area-volume file and climate data from `PRISM`_.\n",
    "* Lake package observations are set up automatically (output file for each lake)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:10.447702Z",
     "iopub.status.busy": "2024-09-12T01:03:10.447542Z",
     "iopub.status.idle": "2024-09-12T01:03:11.689079Z",
     "shell.execute_reply": "2024-09-12T01:03:11.688550Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy.interpolate import griddata\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import patheffects\n",
    "import flopy\n",
    "import flopy.utils.binaryfile as bf\n",
    "from mfsetup import MF6model\n",
    "from mfsetup.discretization import cellids_to_kij\n",
    "from gisutils import df2shp\n",
    "import mfexport\n",
    "from mfexport.utils import get_water_table\n",
    "\n",
    "wd = os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Just make a model grid\n",
    "Oftentimes at the start of a modeling project, we want to quickly test different grid resolutions and extents before attempting to build the model. We can do this with Modflow-setup by creating a model instance and then running the ``setup_grid()`` method. A model grid instance is created from the ``setup_grid:`` block in the configuration file. \n",
    "\n",
    "Note: ``%%capture`` in the block below is just to suppress printing of ``stdout`` for display of this notebook in the modflow-setup documentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:11.691664Z",
     "iopub.status.busy": "2024-09-12T01:03:11.691216Z",
     "iopub.status.idle": "2024-09-12T01:03:12.689103Z",
     "shell.execute_reply": "2024-09-12T01:03:12.688612Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "m = MF6model(cfg='pleasant_lgr_parent.yml')\n",
    "m.setup_grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since this model has local-grid refinement, it actually consists of two models: a parent built from ``pleasant_lgr_parent.yml``, and an inset built from ``pleasant_lgr_inset.yml``, which is referenced within ``pleasant_lgr_parent.yml``. The two sub-models are connected and solved simulataneously within the same MODFLOW 6 simulation. A model grid is made for each sub-model. The model grids are instances of the ``MFsetupGrid`` grid class, a subclass of the Flopy ``StructuredGrid`` class with some added functionality."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:12.691268Z",
     "iopub.status.busy": "2024-09-12T01:03:12.691094Z",
     "iopub.status.idle": "2024-09-12T01:03:12.696820Z",
     "shell.execute_reply": "2024-09-12T01:03:12.696332Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5 layer(s), 25 row(s), 25 column(s)\n",
       "delr: [200.00...200.00] undefined\n",
       "delc: [200.00...200.00] undefined\n",
       "CRS: EPSG:3070\n",
       "length units: meters\n",
       "xll: 553000.0; yll: 388000.0; rotation: 0.0\n",
       "Bounds: (np.float64(553000.0), np.float64(558000.0), np.float64(388000.0), np.float64(393000.0))"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.modelgrid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:12.724652Z",
     "iopub.status.busy": "2024-09-12T01:03:12.724173Z",
     "iopub.status.idle": "2024-09-12T01:03:12.728417Z",
     "shell.execute_reply": "2024-09-12T01:03:12.727943Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "75 row(s), 85 column(s)\n",
       "delr: [40.00...40.00] undefined\n",
       "delc: [40.00...40.00] undefined\n",
       "CRS: EPSG:3070\n",
       "length units: meters\n",
       "xll: 554200.0; yll: 388800.0; rotation: 0\n",
       "Bounds: (np.float64(554200.0), np.float64(557600.0), np.float64(388800.0), np.float64(391800.0))"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.inset['plsnt_lgr_inset'].modelgrid"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Working directory gottcha\n",
    "Currently, to facilitate working with external files in Flopy, **Modflow-setup changes the working directory to the model workspace**. In the context of a flat script that only builds the model, this is fine, but in a notebook or other workflows, this can potentially cause confusion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:12.730464Z",
     "iopub.status.busy": "2024-09-12T01:03:12.730159Z",
     "iopub.status.idle": "2024-09-12T01:03:12.733340Z",
     "shell.execute_reply": "2024-09-12T01:03:12.732931Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Write shapefiles of the inset and parent modelgrids\n",
    "A shapefile of the grid bounding box is written by default on creation of the model grid, to the location specified by ``output_files: grid_file:`` in the ``setup_grid:`` block (default is ``<model workspace>/postproc/shps/``). A shapefile of the grid cells as polygon features can be written as below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:12.735224Z",
     "iopub.status.busy": "2024-09-12T01:03:12.734941Z",
     "iopub.status.idle": "2024-09-12T01:03:13.612753Z",
     "shell.execute_reply": "2024-09-12T01:03:13.612291Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "creating shapely Polygons of grid cells...\n",
      "finished in 0.01s\n",
      "\n",
      "writing postproc/shps/plsnt_lgr_parent_grid.shp... Done\n",
      "creating shapely Polygons of grid cells...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "finished in 0.16s\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing postproc/shps/plsnt_lgr_inset_grid.shp... Done\n"
     ]
    }
   ],
   "source": [
    "m.modelgrid.write_shapefile('postproc/shps/plsnt_lgr_parent_grid.shp')\n",
    "m.inset['plsnt_lgr_inset'].modelgrid.write_shapefile('postproc/shps/plsnt_lgr_inset_grid.shp')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Change the working directory back to the notebook location"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:13.614723Z",
     "iopub.status.busy": "2024-09-12T01:03:13.614544Z",
     "iopub.status.idle": "2024-09-12T01:03:13.617360Z",
     "shell.execute_reply": "2024-09-12T01:03:13.616961Z"
    }
   },
   "outputs": [],
   "source": [
    "os.chdir(wd)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Build the whole model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:13.619236Z",
     "iopub.status.busy": "2024-09-12T01:03:13.619071Z",
     "iopub.status.idle": "2024-09-12T01:03:22.304481Z",
     "shell.execute_reply": "2024-09-12T01:03:22.303989Z"
    }
   },
   "outputs": [],
   "source": [
    "%%capture\n",
    "m = MF6model.setup_from_yaml('pleasant_lgr_parent.yml')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a ``MF6model`` instance (subclass of ``flopy.mf6.ModflowGwf``) is returned"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:22.306800Z",
     "iopub.status.busy": "2024-09-12T01:03:22.306467Z",
     "iopub.status.idle": "2024-09-12T01:03:22.313324Z",
     "shell.execute_reply": "2024-09-12T01:03:22.312794Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pleasant Lake test case version 0.1.post29+g31a3c11\n",
       "Parent model: /home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/pleasant\n",
       "5 layer(s), 25 row(s), 25 column(s)\n",
       "delr: [200.00...200.00] undefined\n",
       "delc: [200.00...200.00] undefined\n",
       "CRS: EPSG:3070\n",
       "length units: meters\n",
       "xll: 553000.0; yll: 388000.0; rotation: 0.0\n",
       "Bounds: (np.float64(553000.0), np.float64(558000.0), np.float64(388000.0), np.float64(393000.0))\n",
       "Packages: dis ic npf sto rcha_0 oc chd_0 obs_0 sfr_0 wel_0 obs_1 obs_2\n",
       "13 period(s):\n",
       " per start_datetime end_datetime  perlen  steady  nstp\n",
       "   0     2012-01-01   2012-01-01     1.0    True     1\n",
       "   1     2012-01-01   2012-02-01    31.0   False     1\n",
       "   2     2012-02-01   2012-03-01    29.0   False     1\n",
       "   ...\n",
       "  12     2012-12-01   2013-01-01    31.0   False     1"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "information from the configuration file is stored in an attached ``cfg`` dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:22.315534Z",
     "iopub.status.busy": "2024-09-12T01:03:22.315217Z",
     "iopub.status.idle": "2024-09-12T01:03:22.318682Z",
     "shell.execute_reply": "2024-09-12T01:03:22.318292Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['metadata', 'simulation', 'model', 'parent', 'postprocessing', 'setup_grid', 'dis', 'tdis', 'ic', 'npf', 'sto', 'rch', 'sfr', 'high_k_lakes', 'lak', 'mvr', 'chd', 'drn', 'ghb', 'riv', 'wel', 'oc', 'obs', 'ims', 'mfsetup_options', 'filename', 'maw', 'external_files', 'intermediate_data', 'grid'])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.cfg.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "the ``cfg`` dictionary contains both information from the configuration file, and MODFLOW input (such as external text file arrays) that was developed from the original source data. Internally in Modflow-setup, MODFLOW input in ``cfg`` is fed to the various Flopy object constructors."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:22.320628Z",
     "iopub.status.busy": "2024-09-12T01:03:22.320322Z",
     "iopub.status.idle": "2024-09-12T01:03:22.324380Z",
     "shell.execute_reply": "2024-09-12T01:03:22.323983Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "defaultdict(dict,\n",
       "            {'remake_top': True,\n",
       "             'options': {'length_units': 'meters'},\n",
       "             'dimensions': {'nlay': 5, 'nrow': 25, 'ncol': 25},\n",
       "             'griddata': {'top': [{'filename': './external/plsnt_lgr_parent_top.dat'}],\n",
       "              'botm': [{'filename': './external/plsnt_lgr_parent_botm_000.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_001.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_002.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_003.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_botm_004.dat'}],\n",
       "              'idomain': [{'filename': './external/plsnt_lgr_parent_idomain_000.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_001.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_002.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_003.dat'},\n",
       "               {'filename': './external/plsnt_lgr_parent_idomain_004.dat'}]},\n",
       "             'top_filename_fmt': 'top.dat',\n",
       "             'botm_filename_fmt': 'botm_{:03d}.dat',\n",
       "             'idomain_filename_fmt': 'idomain_{:03d}.dat',\n",
       "             'minimum_layer_thickness': 1,\n",
       "             'drop_thin_cells': True,\n",
       "             'source_data': {'top': {'filename': '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/dem40m.tif',\n",
       "               'elevation_units': 'meters'},\n",
       "              'botm': {'filenames': {1: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm0.tif',\n",
       "                2: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm1.tif',\n",
       "                3: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm2.tif',\n",
       "                4: '/home/runner/work/modflow-setup/modflow-setup/examples/data/pleasant/source_data/rasters/botm3.tif'}}},\n",
       "             'nlay': 4})"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.cfg['dis']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The inset LGR model is attached to the parent within an ``inset`` dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:22.326053Z",
     "iopub.status.busy": "2024-09-12T01:03:22.325900Z",
     "iopub.status.idle": "2024-09-12T01:03:22.332393Z",
     "shell.execute_reply": "2024-09-12T01:03:22.331969Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'plsnt_lgr_inset': plsnt_lgr_inset model version 0.5.0.post29+g31a3c11\n",
       " Parent model: ./plsnt_lgr_parent\n",
       " 5 layer(s), 75 row(s), 85 column(s)\n",
       " delr: [40.00...40.00] undefined\n",
       " delc: [40.00...40.00] undefined\n",
       " CRS: EPSG:3070\n",
       " length units: meters\n",
       " xll: 554200.0; yll: 388800.0; rotation: 0\n",
       " Bounds: (np.float64(554200.0), np.float64(557600.0), np.float64(388800.0), np.float64(391800.0))\n",
       " Packages: dis ic npf sto rcha_0 oc sfr_0 lak_0 obs_0 obs_1\n",
       " 13 period(s):\n",
       "  per start_datetime end_datetime  perlen  steady  nstp\n",
       "    0     2012-01-01   2012-01-01     1.0    True     1\n",
       "    1     2012-01-01   2012-02-01    31.0   False     1\n",
       "    2     2012-02-01   2012-03-01    29.0   False     1\n",
       "    ...\n",
       "   12     2012-12-01   2013-01-01    31.0   False     1}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.inset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plot the inset and parent model grids with Lake Package connections by layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:22.334328Z",
     "iopub.status.busy": "2024-09-12T01:03:22.334021Z",
     "iopub.status.idle": "2024-09-12T01:03:22.497329Z",
     "shell.execute_reply": "2024-09-12T01:03:22.496792Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.colorbar.Colorbar at 0x7f947f4b17c0>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "inset = m.inset['plsnt_lgr_inset']\n",
    "\n",
    "l, r, b, t = m.modelgrid.extent\n",
    "layer = 0\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(10, 10))\n",
    "parent_mv = flopy.plot.PlotMapView(model=m, ax=ax, layer=layer)\n",
    "inset_mv = flopy.plot.PlotMapView(model=inset, ax=ax, layer=layer)\n",
    "\n",
    "vconn = inset.lak.connectiondata.array[inset.lak.connectiondata.array['claktype'] == 'vertical']\n",
    "k, i, j = cellids_to_kij(vconn['cellid'])\n",
    "lakeconnections = np.zeros((inset.nrow, inset.ncol))\n",
    "lakeconnections[i, j] = np.array(k)\n",
    "lakeconnections = np.ma.masked_array(lakeconnections, mask=lakeconnections == 0)\n",
    "qmi = inset_mv.plot_array(lakeconnections)\n",
    "\n",
    "#inset_mv.plot_bc('LAK', color='navy')\n",
    "#parent_mv.plot_bc('WEL_0', color='red')\n",
    "\n",
    "lcp = parent_mv.plot_grid(lw=0.5, ax=ax)\n",
    "lci = inset_mv.plot_grid(lw=0.5)\n",
    "ax.set_ylim(b, t)\n",
    "ax.set_xlim(l, r)\n",
    "ax.set_aspect(1)\n",
    "plt.colorbar(qmi)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Make a cross section of the grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:22.499463Z",
     "iopub.status.busy": "2024-09-12T01:03:22.499121Z",
     "iopub.status.idle": "2024-09-12T01:03:22.784714Z",
     "shell.execute_reply": "2024-09-12T01:03:22.784131Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1400x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(14, 5))\n",
    "xs_line = [(553000, 390200), (558000, 390200)]\n",
    "xs = flopy.plot.PlotCrossSection(model=m,\n",
    "                                line={\"line\": xs_line}, ax=ax,\n",
    "                                geographic_coords=True)\n",
    "lc = xs.plot_grid(zorder=4)\n",
    "xs2 = flopy.plot.PlotCrossSection(model=inset,\n",
    "                                line={\"line\": xs_line}, ax=ax,\n",
    "                                geographic_coords=True)\n",
    "lc = xs2.plot_grid(zorder=4)\n",
    "ax.set_ylim(190, 400)\n",
    "plt.savefig('../../docs/source/_static/pleasant_lgr_xsection.png', bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### write the MODFLOW input files\n",
    "(just like you would for a Flopy model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:22.786830Z",
     "iopub.status.busy": "2024-09-12T01:03:22.786662Z",
     "iopub.status.idle": "2024-09-12T01:03:23.457152Z",
     "shell.execute_reply": "2024-09-12T01:03:23.456646Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing simulation...\n",
      "  writing simulation name file...\n",
      "  writing simulation tdis package...\n",
      "  writing solution package ims_-1...\n",
      "  writing package pleasant_lgr.gwfgwf...\n",
      "  writing package pleasant_lgr.mvr...\n",
      "  writing model plsnt_lgr_parent...\n",
      "    writing model name file...\n",
      "    writing package dis...\n",
      "    writing package ic...\n",
      "    writing package npf...\n",
      "    writing package sto...\n",
      "    writing package rcha_0...\n",
      "    writing package oc...\n",
      "    writing package chd_0...\n",
      "INFORMATION: maxbound in ('gwf6', 'chd', 'dimensions') changed to 241 based on size of stress_period_data\n",
      "    writing package obs_0...\n",
      "    writing package sfr_0...\n",
      "    writing package wel_0...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFORMATION: maxbound in ('gwf6', 'wel', 'dimensions') changed to 2 based on size of stress_period_data\n",
      "    writing package obs_1...\n",
      "    writing package obs_2...\n",
      "  writing model plsnt_lgr_inset...\n",
      "    writing model name file...\n",
      "    writing package dis...\n",
      "    writing package ic...\n",
      "    writing package npf...\n",
      "    writing package sto...\n",
      "    writing package rcha_0...\n",
      "    writing package oc...\n",
      "    writing package sfr_0...\n",
      "    writing package lak_0...\n",
      "    writing package obs_0...\n",
      "    writing package obs_1...\n",
      "SFRmaker v. 0.11.2.post6+gb2233e6\n",
      "\n",
      "Running Flopy v. 3.9.0.dev1 diagnostics...\n",
      "passed.\n",
      "\n",
      "Checking for continuity in segment and reach numbering...\n",
      "passed.\n",
      "\n",
      "Checking for increasing segment numbers in downstream direction...\n",
      "passed.\n",
      "\n",
      "Checking for circular routing...\n",
      "passed.\n",
      "\n",
      "Checking reach connections for proximity...\n",
      "2 segments with non-adjacent reaches found.\n",
      "At segments:\n",
      "1 2\n",
      "\n",
      "2 segments with non-adjacent reaches found.\n",
      "At segments:\n",
      "1 2\n",
      "\n",
      "\n",
      "Checking for model cells with multiple non-zero SFR conductances...\n",
      "passed.\n",
      "\n",
      "Checking for streambed tops of less than -10...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking for streambed tops of greater than 15000...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking segment_data for downstream rises in streambed elevation...\n",
      "Segment elevup and elevdn not specified for nstrm=-9 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking reach_data for downstream rises in streambed elevation...\n",
      "1 reaches encountered with strtop < strtop of downstream reach.\n",
      "Elevation rises:\n",
      "k i j iseg ireach strtop strtopdn d_strtop reachID diff\n",
      "4 21 17 2 1 290.66015625 292.6883850097656 2.028228759765625 3 -2.028228759765625\n",
      "\n",
      "\n",
      "Checking reach_data for inconsistencies between streambed elevations and the model grid...\n",
      "passed.\n",
      "\n",
      "Checking segment_data for inconsistencies between segment end elevations and the model grid...\n",
      "Segment elevup and elevdn not specified for nstrm=-9 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of less than 0.0001...\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of greater than 1.0...\n",
      "passed.\n",
      "\n",
      "wrote plsnt_lgr_parent_SFR.chk\n",
      "wrote plsnt_lgr_parent.sfr.obs\n",
      "converting reach and segment data to package data...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/external/plsnt_lgr_parent_packagedata.dat\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_parent.sfr\n",
      "SFRmaker v. 0.11.2.post6+gb2233e6\n",
      "\n",
      "Running Flopy v. 3.9.0.dev1 diagnostics...\n",
      "passed.\n",
      "\n",
      "Checking for continuity in segment and reach numbering...\n",
      "passed.\n",
      "\n",
      "Checking for increasing segment numbers in downstream direction...\n",
      "passed.\n",
      "\n",
      "Checking for circular routing...\n",
      "passed.\n",
      "\n",
      "Checking reach connections for proximity...\n",
      "0 segments with non-adjacent reaches found.\n",
      "At segments:\n",
      "\n",
      "\n",
      "0 segments with non-adjacent reaches found.\n",
      "At segments:\n",
      "\n",
      "\n",
      "\n",
      "Checking for model cells with multiple non-zero SFR conductances...\n",
      "1 model cells with multiple non-zero SFR conductances found.\n",
      "This may lead to circular routing between collocated reaches.\n",
      "Nodes with overlapping conductances:\n",
      "k\ti\tj\tiseg\tireach\trchlen\tstrthick\tstrhc1\n",
      "0\t27\t71\t1\t12\t13.225701332092285\t1.0\t1.0\n",
      "0\t27\t71\t1\t13\t26.684703826904297\t1.0\t1.0\n",
      "\n",
      "Checking for streambed tops of less than -10...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking for streambed tops of greater than 15000...\n",
      "isfropt setting of 1,2 or 3 requires strtop information!\n",
      "\n",
      "\n",
      "Checking segment_data for downstream rises in streambed elevation...\n",
      "Segment elevup and elevdn not specified for nstrm=-41 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking reach_data for downstream rises in streambed elevation...\n",
      "passed.\n",
      "\n",
      "Checking reach_data for inconsistencies between streambed elevations and the model grid...\n",
      "passed.\n",
      "\n",
      "Checking segment_data for inconsistencies between segment end elevations and the model grid...\n",
      "Segment elevup and elevdn not specified for nstrm=-41 and isfropt=1\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of less than 0.0001...\n",
      "passed.\n",
      "\n",
      "Checking for streambed slopes of greater than 1.0...\n",
      "passed.\n",
      "\n",
      "wrote plsnt_lgr_inset_SFR.chk\n",
      "converting reach and segment data to package data...\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/external/plsnt_lgr_inset_packagedata.dat\n",
      "wrote /home/runner/work/modflow-setup/modflow-setup/examples/pleasant_lgr/plsnt_lgr_inset.sfr\n"
     ]
    }
   ],
   "source": [
    "m.write_input()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Run the model\n",
    "\n",
    "**Note:** Running the model through Flopy (as below) requires specification of the MODFLOW executable. In Flopy, the executable is specified via the ``exe_name`` argument to the simulation constructor for MODFLOW 6, or model constructor for previous MODFLOW versions. Similarly, in Modflow-setup, the ``exe_name`` is specified in the ``simulation:`` or ``model:`` block of the [configuration file](https://doi-usgs.github.io/modflow-setup/latest/config-file-gallery.html#pleasant-lake-test-case). This example assumes that a MODFLOW 6 executable with the name \"mf6\" either resides in the model workspace, or is included in the system path."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:23.459252Z",
     "iopub.status.busy": "2024-09-12T01:03:23.459079Z",
     "iopub.status.idle": "2024-09-12T01:03:27.288044Z",
     "shell.execute_reply": "2024-09-12T01:03:27.287604Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FloPy is using the following executable to run the model: ../../../../../.local/bin/mf6\n",
      "                                   MODFLOW 6\n",
      "                U.S. GEOLOGICAL SURVEY MODULAR HYDROLOGIC MODEL\n",
      "                   VERSION 6.3.0 release candidate 03/08/2022\n",
      "                               ***DEVELOP MODE***\n",
      "\n",
      "   MODFLOW 6 compiled Mar 08 2022 20:13:10 with Intel(R) Fortran Intel(R) 64\n",
      "   Compiler Classic for applications running on Intel(R) 64, Version 2021.5.0\n",
      "                             Build 20211109_000000\n",
      "\n",
      "This software is preliminary or provisional and is subject to \n",
      "revision. It is being provided to meet the need for timely best \n",
      "science. The software has not received final approval by the U.S. \n",
      "Geological Survey (USGS). No warranty, expressed or implied, is made \n",
      "by the USGS or the U.S. Government as to the functionality of the \n",
      "software and related material nor shall the fact of release \n",
      "constitute any such warranty. The software is provided on the \n",
      "condition that neither the USGS nor the U.S. Government shall be held \n",
      "liable for any damages resulting from the authorized or unauthorized \n",
      "use of the software.\n",
      "\n",
      " \n",
      " Run start date and time (yyyy/mm/dd hh:mm:ss): 2024/09/12  1:03:23\n",
      " \n",
      " Writing simulation list file: mfsim.lst\n",
      " Using Simulation name file: mfsim.nam\n",
      " \n",
      "    Solving:  Stress period:     1    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     2    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     3    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     4    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     5    Time step:     1\n",
      "    Solving:  Stress period:     6    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     7    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     8    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:     9    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:    10    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:    11    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:    12    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Solving:  Stress period:    13    Time step:     1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " \n",
      " Run end date and time (yyyy/mm/dd hh:mm:ss): 2024/09/12  1:03:27\n",
      " Elapsed run time:  3.820 Seconds\n",
      " \n",
      " Normal termination of simulation.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(True, [])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m.simulation.run_simulation()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the head results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:27.290022Z",
     "iopub.status.busy": "2024-09-12T01:03:27.289857Z",
     "iopub.status.idle": "2024-09-12T01:03:27.303879Z",
     "shell.execute_reply": "2024-09-12T01:03:27.303514Z"
    }
   },
   "outputs": [],
   "source": [
    "tmr_parent_headsobj = bf.HeadFile('../data/pleasant/pleasant.hds')\n",
    "lgr_parent_headsobj = bf.HeadFile('plsnt_lgr_parent.hds')\n",
    "lgr_inset_headsobj = bf.HeadFile('plsnt_lgr_inset.hds')\n",
    "\n",
    "# read the head results for the last stress period\n",
    "kper = 12\n",
    "lgr_parent_hds = lgr_parent_headsobj.get_data(kstpkper=(0, kper))\n",
    "lgr_inset_hds = lgr_inset_headsobj.get_data(kstpkper=(0, kper))\n",
    "\n",
    "# Get the water table elevation from the 3D head results\n",
    "inset_wt = get_water_table(lgr_inset_hds, nodata=1e30)\n",
    "parent_wt = get_water_table(lgr_parent_hds, nodata=1e30)\n",
    "\n",
    "# put in the lake level (not included in head output)\n",
    "lake_results = pd.read_csv('lake1.obs.csv')\n",
    "stage = lake_results['STAGE'][kper]\n",
    "inset_wt[inset.lakarr[0] == 1] = stage"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### First combine the parent and inset model head results\n",
    "(into a single grid at the inset model resolution; for a nicer looking plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:27.305741Z",
     "iopub.status.busy": "2024-09-12T01:03:27.305556Z",
     "iopub.status.idle": "2024-09-12T01:03:27.379104Z",
     "shell.execute_reply": "2024-09-12T01:03:27.378664Z"
    }
   },
   "outputs": [],
   "source": [
    "# make the single grid\n",
    "l, b, r, t = m.modelgrid.bounds\n",
    "xi = np.arange(l, r, 40)\n",
    "yi = np.arange(b, t, 40)[::-1]\n",
    "Xi, Yi = np.meshgrid(xi, yi)\n",
    "\n",
    "# make a single set of points\n",
    "# including both parent and inset cell centers\n",
    "# and water table values\n",
    "x = m.modelgrid.xcellcenters[~parent_wt.mask]\n",
    "y = m.modelgrid.ycellcenters[~parent_wt.mask]\n",
    "x = np.append(x, inset.modelgrid.xcellcenters[~inset_wt.mask])\n",
    "y = np.append(y, inset.modelgrid.ycellcenters[~inset_wt.mask])\n",
    "z = parent_wt[~parent_wt.mask].data\n",
    "z = np.append(z, inset_wt[~inset_wt.mask].data)\n",
    "\n",
    "# interpolate the results from the points\n",
    "# onto the single inset resolution grid\n",
    "results = griddata((x, y), z, (Xi, Yi))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Make the plot\n",
    "* include the parent and inset model grids\n",
    "* show the head contours for the combined parent/inset simulation\n",
    "* show SFR boundary condition cells in green\n",
    "* show the lakebed leakance zones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:27.381370Z",
     "iopub.status.busy": "2024-09-12T01:03:27.381007Z",
     "iopub.status.idle": "2024-09-12T01:03:28.454486Z",
     "shell.execute_reply": "2024-09-12T01:03:28.453992Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 650x650 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['axes.labelsize'] = 8\n",
    "plt.rcParams['xtick.labelsize'] = 8\n",
    "plt.rcParams['ytick.labelsize'] = 8\n",
    "\n",
    "layer = 0\n",
    "fig, ax = plt.subplots(figsize=(6.5, 6.5))\n",
    "# create Flopy plot objects\n",
    "parent_mv = flopy.plot.PlotMapView(model=m, ax=ax, layer=layer)\n",
    "inset_mv = flopy.plot.PlotMapView(model=inset, ax=ax, layer=layer)\n",
    "\n",
    "# plot boundary condition cells from Modflow-setup array properties\n",
    "inset_bcs = np.ma.masked_array(inset._isbc2d, mask=inset._isbc2d==0)\n",
    "parent_bcs = np.ma.masked_array(m._isbc2d, mask=m._isbc2d==0)\n",
    "parent_mv.plot_array(parent_bcs, vmin=0, vmax=5)\n",
    "inset_mv.plot_array(inset_bcs, vmin=0, vmax=5)\n",
    "\n",
    "#bdlknc_values = inset.lak.connectiondata.array['bedleak']\n",
    "conn = inset.lak.connectiondata.array\n",
    "k, i, j = cellids_to_kij(conn['cellid'])\n",
    "bdlknc = np.zeros((inset.nlay, inset.nrow, inset.ncol))\n",
    "bdlknc[k, i, j] = conn['bedleak']\n",
    "bdlknc = np.max(bdlknc, axis=0)\n",
    "bdlknc = np.ma.masked_array(bdlknc, mask=bdlknc == 0)\n",
    "inset_mv.plot_array(bdlknc, cmap='Blues', zorder=200)\n",
    "\n",
    "# contour the combined inset/parent head results\n",
    "levels = np.arange(290, 315, 2)\n",
    "ctr = ax.contour(Xi, Yi, results, levels=levels, colors='b', zorder=10)\n",
    "labels = ax.clabel(ctr, inline=True, fontsize=8, inline_spacing=10)\n",
    "plt.setp(labels, path_effects=[\n",
    "    patheffects.withStroke(linewidth=3, foreground=\"w\")])\n",
    "\n",
    "# plot the grid cell edges\n",
    "lcp = parent_mv.plot_grid(lw=0.5, ax=ax)\n",
    "lci = inset_mv.plot_grid(lw=0.5)\n",
    "\n",
    "ax.set_ylim(b, t)\n",
    "ax.set_xlim(l, r)\n",
    "ax.set_aspect(1)\n",
    "ax.set_ylabel('Northing, in Wisconsin Transverse Mercator (meters)')\n",
    "ax.set_xlabel('Easting, in Wisconsin Transverse Mercator (meters)')\n",
    "\n",
    "ax.text(555600, 390450, 'Pleasant\\nLake', ha='left', va='top', color='DarkBlue', \n",
    "        fontsize=10, fontstyle='italic', family='Serif', zorder=202)\n",
    "txt = ax.text(556400, 391000, 'Chaffee Creek (SFR)', ha='left', va='top', color='DarkGreen', \n",
    "        fontsize=10, fontstyle='italic', family='Serif', zorder=20)\n",
    "txt.set_path_effects([patheffects.withStroke(linewidth=5, foreground='w')])\n",
    "txt = ax.text(556700, 388900, 'Tagatz\\nCreek (SFR)', ha='left', va='top', color='DarkGreen', \n",
    "        fontsize=10, fontstyle='italic', family='Serif', zorder=20)\n",
    "txt.set_path_effects([patheffects.withStroke(linewidth=5, foreground='w')])\n",
    "\n",
    "txt = ax.annotate(\"Littoral zone\",\n",
    "            xy=(555450, 390100), xycoords='data',\n",
    "            xytext=(555050,390100), textcoords='data',\n",
    "                  ha='right',\n",
    "            arrowprops=dict(arrowstyle=\"-|>\",\n",
    "                            connectionstyle=\"arc3\", fc='k'),\n",
    "            path_effects=[patheffects.withStroke(linewidth=4, foreground='w')],\n",
    "            zorder=203\n",
    "            )\n",
    "txt.arrow_patch.set_path_effects([\n",
    "    patheffects.Stroke(linewidth=2, foreground=\"w\"),\n",
    "    patheffects.Normal()])\n",
    "\n",
    "txt = ax.annotate(\"Profundal zone\",\n",
    "            xy=(555600, 390100), xycoords='data',\n",
    "            xytext=(555800,389500), textcoords='data',\n",
    "                  ha='right',\n",
    "            arrowprops=dict(arrowstyle=\"-|>\",\n",
    "                            connectionstyle=\"arc3\", fc='k'),\n",
    "            path_effects=[patheffects.withStroke(linewidth=4, foreground='w')],\n",
    "            zorder=203\n",
    "            )\n",
    "txt.arrow_patch.set_path_effects([\n",
    "    patheffects.Stroke(linewidth=2, foreground=\"w\"),\n",
    "    patheffects.Normal()])\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('postproc/pdfs/figure_2.pdf')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use [Modflow-export](https://github.com/aleaf/modflow-export) to export the modflow input to PDFs, rasters and shapefiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:28.456498Z",
     "iopub.status.busy": "2024-09-12T01:03:28.456326Z",
     "iopub.status.idle": "2024-09-12T01:03:54.105423Z",
     "shell.execute_reply": "2024-09-12T01:03:54.104981Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "creating postproc/plsnt_lgr_parent/pdfs...\n",
      "creating postproc/plsnt_lgr_parent/shps...\n",
      "creating postproc/plsnt_lgr_parent/rasters...\n",
      "\n",
      "dis package...\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/thickness_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "top:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/top.tif\n",
      "botm:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/botm_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "idomain:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/idomain_lay4.tif\n",
      "\n",
      "ic package...\n",
      "strt:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/strt_lay4.tif\n",
      "\n",
      "npf package...\n",
      "icelltype:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/icelltype_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/k_lay4.tif\n",
      "k33:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/k33_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "sto package...\n",
      "iconvert:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/iconvert_lay4.tif\n",
      "ss:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/ss_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sy:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay0.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay2.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/sy_lay4.tif\n",
      "\n",
      "rcha_0 package...\n",
      "irch:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/irch_per0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "recharge:\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per1.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per3.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per5.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per6.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per7.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per8.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per9.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per10.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per11.tif\n",
      "wrote postproc/plsnt_lgr_parent/rasters/recharge_per12.tif\n",
      "\n",
      "chd_0 package...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing postproc/plsnt_lgr_parent/shps/chd0_stress_period_data.shp... Done\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "head:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "sfr_0 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/plsnt_lgr_parent.sfr.shp... Done\n",
      "\n",
      "wel_0 package...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "writing postproc/plsnt_lgr_parent/shps/wel0_stress_period_data.shp... Done\n",
      "q:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "boundname:\n",
      "Warning, variable: boundname\n",
      "Export of non-period data from transientlists not implemented!\n",
      "\n",
      "obs_1 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "obs_2 package...\n",
      "writing postproc/plsnt_lgr_parent/shps/obs2_stress_period_data.shp... Done\n",
      "creating postproc/plsnt_lgr_inset/pdfs...\n",
      "creating postproc/plsnt_lgr_inset/shps...\n",
      "creating postproc/plsnt_lgr_inset/rasters...\n",
      "\n",
      "dis package...\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/thickness_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "top:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/top.tif\n",
      "botm:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/botm_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "idomain:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/idomain_lay4.tif\n",
      "\n",
      "ic package...\n",
      "strt:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/strt_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "npf package...\n",
      "icelltype:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/icelltype_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/k_lay4.tif\n",
      "k33:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/k33_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "sto package...\n",
      "iconvert:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/iconvert_lay4.tif\n",
      "ss:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay0.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay1.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay2.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay3.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/ss_lay4.tif\n",
      "sy:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay1.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay2.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay3.tif\n",
      "wrote postproc/plsnt_lgr_inset/rasters/sy_lay4.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "rcha_0 package...\n",
      "irch:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/irch_per0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "recharge:\n",
      "wrote postproc/plsnt_lgr_inset/rasters/recharge_per0.tif\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "sfr_0 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/plsnt_lgr_inset.sfr.shp... Done\n",
      "\n",
      "lak_0 package...\n",
      "skipping lak0.perioddata; efficient export not implemented\n",
      "\n",
      "obs_0 package...\n",
      "skipped, not implemented yet\n",
      "\n",
      "obs_1 package...\n",
      "writing postproc/plsnt_lgr_inset/shps/obs1_stress_period_data.shp... Done\n"
     ]
    }
   ],
   "source": [
    "for model in m, inset:\n",
    "    mfexport.export(model, model.modelgrid, output_path=f'postproc/{model.name}/')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Modflow-export can also create a summary table of the model inputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-12T01:03:54.107542Z",
     "iopub.status.busy": "2024-09-12T01:03:54.107203Z",
     "iopub.status.idle": "2024-09-12T01:03:55.681947Z",
     "shell.execute_reply": "2024-09-12T01:03:55.681422Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "summarizing plsnt_lgr_parent input...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "skipped, not implemented yet\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "skipped, not implemented yet\n",
      "summarizing plsnt_lgr_inset input...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "skipped, not implemented yet\n"
     ]
    }
   ],
   "source": [
    "for model in m, inset:\n",
    "    mfexport.summarize(model, output_path=f'postproc/{model.name}/')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "flopy",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
